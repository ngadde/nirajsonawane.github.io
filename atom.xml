<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niraj Sonawane</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nirajsonawane.github.io/"/>
  <updated>2019-03-22T17:38:04.103Z</updated>
  <id>https://nirajsonawane.github.io/</id>
  
  <author>
    <name>Niraj Sonawane</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud Netflix Ribbon</title>
    <link href="https://nirajsonawane.github.io/2019/03/22/Spring-Cloud-Netflix-Ribbon/"/>
    <id>https://nirajsonawane.github.io/2019/03/22/Spring-Cloud-Netflix-Ribbon/</id>
    <published>2019-03-22T16:15:52.000Z</published>
    <updated>2019-03-22T17:38:04.103Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/03/22/Spring-Cloud-Netflix-Ribbon/jeremy-thomas-75753-unsplash.jpg"><h3 id="What-is-Ribbon"><a href="#What-is-Ribbon" class="headerlink" title="What is Ribbon?"></a>What is Ribbon?</h3><p>Ribbon is a client-side load balancer that gives you a lot of control over the behavior of HTTP and TCP clients. <strong>Ribbon  is aware of multiple instances of a service and chooses a particular instance of it. One advantage of this is client controls the load balancing algorithm.</strong></p><p>Ribbon Works with <a href="https://nirajsonawane.github.io/2019/03/21/Simplifying-Microservices-Communication-Using-Spring-Cloud-OpenFeign/">Feign</a> That we discussed in last post.</p><p><strong>The Code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-Cloud-Ribbon-Demo" target="_blank" rel="noopener">here</a>.</strong></p><h3 id="Demo-Application"><a href="#Demo-Application" class="headerlink" title="Demo Application"></a>Demo Application</h3><p>Our Simple <code>HelloService</code> Returns String <em>Hello Message From Server: {port_number}</em>. We will launch multiple instance of <code>HelloService</code>. Our Ribbon Client will call <code>HelloService</code> in Round-Robin way.     </p><figure class="highlight java"><figcaption><span>HelloService</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/helloworld"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String port = environment.getProperty(<span class="string">"local.server.port"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Message From Server "</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h3 id="Getting-Started-With-Spring-Cloud-Netflix-Ribbon"><a href="#Getting-Started-With-Spring-Cloud-Netflix-Ribbon" class="headerlink" title="Getting Started With Spring Cloud Netflix Ribbon"></a>Getting Started With Spring Cloud Netflix Ribbon</h3><p>To include Ribbon in project We need to use artifact id spring-cloud-starter-netflix-ribbon<br><figure class="highlight"><figcaption><span>netflix-ribbon Maven</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">     &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="Update-FeignClient-to-use-Ribbon-Load-Balancing"><a href="#Update-FeignClient-to-use-Ribbon-Load-Balancing" class="headerlink" title="Update FeignClient to use Ribbon Load Balancing"></a>Update FeignClient to use Ribbon Load Balancing</h3><figure class="highlight java"><figcaption><span>FeignClient With Ribbon</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello"</span>, configuration = HelloClientConfig.class)</span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/helloworld"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>A central concept in Ribbon is that of the named client. We Provide the application name in<br><code>application.properties</code>.<br><strong>application-name.ribbon.listOfServers</strong> Property is used to provide list of Servers.<br><figure class="highlight java"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=hello</span><br><span class="line">hello.ribbon.listOfServers: localhost:<span class="number">8080</span>,localhost:<span class="number">8081</span></span><br></pre></td></tr></table></figure> </p><h3 id="Test-Application"><a href="#Test-Application" class="headerlink" title="Test Application"></a>Test Application</h3><ol><li>Start HelloService on port 8080 and 8081. </li><li>Start Client Application on 8083.<br>Then Go to <a href="http://localhost:8083/ribbon-test-client/" target="_blank" rel="noopener">http://localhost:8083/ribbon-test-client/</a><br>first time it should return message as <em>“Hello Message From Server 8080”</em> and next time as <em>“Hello Message From Server 8081”</em></li></ol><p><strong>The Code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-Cloud-Ribbon-Demo" target="_blank" rel="noopener">here</a>.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/03/22/Spring-Cloud-Netflix-Ribbon/jeremy-thomas-75753-unsplash.jpg&quot;&gt;
&lt;h3 id=&quot;What-is-Ribbon&quot;&gt;&lt;a href=&quot;#What-is-Ribbon&quot; class
      
    
    </summary>
    
      <category term="Spring Cloud" scheme="https://nirajsonawane.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="https://nirajsonawane.github.io/tags/Spring-Cloud/"/>
    
      <category term="Microservice" scheme="https://nirajsonawane.github.io/tags/Microservice/"/>
    
      <category term="Ribbon" scheme="https://nirajsonawane.github.io/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>Simplifying Microservices Communication Using Spring Cloud OpenFeign</title>
    <link href="https://nirajsonawane.github.io/2019/03/21/Simplifying-Microservices-Communication-Using-Spring-Cloud-OpenFeign/"/>
    <id>https://nirajsonawane.github.io/2019/03/21/Simplifying-Microservices-Communication-Using-Spring-Cloud-OpenFeign/</id>
    <published>2019-03-21T14:36:41.000Z</published>
    <updated>2019-04-20T05:50:25.092Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/03/21/Simplifying-Microservices-Communication-Using-Spring-Cloud-OpenFeign/pavan-trikutam-1660-unsplash.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@ptrikutam?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Pavan Trikutam"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Pavan Trikutam</span></a></p><h3 id="What-is-Feign"><a href="#What-is-Feign" class="headerlink" title="What is Feign?"></a>What is Feign?</h3><p>Feign is a Java to HTTP client binder. Feign Simpliffyes the HTTP API Clients using declarative way.<br>Feign is a library for creating REST API clients in a declarative way. it makes writing web service clients easier. Developers can use declarative annotations to call rest servicese instead of  writing repetitive boilerplate code.  </p><p><strong>Spring Cloud OpenFeign</strong> provides OpenFeign integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms</p><p><strong>The code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-Cloud-Feign-Demo" target="_blank" rel="noopener">here</a>.</strong></p><p><strong>Demo Application</strong><br>We Have Simple User Service that provides crud operations for Users. We will write client to call these rest endpoints.     </p><h3 id="Why-Feign"><a href="#Why-Feign" class="headerlink" title="Why Feign?"></a>Why Feign?</h3><p>Without Feign, In Spring Boot Applications We will be using <code>RestTemplate</code> to call User service. We need to write code somewhat similar to below. </p><figure class="highlight java"><figcaption><span>HTTP Client Using RestTemplate</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Calling User Service using Feign Client!!"</span>);</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        ResponseEntity&lt;List&lt;User&gt;&gt; response = restTemplate.exchange(</span><br><span class="line">                <span class="string">"http://localhost:8080/user/"</span>,</span><br><span class="line">                HttpMethod.GET,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;User&gt;&gt;() &#123;</span><br><span class="line">                &#125;);</span><br><span class="line">        List&lt;User&gt; users = response.getBody();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; uriParams = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        uriParams.put(<span class="string">"id"</span>, String.valueOf(id));</span><br><span class="line">        URI uri = UriComponentsBuilder</span><br><span class="line">                .fromUriString(<span class="string">"http://localhost:8080/user/&#123;id&#125;"</span>)</span><br><span class="line">                .buildAndExpand(uriParams)</span><br><span class="line">                .toUri();</span><br><span class="line">        System.out.println(uri);</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        User forEntity = restTemplate.getForObject(uri, User.class);</span><br><span class="line">        <span class="keyword">return</span> forEntity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">addUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Add user"</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        HttpEntity&lt;User&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(user);</span><br><span class="line">        ResponseEntity exchange = restTemplate</span><br><span class="line">                .exchange(<span class="string">"http://localhost:8080/user/"</span>, HttpMethod.POST, request, String.class);</span><br><span class="line">        <span class="keyword">return</span> exchange;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">deleteUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"delete user"</span>);</span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        params.put(<span class="string">"id"</span>, String.valueOf(id));</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        restTemplate.delete(<span class="string">"http://localhost:8080/user/&#123;id&#125;"</span>, params);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(<span class="string">"User Deleted successfully"</span>, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure> <blockquote><p>From above code we can easily figure out that most of the code is repetitive and has nothing to do the business logic. Let’s Simplify Above code using Spring Cloud OpenFeign. </p></blockquote><h3 id="Getting-Started-With-Spring-Cloud-OpenFeign"><a href="#Getting-Started-With-Spring-Cloud-OpenFeign" class="headerlink" title="Getting Started With Spring Cloud OpenFeign"></a>Getting Started With Spring Cloud OpenFeign</h3><p>To include Feign in project We need to use artifact id  <code>spring-cloud-starter-openfeign</code><br><figure class="highlight"><figcaption><span>openfeign Maven</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure> </p><p><strong>EnableFeignClients</strong><br><figure class="highlight java"><figcaption><span>EnableFeignClients</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudFeignClientDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringCloudFeignClientDemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Creating Feign Client With Sensible Defaults.<br><figure class="highlight java"><figcaption><span>FeignClient</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"User"</span>, url = <span class="string">"http://localhost:8080"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.DELETE, value = <span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">ResponseEntity <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, value = <span class="string">"/user/"</span>)</span><br><span class="line">    <span class="function">ResponseEntity <span class="title">addUser</span><span class="params">(@RequestBody User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.PUT, value = <span class="string">"/user/"</span>)</span><br><span class="line">    <span class="function">ResponseEntity <span class="title">updateUser</span><span class="params">(User user)</span></span>;&#125;</span><br></pre></td></tr></table></figure></p><p>The above code is self explanatory. At minimal we just have to specify <code>name = &quot;User&quot;</code>  is an arbitrary client name and url.<br>If we compare our <code>UserClient</code> with the code that we have written using <code>RestTemplate</code>, It’s visible that without writing any code specific to calling HTTP Service our UserClient supports all operations. <code>Feign</code> is doing magic under the hood. </p><h3 id="Overriding-Feign-default-properties"><a href="#Overriding-Feign-default-properties" class="headerlink" title="Overriding Feign default properties"></a>Overriding Feign default properties</h3><p>We Can provide custom configuration class to Overriding default properties.<br>e.g. let say we want to Log the headers, body, and metadata for both requests and responses.<br>lets Create UserClientConfig class to setup log level.<br><figure class="highlight java"><figcaption><span>UserClientConfig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClientConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.HEADERS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Update UserClient To use this config class.<br> <figure class="highlight java"><figcaption><span>Updated FeignClient</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"User"</span>, url = <span class="string">"http://localhost:8080"</span>,configuration=UserClientConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Note</strong> : Feign gets integrated with <strong>Hystrix, Ribbon and Eureka</strong> quite easily. I will cover that in separate Post.   </p><p><strong>The code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-Cloud-Feign-Demo" target="_blank" rel="noopener">here</a>.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/03/21/Simplifying-Microservices-Communication-Using-Spring-Cloud-OpenFeign/pavan-trikutam-1660-unsplash.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;b
      
    
    </summary>
    
      <category term="Spring Cloud" scheme="https://nirajsonawane.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="https://nirajsonawane.github.io/tags/Spring-Cloud/"/>
    
      <category term="Microservice" scheme="https://nirajsonawane.github.io/tags/Microservice/"/>
    
      <category term="OpenFeign" scheme="https://nirajsonawane.github.io/tags/OpenFeign/"/>
    
  </entry>
  
  <entry>
    <title>Update Config Dynamically Using Spring Cloud Bus and Spring Cloud Config</title>
    <link href="https://nirajsonawane.github.io/2019/02/22/Update-Configs-Dynamically-Using-Spring-Cloud-Bus-and-Spring-Cloud-Config/"/>
    <id>https://nirajsonawane.github.io/2019/02/22/Update-Configs-Dynamically-Using-Spring-Cloud-Bus-and-Spring-Cloud-Config/</id>
    <published>2019-02-22T07:26:19.000Z</published>
    <updated>2019-02-23T09:36:23.593Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/02/22/Update-Configs-Dynamically-Using-Spring-Cloud-Bus-and-Spring-Cloud-Config/Spring-Cloud.jpg"><p>In The previous post  <a href="/2019/02/17/Centralize-Configurations-Using-Spring-Cloud-Config/" title="Centralize Configurations Using Spring Cloud Config">Centralize Configurations Using Spring Cloud Config</a> We Setup config Server and Centralized The Configuration properties in github.<br>In This post, We Will Check different options available to update Config properties in Client applications without restarting Them.<br><strong>The code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-Cloud-Config-Cloud-Bus-Demo" target="_blank" rel="noopener">here</a>.</strong></p><h3 id="1-Restart-Endpoint-Of-Spring-Actuator-Endpoint"><a href="#1-Restart-Endpoint-Of-Spring-Actuator-Endpoint" class="headerlink" title="1 Restart Endpoint Of Spring Actuator Endpoint"></a>1 Restart Endpoint Of Spring Actuator Endpoint</h3><p>The Simplest way to reload the application config without manually restarting it is Using Spring Boot Actuator Restart Endpoint.But this is not the best way to update the config. </p><h3 id="2-Refresh-Endpoint-RefreshScope-amp-ConfigurationProperties"><a href="#2-Refresh-Endpoint-RefreshScope-amp-ConfigurationProperties" class="headerlink" title="2 Refresh Endpoint- @RefreshScope &amp; @ConfigurationProperties"></a>2 Refresh Endpoint- @RefreshScope &amp; @ConfigurationProperties</h3><p>Spring allows beans to be refreshed dynamically at runtime using <code>@RefreshScope</code>. The Bean That are using <code>@Value</code> to read properties are need to be annotated with <code>@RefreshScope</code>. The Properties loaded by <code>@ConfigurationProperties</code> are automatically reloaded as <code>@ConfigurationProperties</code> are by default <code>@RefreshScope</code><br>To Reload the bean annotated with <code>@RefreshScope</code>  Run below post request.<br><code>$ curl localhost:8090/actuator/refresh -d {} -H &quot;Content-Type: application/json&quot;</code><br><strong>Problem</strong><br><blockquote><p>But Again This method has Problem, In a real microservice environment, there will be a large number of independent application services. And It is not practical for the user to manually trigger the refresh event for all the related services whenever a property is changed.<strong>Spring Bus Provide Solution For this</strong></p></blockquote></p><h3 id="3-Spring-Cloud-Bus"><a href="#3-Spring-Cloud-Bus" class="headerlink" title="3 Spring Cloud Bus"></a>3 Spring Cloud Bus</h3><p>Spring Cloud Bus links nodes of a distributed system with a lightweight message broker. This can then be used to broadcast state changes, The configuration changes are publised as events to all connected nodes.  For the POC We will be using AMQP broker as the transport.</p><p><strong>Our targeted architecture will look like below</strong><br><img src="/2019/02/22/Update-Configs-Dynamically-Using-Spring-Cloud-Bus-and-Spring-Cloud-Config/cloud-bus.jpg">    </p><p>Lets update the System we build in The previous post  <a href="/2019/02/17/Centralize-Configurations-Using-Spring-Cloud-Config/" title="Centralize Configurations Using Spring Cloud Config">Centralize Configurations Using Spring Cloud Config</a></p><h4 id="Setup-RabbitMQ-with-Docker"><a href="#Setup-RabbitMQ-with-Docker" class="headerlink" title="Setup RabbitMQ with Docker"></a>Setup RabbitMQ with Docker</h4><p>We will run RabbitMQ as a docker image. <a href="https://www.docker.com/get-started" target="_blank" rel="noopener">Install Docker</a> Then Run below command to install rabbitmq<br><code>docker pull rabbitmq:3-management</code></p><p>To Run RabbitMQ use below command<br><code>docker run -d --hostname my-rabbit --name some-rabbit -p 15672:15672 -p 5672:5672 rabbitmq:3-management</code><br>Verify MQ is running. <a href="http://192.168.99.100:15672/#/" target="_blank" rel="noopener">http://192.168.99.100:15672/#/</a> (Check What IP was generated for You). Default User name and password is guest/guest.</p><figure class="highlight"><figcaption><span>Add Cloud-bus to All Clients</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>Connect to MQ Bus</strong><br><figure class="highlight java"><figcaption><span>Add Properties related to MQ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.host=<span class="number">192.168</span>.99.100</span><br><span class="line">spring.rabbitmq.port=<span class="number">5672</span></span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br></pre></td></tr></table></figure></p><p><strong>Let’s Test Our Changes</strong></p><ol><li>Start Config Server</li><li>Start Multiple Instances of Customer Service.Start Customer Service on 8090,8091,8092 </li><li>Verify Config Properties <a href="http://localhost:8888/customer-service/dev" target="_blank" rel="noopener">http://localhost:8888/customer-service/dev</a> </li><li>Dev is configured as customer having gmail account as <em>Premium</em> Account.</li><li>Check for <a href="http://localhost:8090/customer/niraj.sonawane@gmail.com" target="_blank" rel="noopener">http://localhost:8090/customer/niraj.sonawane@gmail.com</a> We should get response as <em>Premium</em> account. Similar for 8091,8092 </li><li>Update Config properties in Github and push Changes</li><li>Verify Updated Config Properties <a href="http://localhost:8888/customer-service/dev" target="_blank" rel="noopener">http://localhost:8888/customer-service/dev</a> </li><li>Now Check for <a href="http://localhost:8090/customer/niraj.sonawane@gmail.com" target="_blank" rel="noopener">http://localhost:8090/customer/niraj.sonawane@gmail.com</a> We should get response as <em>Premium</em> account. Similar for 8091,8092. (As we have not yet refreshed anything)  </li><li>Send Bus Refresh request on 8090, <a href="http://localhost:8090/actuator/bus-refresh" target="_blank" rel="noopener">http://localhost:8090/actuator/bus-refresh</a></li><li>Now Check for <a href="http://localhost:8090/customer/niraj.sonawane@gmail.com" target="_blank" rel="noopener">http://localhost:8090/customer/niraj.sonawane@gmail.com</a> We should get response as <em>Free Account</em></li><li><p>Also Changes will be reflected for other services,Now Check for <a href="http://localhost:8091/customer/niraj.sonawane@gmail.com" target="_blank" rel="noopener">http://localhost:8091/customer/niraj.sonawane@gmail.com</a> &amp; <a href="http://localhost:8092/customer/niraj.sonawane@gmail.com" target="_blank" rel="noopener">http://localhost:8092/customer/niraj.sonawane@gmail.com</a> </p></li><li><p>We have Send Bus refresh event only for 8090 <strong>But Still Changes are reflected on all nodes. Bus Will take responsibility of Sending refresh event</strong>    </p></li></ol><h3 id="4-Github-Webhook"><a href="#4-Github-Webhook" class="headerlink" title="4 Github Webhook"></a>4 Github Webhook</h3><p>Github Providers notification Event when changes are made in repository through a webhook. Github uses a POST to the webhook with a JSON body containing a list of commits and a header set to push.<br>Tu use Webhooks We Need to add <strong>spring-cloud-config-monitor</strong> dependency And Activate  <strong>/monitor endpoint</strong></p><p><strong>To Add Webhooks</strong> Go to Your ConfigRepo-&gt;Settings-Webhooks. Note, You need Public Domain name for this to work.</p><p><strong>The code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-Cloud-Config-Cloud-Bus-Demo" target="_blank" rel="noopener">here</a>.</strong></p><p><strong><a href="https://cloud.spring.io/spring-cloud-config/multi/multi_spring-cloud-config.html" target="_blank" rel="noopener">Reference</a>.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/02/22/Update-Configs-Dynamically-Using-Spring-Cloud-Bus-and-Spring-Cloud-Config/Spring-Cloud.jpg&quot;&gt;
&lt;p&gt;In The previous post  
      
    
    </summary>
    
      <category term="Spring Cloud" scheme="https://nirajsonawane.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="https://nirajsonawane.github.io/tags/Spring-Cloud/"/>
    
      <category term="Microservice" scheme="https://nirajsonawane.github.io/tags/Microservice/"/>
    
      <category term="Cloud Bus" scheme="https://nirajsonawane.github.io/tags/Cloud-Bus/"/>
    
      <category term="Cloud Config" scheme="https://nirajsonawane.github.io/tags/Cloud-Config/"/>
    
  </entry>
  
  <entry>
    <title>Centralize Configurations Using Spring Cloud Config</title>
    <link href="https://nirajsonawane.github.io/2019/02/17/Centralize-Configurations-Using-Spring-Cloud-Config/"/>
    <id>https://nirajsonawane.github.io/2019/02/17/Centralize-Configurations-Using-Spring-Cloud-Config/</id>
    <published>2019-02-17T15:56:15.000Z</published>
    <updated>2019-02-19T04:22:14.229Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/02/17/Centralize-Configurations-Using-Spring-Cloud-Config/ash-edmonds-510566-unsplash.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@badashproducts?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Ash Edmonds"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Ash Edmonds</span></a></p><p>In This post we will Create Small POC for <strong>Spring Cloud Config</strong> and will use different Key Features of Spring Cloud Config.</p><p><strong>The code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-Cloud-Config-Server-Demo.git" target="_blank" rel="noopener">here</a>.</strong> <strong>And Config files <a href="https://github.com/nirajsonawane/Spring-Cloud-Config-Server-Demo-Config-Repo.git" target="_blank" rel="noopener">here</a></strong></p><p><strong>Problem</strong><br>In a typical Microservices Architecture, We have Number of Small,Independent Services working together. Each service will have it’s own configurations in property files &amp; we have multiple instances of each service. Now if we think about different environments like Development, Staging, and Prod etc It makes things more complicated. </p><p>Each time if we need to change the configuration of a microservice, we need go to the corresponding project, change its configuration and then restart the application for the change to take effect.<br><strong>Managing These Configurations for multiple services across different environments becomes very critical</strong><br><em>Spring Cloud Config provide Solutions to all these problems</em></p><h3 id="What-Is-Spring-Cloud-Config"><a href="#What-Is-Spring-Cloud-Config" class="headerlink" title="What Is Spring Cloud Config ?"></a>What Is Spring Cloud Config ?</h3><p>Spring Cloud Config provides server-side and client-side support for <strong>Externalized Configuration</strong> in a distributed system. With the Config Server, you have a central place to manage external properties for applications across all environments. The default implementation of the server storage backend uses git, so it easily supports labelled versions of configuration environments as well as being accessible to a wide range of tooling for managing the content. It is easy to add alternative implementations and plug them in with Spring configuration.</p><h3 id="POC-Application"><a href="#POC-Application" class="headerlink" title="POC Application"></a>POC Application</h3><p>Assume we have Small Application which includes two microservices Customer &amp; Account. Customer service accepts email id of user and identifies if the user is Premium user or not. <strong>If the email id contains some keyword, then we will consider that customer as Premium Customer</strong>. At present we have defined the keyword in <code>application.properties</code><br>e.g<br>For DEV - customer-service.emailtype=gmail.com<br>For QA -  customer-service.emailtype=github.com<br>For DEV - customer-service.emailtype=microsoft.com</p><p>If I run <a href="http://localhost:8080/customer/niraj.sonawane@gmail.com" target="_blank" rel="noopener">http://localhost:8080/customer/niraj.sonawane@gmail.com</a> in dev environment, I should get response as <strong>Premium Account</strong>. </p><figure class="highlight java"><figcaption><span>Before Cloud Config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Simple RestController which check if email has keyword or not.  </span></span><br><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerProfileController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerServiceConfigurations customerServiceConfigurations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/customer/&#123;email&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustomerDetails</span><span class="params">(@PathVariable String email)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (email.contains(customerServiceConfigurations.getEmailtype())) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Premium  Account"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Free Account"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Configuration Class For loading configs from application.properties.</span></span><br><span class="line"><span class="comment">//All properties starting with customer-service will be loaded in this class.  </span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"customer-service"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceConfigurations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String emailtype;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//application.properties has below properties.</span></span><br><span class="line">customer-service.emailtype=gmail.com</span><br></pre></td></tr></table></figure><p><em>Before Cloud Config</em><br><img src="/2019/02/17/Centralize-Configurations-Using-Spring-Cloud-Config/beforeCloudConfig.jpg"></p><h4 id="Our-Task-is-to-externalize-the-Configurations-in-Git-repository-using-Spring-Cloud"><a href="#Our-Task-is-to-externalize-the-Configurations-in-Git-repository-using-Spring-Cloud" class="headerlink" title="Our Task is to externalize the Configurations in Git repository using Spring Cloud"></a>Our Task is to externalize the Configurations in Git repository using Spring Cloud</h4><p><em>After Cloud Config</em><br><img src="/2019/02/17/Centralize-Configurations-Using-Spring-Cloud-Config/After.jpg"></p><img src="/2019/02/17/Centralize-Configurations-Using-Spring-Cloud-Config/spring-cloud.png"><p><a href="https://www.freepik.com/free-photos-vectors/infographic" target="_blank" rel="noopener">Infographic vector created by freepik - www.freepik.com</a></p><h4 id="1-Spring-Cloud-Config-Server"><a href="#1-Spring-Cloud-Config-Server" class="headerlink" title="1 Spring Cloud Config Server"></a>1 Spring Cloud Config Server</h4><p>Config Server acts as a sort of intermediary between our Spring applications and a typically version-controlled repository of configuration files. All microservices access properties files using config server.<br>We need to add  <strong><code>&lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</code></strong> dependency. And need to use <code>@EnableConfigServer</code> annotation.<br><figure class="highlight java"><figcaption><span>Config Server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> SpringApplication.run(SpringCloudConfigServerApplication.class, args);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="Connecting-Config-Server-to-version-controlled-repository"><a href="#Connecting-Config-Server-to-version-controlled-repository" class="headerlink" title="Connecting Config Server to version-controlled repository"></a>Connecting Config Server to version-controlled repository</h5><p>Spring Cloud Config Server supports Git,SVN, JDBC (relational database)  etc as a backend for configuration properties.The default implementation of EnvironmentRepository uses a <strong>Git backend</strong>. For this POC will use git.We can also use File System based backend for configuration properties using native profile.<br><figure class="highlight java"><figcaption><span>Config Server application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-cloud-config-server</span><br><span class="line">server.port=<span class="number">8888</span></span><br><span class="line">spring.cloud.config.server.git.uri=https:<span class="comment">//github.com/nirajsonawane/Spring-Cloud-Config-Server-Demo-Config-Repo.git</span></span><br></pre></td></tr></table></figure><br>To Provide path of file based git system  <code>file://${user.home}/config-repo</code>.</p><p>Run the config server and you should be able to access properties of customer-service at <a href="http://localhost:8888/customer-service/default" target="_blank" rel="noopener">http://localhost:8888/customer-service/default</a><br>Similarly Account service properties will be available at <a href="http://localhost:8888/account-service/default" target="_blank" rel="noopener">http://localhost:8888/account-service/default</a>  </p><h4 id="2-Config-Client-Configurations"><a href="#2-Config-Client-Configurations" class="headerlink" title="2 Config Client Configurations"></a>2 Config Client Configurations</h4><p>To access Configurations through  Config Server,Client applications needs to add<br><strong><code>spring-cloud-starter-config</code></strong> dependency.<br>The properties to configure the Config Client must necessarily be read in before the rest of the application’s configuration is read from the Config Server, during the bootstrap phase. </p><p>Configure the Config server related properties in <strong>bootstrap.properties</strong><br><figure class="highlight java"><figcaption><span>bootstrap.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=customer-service</span><br><span class="line">spring.cloud.config.uri=http:<span class="comment">//localhost:8888/</span></span><br></pre></td></tr></table></figure><br>Now If we Start our Customer service, It will start accessing properties files from our config server. In logs we can verity this.<br><code>[  restartedMain] c.c.c.ConfigServicePropertySourceLocator : Fetching config from server at : http://localhost:8888/</code><br>And If we run <a href="http://localhost:8080/customer/niraj.sonawane@gmail.com" target="_blank" rel="noopener">http://localhost:8080/customer/niraj.sonawane@gmail.com</a> I should get response as <strong>Premium Account</strong>. (Will access Default Profile)</p><h4 id="3-Managing-Profiles-Environment-Specific-properties"><a href="#3-Managing-Profiles-Environment-Specific-properties" class="headerlink" title="3 Managing Profiles, Environment  Specific properties"></a>3 Managing Profiles, Environment  Specific properties</h4><p>To manage environment specific properties, i.e. profiles add profile specific properties in repository. For customer-service we will add below files in our git repository.</p><ul><li>customer-service-dev.properties</li><li>customer-service-prod.properties</li><li>customer-service-qa.properties</li></ul><p>To set any specific profile we can use <code>spring.profiles.active</code> parameter in bootstrap.properties or using command line argument <code>-Dspring-boot.run.profiles</code></p><p><em>Precedence rules for profiles are also the same as in a regular Spring Boot application</em>: Active profiles take precedence over defaults, and, if there are multiple profiles, the last one wins (similar to adding entries to a Map).</p><h4 id="4-RefreshScope"><a href="#4-RefreshScope" class="headerlink" title="4 RefreshScope"></a>4 RefreshScope</h4><p>Until Now, We have Solved the problem of Centralizing the properties and managing different profiles. Now We will focus on how to update properties at run time <strong>without application Restart</strong>.     </p><p>By default, the configuration values are read on the client’s startup, and not again. We can force a bean to refresh its configuration - to pull updated values from the Config Server - by annotating the Classes that are refering with the Spring Cloud Config <code>@RefreshScope</code> and then by triggering a refresh event.<br>There are other options are also available, I will cover them in next Post.</p><h4 id="5-Useful-Properties-and-Other-Key-Features"><a href="#5-Useful-Properties-and-Other-Key-Features" class="headerlink" title="5 Useful Properties and Other Key Features"></a>5 Useful Properties and Other Key Features</h4><ul><li>if client cannot connect to the Config Serve  then use <code>spring.cloud.config.fail-fast=true</code> for fail fast.</li><li>Config Client can Retry if it is not able to connect, use <code>spring.cloud.config.retry.*</code></li><li>SSL certificate can be disabled by setting the <code>git.skipSslValidation</code> property to true (default is false).</li><li>Timeout Can be set on Config server to read properties from git, Use <code>git.timeout</code> property</li><li>Multiple Repositories can be used by using Pattern Matching </li><li>Config Server supports the Encryption and Decryption of properties using JCE </li><li>Config Server supports <code>DiscoveryClient</code> implementation such as <code>Eureka Service Discovery</code> Config Server register with the Discovery Service.</li></ul><p><strong>The code for this post is available for download <a href="https://github.com/nirajsonawane/Spring-Cloud-Config-Server-Demo.git" target="_blank" rel="noopener">here</a>.</strong> <strong>And Config files <a href="https://github.com/nirajsonawane/Spring-Cloud-Config-Server-Demo-Config-Repo.git" target="_blank" rel="noopener">here</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/02/17/Centralize-Configurations-Using-Spring-Cloud-Config/ash-edmonds-510566-unsplash.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-color:bl
      
    
    </summary>
    
      <category term="Spring Cloud" scheme="https://nirajsonawane.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="https://nirajsonawane.github.io/tags/Spring-Cloud/"/>
    
      <category term="Microservice" scheme="https://nirajsonawane.github.io/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>Write Clean Asynchronous Code With CompletableFuture Java-8</title>
    <link href="https://nirajsonawane.github.io/2019/01/27/Write-Clean-asynchronous-code-with-CompletableFuture-Java-8/"/>
    <id>https://nirajsonawane.github.io/2019/01/27/Write-Clean-asynchronous-code-with-CompletableFuture-Java-8/</id>
    <published>2019-01-27T16:43:44.000Z</published>
    <updated>2019-02-02T11:44:09.017Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/27/Write-Clean-asynchronous-code-with-CompletableFuture-Java-8/rawpixel-679094-unsplash.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@rawpixel?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from rawpixel"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">rawpixel</span></a></p><p>Java 8 has introduced a lot of features. With Addition of <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="noopener"> CompletableFuture </a>. Writing Clean &amp; Readable Asynchronous code has become much more easier. CompletableFuture has more than 50 methods which makes it very useful.</p><p><strong>The code for this post is available for download <a href="https://github.com/nirajsonawane/CompletablefutureExamples.git" target="_blank" rel="noopener">here</a>.</strong></p><h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h3><p>CompletableFuture is an implementation of the <code>Future</code> &amp;  <code>CompletionStage</code> interface  but with a lot of  modern Features. It Supports lambdas and takes advantage of <strong>non-blocking methods via callbacks and promotes asynchronous reactive programming model</strong>. CompletableFuture allows us to write non-blocking code by running a task on a separate thread than the main application thread and notifying the main thread about its <strong>Progress, Completion or Failure</strong>. CompletableFuture is inspired from <a href="https://google.github.io/guava/releases/21.0/api/docs/com/google/common/util/concurrent/ListenableFuture.html" target="_blank" rel="noopener"> ListenableFuture</a> in Guava and Are similar to Promise in java scripts. </p><h3 id="Why-CompletableFuture-instead-Of-Future"><a href="#Why-CompletableFuture-instead-Of-Future" class="headerlink" title="Why CompletableFuture instead Of Future?"></a>Why CompletableFuture instead Of Future?</h3><a href="/2018/06/17/Callable-and-Future/" title="Callable and Future">Callable and Future</a>  were introduced in Java 5. Future is placeholders for a result that hasn’t happened yet.Future Can use a Runnable or Callable instance  to complete the submitted task. There are two methods to get actual value from Future.<br><code>get()</code> : When this method is called, thread will wait for result indefinitely.<br><code>get(long timeout, TimeUnit unit)</code>: When this method is called, thread will wait for result only for specified time.<br><br><em>There are multiple problems with</em> <code>Future</code><br><strong>Blocking</strong> - The <code>get</code> method is blocking and need to wait until the computation is done. Future does not have any method that can notify on completion and does not have capability to attach a callback function.<br><strong>Chaining &amp; Composition</strong> - Many times we want to chain multiple future to complete long computation. You need to merger results and send results to another task. It’s Hard to implement such chaining with future.<br><strong>Exception Handling</strong> - Future does not provide any construct for Exception Handling.<br>All these issues are addressed by CompletableFuture.<br><strong>lets try different methods provided by CompletableFuture</strong><br><br><h3>Create Simple Completeable Future</h3><br>The simplest way is to create   CompleteableFuture is <code>CompleteableFuture.completedFuture</code> method which returns an a new, finished <code>CompleteableFuture</code>. Creating already Completed CompleteableFuture becomes very useful in many cases.<br><figure class="highlight java"><figcaption><span>Create Completed CompleteableFuture</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">simpleComletedCompletableFuture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.completedFuture(<span class="string">"Some Value"</span>);</span><br><span class="line"> assertTrue(completableFuture.isDone());</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">assertEquals(<span class="string">"Some Value"</span>, completableFuture.get());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ExecutionException | InterruptedException e) &#123;</span><br><span class="line">fail(<span class="string">"No Exception expected"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note</strong> : if we call <code>get</code> method on incomplete CompleteableFuture , the get call will block forever because the Future is never completed.We can use <code>CompletableFuture.complete()</code> method to manually complete a Future. </p><h4 id="Simple-Asynchronous-computation-using-runAsync"><a href="#Simple-Asynchronous-computation-using-runAsync" class="headerlink" title="Simple Asynchronous computation using runAsync"></a>Simple Asynchronous computation using runAsync</h4><p>If We want to run some task in background that does not returns any value, then we can use <code>CompletableFuture.runAsync()</code> it takes a <code>Runnable</code> and returns <code>CompletableFuture&lt;Void&gt;</code><br><figure class="highlight java"><figcaption><span>Simple Asynchronous computation using runAsync</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread() + <span class="string">" Process"</span>);</span><br><span class="line">someStateVaribale.set(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">completableFutureRunAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CompletableFuture&lt;Void&gt; runAsync = CompletableFuture.runAsync(() -&gt; process());</span><br><span class="line">runAsync.join();</span><br><span class="line">assertEquals(<span class="number">100</span>, someStateVaribale.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Simple-Asynchronous-computation-using-SupplyAsync"><a href="#Simple-Asynchronous-computation-using-SupplyAsync" class="headerlink" title="Simple Asynchronous computation using SupplyAsync"></a>Simple Asynchronous computation using SupplyAsync</h4><p>If we want to run some task in background that <strong>Returns Some Value</strong>, then we can use <code>CompletableFuture.supplyAsync()</code> it takes a <code>Supplier&lt;T&gt;</code> and returns <code>completableFuture&lt;T&gt;</code><br><figure class="highlight java"><figcaption><span>Simple Asynchronous computation using supplyAsync</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">completableFutureSupplyAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CompletableFuture&lt;String&gt; supplyAsync = CompletableFuture.supplyAsync(<span class="keyword">this</span>::processSomeData);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">assertEquals(<span class="string">"Some Value"</span>, supplyAsync.get()); <span class="comment">//Blocking</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException | InterruptedException e) &#123;</span><br><span class="line">fail(<span class="string">"No Exception expected"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="CompletableFuture-with-Custom-Executor"><a href="#CompletableFuture-with-Custom-Executor" class="headerlink" title="CompletableFuture with Custom Executor"></a>CompletableFuture with Custom Executor</h4><p>You might be wondering, Which Thread is executing the <code>supplyAsync</code> &amp; <code>runAsync</code> task and Who is creating these Threads?  Similar to parallel streams <code>CompletableFuture</code>  executes these tasks in a thread obtained from the global <code>ForkJoinPool.commonPool().</code><br><strong>We Can always provide our custom <code>Executor</code> to <code>CompletableFuture</code></strong>.All the methods in the CompletableFuture API has two variants, With or Without Executor.<br><figure class="highlight java"><figcaption><span>CompletableFuture with Custom Executor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">completableFutureSupplyAsyncWithExecuto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">CompletableFuture&lt;String&gt; supplyAsync = CompletableFuture.supplyAsync(<span class="keyword">this</span>::processSomeData,newFixedThreadPool);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">assertEquals(<span class="string">"Some Value"</span>, supplyAsync.get());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException | InterruptedException e) &#123;</span><br><span class="line">fail(<span class="string">"No Exception expected"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br><img src="/asset/rene-bohmer-481562-unsplash.jpg" width="600" height="50" alt=""></p><h4 id="CompletableFuture-Callbacks-and-Chaining"><a href="#CompletableFuture-Callbacks-and-Chaining" class="headerlink" title="CompletableFuture Callbacks and Chaining"></a>CompletableFuture Callbacks and Chaining</h4><p>We know that <code>CompletableFuture.get()</code> is blocking and we want to avoid this. We should get some notification after Future completes.<br>CompletableFuture provides <strong>thenApply(), thenAccept() and thenRun() to attach callbacks</strong>  </p><p><strong>thenAccept()</strong><br>If We want to run some code after receiving some value from Future then we can use <code>thenAccept()</code><br><strong>thenApply()</strong><br>If We want to run some code after receiving value from Future and then want to return some value for this we can use <code>thenAccept()</code><br><strong>thenRun()</strong><br>If We want to run some code after completion of the Future and dont want to return any value for this we can use <code>thenRun()</code>  </p><figure class="highlight java"><figcaption><span>CompletableFuture thenAccept thenApply thenRun</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureThenAccept</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> CompletableFuture.supplyAsync(<span class="keyword">this</span>::process)</span><br><span class="line"> .thenAccept(<span class="keyword">this</span>::notify) <span class="comment">//Non Blocking,notify method will be called automatically after compilation or process method </span></span><br><span class="line"> .join();</span><br><span class="line"> assertEquals(<span class="number">100</span>,someStateVaribale.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureThenApply</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> Integer notificationId = CompletableFuture.supplyAsync(<span class="keyword">this</span>::process)</span><br><span class="line"> .thenApply(<span class="keyword">this</span>::notify)<span class="comment">//Non Blocking will return some value</span></span><br><span class="line"> .join();</span><br><span class="line">  assertEquals(<span class="keyword">new</span> Integer(<span class="number">1</span>),notificationId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureThenApply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  CompletableFuture.supplyAsync(<span class="keyword">this</span>::process)</span><br><span class="line">  .thenRun(<span class="keyword">this</span>::notifyMe)</span><br><span class="line">  .join();</span><br><span class="line">   assertEquals(<span class="number">100</span>,someStateVaribale.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Chaining Callbacks</strong><br>If We have large Asynchronous computation, Then we can continue passing values from one callback to another.<br><figure class="highlight java"><figcaption><span>Chaining Callbacks</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureThenApplyAccept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CompletableFuture.supplyAsync(<span class="keyword">this</span>::findAccountNumber)</span><br><span class="line">.thenApply(<span class="keyword">this</span>::calculateBalance)</span><br><span class="line">.thenApply(<span class="keyword">this</span>::notifyBalance)</span><br><span class="line">.thenAccept((i)-&gt;notifyByEmail()).join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>async variants of thenApply(),thenAccept() and thenRun()</strong><br><strong>Note</strong> In all the previus examples, All methods are executed on <em>Same threads</em>. But If we want them to be run on separate thread then we can use <strong>async variants</strong> of these methods.<br><figure class="highlight java"><figcaption><span>Async Variants</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureApplyAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"> ScheduledExecutorService newSingleThreadScheduledExecutor = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"> CompletableFuture&lt;Integer&gt; completableFuture = </span><br><span class="line"> CompletableFuture</span><br><span class="line">      .supplyAsync(<span class="keyword">this</span>::findAccountNumber,newFixedThreadPool)<span class="comment">//will run on thread obtain from newFixedThreadPool</span></span><br><span class="line">      .thenApplyAsync(<span class="keyword">this</span>::calculateBalance,newSingleThreadScheduledExecutor) <span class="comment">//will run on thread obtain from newSingleThreadScheduledExecutor</span></span><br><span class="line">      .thenApplyAsync(<span class="keyword">this</span>::notifyBalance);<span class="comment">//will run on thread obtain from common pool</span></span><br><span class="line">   Integer balance = completableFuture.join();</span><br><span class="line">    assertEquals(Integer.valueOf(balance), Integer.valueOf(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="CompletableFuture-thenCompose-and-thenCombine"><a href="#CompletableFuture-thenCompose-and-thenCombine" class="headerlink" title="CompletableFuture thenCompose and thenCombine"></a>CompletableFuture thenCompose and thenCombine</h4><p><strong>thenCompose</strong><br>Let’s Say we want to first find Account Number and then calculate Balance for that account and after calculations we want to send notifications.<br>Now All these task are <strong>Dependent</strong> and methods are returning <strong>CompletableFuture</strong> , Then We need to use  <strong>thenCompose</strong> Method.<br>This is similar to <strong>flatMap in case of Streams</strong>.<br><figure class="highlight java"><figcaption><span>thenCompose</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Integer&gt; <span class="title">findAccountNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">System.out.println(Thread.currentThread() + <span class="string">" findAccountNumber"</span>);</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.completedFuture(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Integer&gt; <span class="title">calculateBalance</span><span class="params">(<span class="keyword">int</span> accountNumber)</span> </span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread() + <span class="string">" calculateBalance"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.completedFuture(accountNumber * accountNumber);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Integer&gt; <span class="title">notifyBalance</span><span class="params">(Integer balance)</span> </span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread() + <span class="string">"Sending Notification"</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.completedFuture(balance);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(seconds);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureThenCompose</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">Integer join = findAccountNumber()</span><br><span class="line">.thenComposeAsync(<span class="keyword">this</span>::calculateBalance)</span><br><span class="line">.thenCompose(<span class="keyword">this</span>::notifyBalance)</span><br><span class="line">.join();</span><br><span class="line">assertEquals(<span class="keyword">new</span> Integer(<span class="number">100</span>), join);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </p><p><strong>thenCombine</strong><br>As name suggest <code>thenCombine</code> is used to merge results of two <em>independent CompletableFuture</em>. Assume that for a person we get first name and last name by calling two different independent methods. To get the Full name we want ot merge results of both the methods then we will use <strong>thenCombine</strong>.<br><figure class="highlight java"><figcaption><span>thenCombine</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title">findFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Niraj"</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title">findLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Sonawane"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureThenCombine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   CompletableFuture&lt;String&gt; thenCombine =</span><br><span class="line">                  findFirstName().thenCombine(findLastName(), (firstName, lastname) -&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> firstName + lastname;&#125;);</span><br><span class="line">   String fullName = thenCombine.join();</span><br><span class="line">assertEquals(<span class="string">"NirajSonawane"</span>, fullName);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> </p><h4 id="CompletableFuture-allOf"><a href="#CompletableFuture-allOf" class="headerlink" title="CompletableFuture allOf"></a>CompletableFuture allOf</h4><p>In Many scenario we want to run run multiple task in parallel and want to do some processing after all of them are complete. </p><p>Assume we want to find firstName of five different users and combine the results.<strong>The CompletableFuture.allOf static method allows to wait for completion of all of the Futures</strong>.<br>The <code>allOf</code> method has limitation  that it does not return the combined results of all Futures. <strong>We you have to manually combine the results from Futures.</strong><br><figure class="highlight java"><figcaption><span>allOf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title">findSomeValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Niraj"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureAllof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;CompletableFuture&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">5</span>).forEach(num -&gt; &#123;</span><br><span class="line">list.add(findSomeValue());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; allfuture = CompletableFuture.allOf(list.toArray(<span class="keyword">new</span> CompletableFuture[list.size()]));<span class="comment">//Created All of object</span></span><br><span class="line">    CompletableFuture&lt;List&lt;String&gt;&gt; allFutureList = allfuture.thenApply(val -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> list.stream().map(f -&gt; f.join()).collect(Collectors.toList());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; futureHavingAllValues = allFutureList.thenApply(fn -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"I am here"</span>);</span><br><span class="line"><span class="keyword">return</span> fn.stream().collect(Collectors.joining());&#125;);</span><br><span class="line">String concatenateString = futureHavingAllValues.join();</span><br><span class="line">assertEquals(<span class="string">"NirajNirajNirajNirajNiraj"</span>, concatenateString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p><h4 id="CompletableFuture-Exception-Handling"><a href="#CompletableFuture-Exception-Handling" class="headerlink" title="CompletableFuture Exception Handling"></a>CompletableFuture Exception Handling</h4><p>Handing Exceptions in Multithreaded code in Java was always pain. Luckily CompletableFuture has a nice way of handling exceptions.<br><figure class="highlight java"><figcaption><span>Exception Handling</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; thenApply = CompletableFuture</span><br><span class="line">.supplyAsync(<span class="keyword">this</span>::findAccountNumber)</span><br><span class="line">.thenApply(<span class="keyword">this</span>::calculateBalance) </span><br><span class="line">.thenApply(<span class="keyword">this</span>::notifyBalance)</span><br></pre></td></tr></table></figure><br>In Above Code if <code>findAccountNumber</code> method throws the Exception then callback chain <code>calculateBalance</code> and <code>notifyBalance</code> will not be called. Future will be resolved with the exception occurred.Similarly if <code>calculateBalance</code> throws the Exception then after the callback chain will break.</p><p><strong>Handel Exceptions using exceptionally</strong></p><p>Exceptionally callback will be called if preceding methods fails with an exception. exceptionally Returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the exception triggering this CompletableFuture’s completion when it completes exceptionally; otherwise, if this CompletableFuture completes normally, then the returned CompletableFuture also completes normally with the same value.<br><figure class="highlight java"><figcaption><span>exceptionally</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureExceptionally</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CompletableFuture&lt;Integer&gt; thenApply = CompletableFuture.supplyAsync(<span class="keyword">this</span>::findAccountNumber)</span><br><span class="line"> .thenApply(<span class="keyword">this</span>::calculateBalance) </span><br><span class="line"> .thenApply(<span class="keyword">this</span>::notifyBalance)</span><br><span class="line">  .exceptionally(ex -&gt; &#123;</span><br><span class="line">         System.out.println(<span class="string">"Got Some Exception "</span>+ex.getMessage());</span><br><span class="line"> System.out.println(<span class="string">"Returning some default value"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;);</span><br><span class="line">Integer join = thenApply.join();</span><br><span class="line">assertEquals(<span class="keyword">new</span> Integer(<span class="number">0</span>), join);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p><p><strong>Handel Exceptions using Handel Method</strong></p><p>Handel method is more flexible than exceptionally method.As we get both exception as well as Result.<br><figure class="highlight java"><figcaption><span>Handel</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureHandel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CompletableFuture&lt;Integer&gt; thenApply = CompletableFuture.supplyAsync(<span class="keyword">this</span>::findAccountNumber)</span><br><span class="line"> .thenApply(<span class="keyword">this</span>::calculateBalance) </span><br><span class="line"> .thenApply(<span class="keyword">this</span>::notifyBalance)</span><br><span class="line"> .handle((ok, ex) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"Code That we want to run in finally "</span>);</span><br><span class="line"><span class="keyword">if</span> (ok != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"No Exception !!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Got Exception "</span> + ex.getMessage());</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p><p><strong>Handel Exceptions using WhenComplete Method</strong><br><figure class="highlight java"><figcaption><span>WhenComplete</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureWhenComplete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CompletableFuture.supplyAsync(<span class="keyword">this</span>::findAccountNumber)</span><br><span class="line">.thenApply(<span class="keyword">this</span>::calculateBalance) </span><br><span class="line">.thenApply(<span class="keyword">this</span>::notifyBalance)</span><br><span class="line">.whenComplete((i,t)-&gt;System.out.println(<span class="string">"finally action"</span>));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="TimeOut-java-9-Improvement"><a href="#TimeOut-java-9-Improvement" class="headerlink" title="TimeOut java 9 Improvement"></a>TimeOut java 9 Improvement</h3><p>While Working on Asynchronous Code, We Need to handel timeouts. We Can not wait forever to finish the task. Unfortunately we do not have anything in java 8 for timeouts.<br><strong>Java 9 has added <code>orTimeout</code> and  <code>completeOnTimeout</code> methods to handel this.</strong></p><p>If  the task does not complete in given time, a <code>TimeoutException</code> will be thrown.</p><figure class="highlight java"><figcaption><span>orTimeout</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completableFutureWhenComplete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CompletableFuture.supplyAsync(<span class="keyword">this</span>::findAccountNumber)</span><br><span class="line"> .orTimeout(<span class="number">1</span>, TimeUnit.MINUTES); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code for this post is available for download <a href="https://github.com/nirajsonawane/CompletablefutureExamples.git" target="_blank" rel="noopener">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/01/27/Write-Clean-asynchronous-code-with-CompletableFuture-Java-8/rawpixel-679094-unsplash.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-col
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
      <category term="Java-9" scheme="https://nirajsonawane.github.io/tags/Java-9/"/>
    
  </entry>
  
  <entry>
    <title>Document Spring Boot RESTful API With Swagger-2.0</title>
    <link href="https://nirajsonawane.github.io/2019/01/20/Document-Spring-Boot-RESTful-API-With-Swagger-2-0/"/>
    <id>https://nirajsonawane.github.io/2019/01/20/Document-Spring-Boot-RESTful-API-With-Swagger-2-0/</id>
    <published>2019-01-20T08:40:46.000Z</published>
    <updated>2019-01-21T04:28:44.663Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/20/Document-Spring-Boot-RESTful-API-With-Swagger-2-0/puttipol-waipanya-1243332-unsplash.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@sawamura126?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Puttipol Waipanya"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Puttipol Waipanya</span></a></p><p>Now Days <strong>Spring Boot</strong> is de facto standard for developing RESTful services.Spring Boot makes it very easy to build RESTful services.<em>In SOAP based web services</em>, you had a <strong>WSDL</strong> which works as documentation for your API. For Rest Services we do not have WSDL so documentation of API becomes more critical.</p><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p>Swagger 2 is an open source framework used to describe and document RESTful APIs.Swagger Can read your API’s structure and automatically build beautiful and interactive API documentation. Swagger makes documenting your RESTful services easy.<br>Check <a href="https://swagger.io/docs/" target="_blank" rel="noopener"> Docs for all Features</a>.</p><p>The code for this post is available for download <a href="https://github.com/nirajsonawane/SwaggerWithSpringBoot.git" target="_blank" rel="noopener">here</a>.</p><h2 id="Swagger-Spring-Boot"><a href="#Swagger-Spring-Boot" class="headerlink" title="Swagger + Spring Boot"></a>Swagger + Spring Boot</h2><p>Swagger Can easily integrate with Spring Boot. To Integrate Swagger we need to use <a href="https://swagger.io/tools/swagger-ui/" target="_blank" rel="noopener">Swagger UI</a> &amp;  <a href="https://springfox.github.io/springfox/" target="_blank" rel="noopener">SpringFox</a>.</p><figure class="highlight plain"><figcaption><span>Maven Dependency</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Demo-Spring-Boot-RESTful-Application"><a href="#Demo-Spring-Boot-RESTful-Application" class="headerlink" title="Demo Spring Boot RESTful Application"></a>Demo Spring Boot RESTful Application</h2><p>let’s Create documentation for our Demo Spring Boot RESTful Application. Demo Application expose <code>User</code> rest endpoint that allows to perform CURD operations for User.</p><figure class="highlight java"><figcaption><span>User Endpoint</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userservice.getAllUsers();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userservice.getUser(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">addUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">userservice.addUser(user);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(<span class="string">"User Added successfully"</span>, HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">updateUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">userservice.updateUser(user);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(<span class="string">"User Updated successfully"</span>, HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">deleteUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">userservice.deleteUser(id);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(<span class="string">"User Deleted successfully"</span>, HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Swagger-Configuration"><a href="#Swagger-Configuration" class="headerlink" title="Swagger Configuration"></a>Swagger Configuration</h2><p>We need to create a <code>Docket</code> bean in a Spring Boot configuration to configure Swagger 2. A Springfox Docket instance provides the primary API configuration with sensible defaults and convenience methods for configuration.<br><code>@EnableSwagger2</code> Indicates that Swagger support should be enabled. This should be applied to a Spring java config and should have an accompanying <code>@Configuration</code> annotation. Loads all required beans defined in  <code>@SpringSwaggerConfig</code></p><p>Below is minimum configuration required for Swagger.</p><figure class="highlight java"><figcaption><span>SwaggerConfig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;                                    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)  </span><br><span class="line">          .select()                                  </span><br><span class="line">          .apis(RequestHandlerSelectors.any())              </span><br><span class="line">          .paths(PathSelectors.any())                          </span><br><span class="line">          .build();                                           </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>Now If we run the application and go to <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a>  documentation will be rendered by Swagger UI.<br><img src="/2019/01/20/Document-Spring-Boot-RESTful-API-With-Swagger-2-0/ui.png"></p><h3 id="Update-Swagger-Configuration-for-Customization-ApInfo"><a href="#Update-Swagger-Configuration-for-Customization-ApInfo" class="headerlink" title="Update Swagger Configuration for Customization - ApInfo"></a>Update Swagger Configuration for Customization - ApInfo</h3><figure class="highlight java"><figcaption><span>ApiInfo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apinfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"User Management API"</span>)</span><br><span class="line">                .description(<span class="string">"Rest API to Perfrom CURD "</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"Some Terms of Services URL"</span>)</span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                .license(<span class="string">"Some License Info"</span>)</span><br><span class="line">                .licenseUrl(<span class="string">"Some License URL"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"Niraj Sonawane"</span>, <span class="string">"https://nirajsonawane.github.io/"</span>,<span class="string">"Niraj.Sonawane@gmail.com"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Update-Swagger-Configuration-for-Customization-Selecting-Specific-Endpoints"><a href="#Update-Swagger-Configuration-for-Customization-Selecting-Specific-Endpoints" class="headerlink" title="Update Swagger Configuration for Customization - Selecting Specific Endpoints"></a>Update Swagger Configuration for Customization - Selecting Specific Endpoints</h2><p>When we verify the Generated documentation, We see that in <em>Basic Error Controller</em> along with our <em>User Controller</em> and <em>Model</em>.<br>We can Configure Swagger to generated documentation only for certain endpoints using <code>RequestHandlerSelectors</code>.</p><p><em>The Available options for Configurations are</em> </p><ol><li><code>RequestHandlerSelectors.basePackage(basePackage)</code></li><li><code>RequestHandlerSelectors.withClassAnnotation(annotation)</code></li><li><code>RequestHandlerSelectors.withMethodAnnotation(annotation)</code></li></ol><h2 id="Swagger-Annotations-On-Controller-classes"><a href="#Swagger-Annotations-On-Controller-classes" class="headerlink" title="Swagger Annotations On Controller classes"></a>Swagger Annotations On Controller classes</h2><p>Swagger provides annotations that can be applied on Controller classes to provide additional information,<br>We can annotate controllers and their methods and method parameters.</p><ul><li><code>@Api</code> describes the whole controller</li><li><code>@ApiOperation</code> is used for description on a methods level</li><li><code>@ApiResponses</code> is used for description of response codes on a methods level</li><li><code>@ApiParam</code> is used for method parameters</li></ul><figure class="highlight java"><figcaption><span>Swagger Annotations On Controller classes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(consumes=<span class="string">"application/json"</span>, produces=<span class="string">"application/json"</span>,protocols=<span class="string">"http"</span>, value = <span class="string">"getUser"</span> )</span><br><span class="line"><span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">200</span>, message = <span class="string">"Successfully retrieved User"</span>),</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">401</span>, message = <span class="string">"The request has not been applied because it lacks valid authentication credentials for the target resource"</span>),</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">403</span>, message = <span class="string">"The server understood the request but refuses to authorize it"</span>),</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">404</span>, message = <span class="string">"The resource  not found"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@ApiParam(<span class="string">"Id of user, Can not be null"</span>)</span> @PathVariable <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userservice.getUser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/01/20/Document-Spring-Boot-RESTful-API-With-Swagger-2-0/method.png"><h2 id="Swagger-Annotations-On-Model-classes"><a href="#Swagger-Annotations-On-Model-classes" class="headerlink" title="Swagger Annotations On Model classes"></a>Swagger Annotations On Model classes</h2><p>Swagger Core annotations, Can be used to specify additional information about your model Class.<br>e.g User Class annotated with these annotations can look something like this</p><figure class="highlight java"><figcaption><span>Swagger Annotations On Model classes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"Class representing User "</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(notes = <span class="string">"Unique  ID for user"</span>, example = <span class="string">"1"</span>, required = <span class="keyword">true</span>, position = <span class="number">0</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(notes = <span class="string">"First Name of User"</span>, example = <span class="string">"Niraj"</span>, required = <span class="keyword">true</span>, position = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(notes = <span class="string">"Last Name of User"</span>, example = <span class="string">"Sonawane"</span>, required = <span class="keyword">true</span>, position = <span class="number">2</span>)</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(notes = <span class="string">"Middle Name of User"</span>, example = <span class="string">"Ashok"</span>, required = <span class="keyword">false</span>, position = <span class="number">3</span>)</span><br><span class="line"><span class="keyword">private</span> String middleName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(notes = <span class="string">"Age of User"</span>, example = <span class="string">"32"</span>, required = <span class="keyword">true</span>, position = <span class="number">4</span>)</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Swagger-Integration-with-JSR-303-Annotations"><a href="#Swagger-Integration-with-JSR-303-Annotations" class="headerlink" title="Swagger Integration with JSR-303 Annotations"></a>Swagger Integration with JSR-303 Annotations</h2><p><em>JSR 303 Bean Validation</em> is the specification of the Java API for JavaBean validation in Java EE and Java SE. This is very popular mechanism for validation and number of projects are using it.<br><figure class="highlight java"><figcaption><span>JSR 303 Bean Validation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="meta">@NotBlank</span></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">2</span>, max = <span class="number">10</span>)    </span><br><span class="line"><span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotBlank</span></span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String middleName;</span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Min</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta">@Max</span>(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>This is a common practice which is already widely used. Swagger can be easily configured to read these annotations and generate documentation based on such annotations.<br>This makes Swagger very useful as we can utilize what we already have in our project without writing all the constraints manually. Consumers also know what are restrictions on the values  and what they should provide to API and what values to expect. </p><figure class="highlight"><figcaption><span>Add dependency in pom file</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-bean-validators&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Import BeanValidatorPluginsConfiguration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@Import</span>(BeanValidatorPluginsConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;    </span><br></pre></td></tr></table></figure><p>After Integration Model will look like below in generated documentation.<br><img src="/2019/01/20/Document-Spring-Boot-RESTful-API-With-Swagger-2-0/model.png">  </p><p>The code for this post is available for download <a href="https://github.com/nirajsonawane/SwaggerWithSpringBoot.git" target="_blank" rel="noopener">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/01/20/Document-Spring-Boot-RESTful-API-With-Swagger-2-0/puttipol-waipanya-1243332-unsplash.jpg&quot;&gt;
&lt;p&gt;&lt;a style=&quot;background-col
      
    
    </summary>
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://nirajsonawane.github.io/tags/Spring-Boot/"/>
    
      <category term="Swagger" scheme="https://nirajsonawane.github.io/tags/Swagger/"/>
    
      <category term="Rest" scheme="https://nirajsonawane.github.io/tags/Rest/"/>
    
  </entry>
  
  <entry>
    <title>Junit 5 : Write Powerful Unit Test Cases Using Parameterized Tests</title>
    <link href="https://nirajsonawane.github.io/2018/12/30/Junit-5-Write-Powerful-Unit-Test-Cases-Using-Parameterized-Tests/"/>
    <id>https://nirajsonawane.github.io/2018/12/30/Junit-5-Write-Powerful-Unit-Test-Cases-Using-Parameterized-Tests/</id>
    <published>2018-12-30T08:57:02.000Z</published>
    <updated>2018-12-30T12:49:58.555Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/30/Junit-5-Write-Powerful-Unit-Test-Cases-Using-Parameterized-Tests/wellington-rodrigues-575521-unsplash.jpg"><p><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@wellingtonrodrs?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Wellington Rodrigues"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"/></svg></span><span style="display:inline-block;padding:2px 3px">Wellington Rodrigues</span></a></p><h2 id="JUnit-5"><a href="#JUnit-5" class="headerlink" title="JUnit 5"></a>JUnit 5</h2><p>Unlike previous versions of JUnit. <strong>JUnit 5</strong> is complete rewrite  and has lot of interesting architecture changes. JUnit 5 is not Single project but compose from three sub-projects: <em>Jupiter, Vintage, and Platform</em>. </p><p><strong>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p><p>Check <a href="https://junit.org/junit5/docs/current/user-guide/#overview" target="_blank" rel="noopener"> JUnit 5 User Guide For more details</a>. You can find all code samples in on my <a href="https://github.com/nirajsonawane/Junit-5.git" target="_blank" rel="noopener">GitHub Account</a></p><p>In this post We will discuss <strong>Parameterized Tests</strong>  in JUnit 5.</p><h2 id="Parameterized-Tests"><a href="#Parameterized-Tests" class="headerlink" title="Parameterized Tests"></a>Parameterized Tests</h2><p>JUnit 5 Parameterized Test are very powerful. With the help of Parameterized Test We can remove the  duplication in test cases.Parameterized test cases can also help us to cleanup the test code and remove the cluter.<br>As Name suggest <em>Parameterized tests</em> make it possible to run a test multiple times with different arguments. They are declared just like regular <code>@Test</code> methods but use the <code>@ParameterizedTest</code> annotation instead. In addition, you must declare at least one source that will provide the arguments for each invocation and then consume the arguments in the test method.</p><h3 id="Simple-ParameterizedTest"><a href="#Simple-ParameterizedTest" class="headerlink" title="Simple ParameterizedTest"></a>Simple ParameterizedTest</h3><p>The following example demonstrates a parameterized test that uses the <code>@ValueSource</code> annotation to specify a String array as the source of arguments. Test Case will be called 2 times with parameter Hello and World.<br><em>Framework will be responsible for injecting parameter values</em>  </p><figure class="highlight java"><figcaption><span>Simple ParameterizedTest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@ParameterizedTest</span></span><br><span class="line">   <span class="meta">@ValueSource</span>(strings = &#123; <span class="string">"Hello"</span>, <span class="string">"World"</span> &#125;)</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">withSomeValues</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">System.out.println(word);</span><br><span class="line">assertNotNull(word);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Display-Names-For-ParameterizedTest"><a href="#Display-Names-For-ParameterizedTest" class="headerlink" title="Display Names For ParameterizedTest"></a>Display Names For ParameterizedTest</h3><p>JUnit 5 has added new annotation <code>@DisplayName</code>, Which helps to provide more readable names to test classes and methods.These names will be displayed by test runners and test reporting.</p><figure class="highlight java"><figcaption><span>Display Names</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="meta">@DisplayName</span>(<span class="string">"String should not be null"</span>)</span><br><span class="line">   <span class="meta">@ParameterizedTest</span></span><br><span class="line">   <span class="meta">@ValueSource</span>(strings = &#123; <span class="string">"Hello"</span>, <span class="string">"World"</span> &#125;)</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">withSomeValues</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">System.out.println(word);</span><br><span class="line">assertNotNull(word);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But in case of Parameterized Test,Sometimes we might need to name test cases based on arguments. JUnit 5 provides <code>index</code>  and <code>arguments</code> variable for this<br><figure class="highlight java"><figcaption><span>Display Names For ParameterizedTest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="meta">@ParameterizedTest</span>(name = <span class="string">"Null Check Test  #&#123;index&#125; with [&#123;arguments&#125;]"</span>)</span><br><span class="line">   <span class="meta">@ParameterizedTest</span></span><br><span class="line">   <span class="meta">@ValueSource</span>(strings = &#123; <span class="string">"Hello"</span>, <span class="string">"World"</span> &#125;)</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">withSomeValues</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">System.out.println(word);</span><br><span class="line">assertNotNull(word);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Sources-of-Arguments"><a href="#Sources-of-Arguments" class="headerlink" title="Sources of Arguments"></a>Sources of Arguments</h3><p> Out of the box, JUnit Jupiter provides number of Argument Source providers.</p><ol><li><code>@ValueSource</code></li><li><code>@EnumSource</code></li><li><code>@MethodSource</code></li><li><code>@CsvSource</code></li><li><code>@CsvFileSource</code> </li><li><code>@ArgumentsSource</code></li></ol><p>Let’s try one by one</p><h5 id="EnumSource"><a href="#EnumSource" class="headerlink" title="@EnumSource"></a>@EnumSource</h5><p><code>@EnumSource</code> provides a convenient way to use Enum constants. This annotation provides an optional names parameter that lets you specify which constants shall be used. If omitted, all constants will be used like in the following example.</p><figure class="highlight java"><figcaption><span>EnumSource</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ParameterizedTest</span>(name = <span class="string">"withSomeName #&#123;index&#125; with Value [&#123;arguments&#125;]"</span>)</span><br><span class="line">    <span class="meta">@EnumSource</span>(MyTestEnum.class)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">withSomeEnum</span><span class="params">(MyTestEnum myEnum)</span> </span>&#123;</span><br><span class="line">System.out.println(myEnum);</span><br><span class="line">assertNotNull(myEnum);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h5 id="MethodSource"><a href="#MethodSource" class="headerlink" title="@MethodSource"></a>@MethodSource</h5><p><code>@MethodSource</code> allows you to refer one or more factory methods of the test class or external classes.</p><p><em>Method Source in Same class</em></p><ul><li>Factory methods within the test class must be static.</li><li>Each factory method must generate a stream of arguments.</li></ul><figure class="highlight java"><figcaption><span>MethodSource in Same Class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@ParameterizedTest</span></span><br><span class="line">   <span class="meta">@MethodSource</span>(<span class="string">"createWordsWithLength"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">withMethodSource</span><span class="params">(String word, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"withMethodSource"</span>);</span><br><span class="line">assertNotNull(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Stream&lt;Arguments&gt; <span class="title">createWordsWithLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Stream.of(Arguments.of(<span class="string">"Hello"</span>, <span class="number">5</span>), Arguments.of(<span class="string">"JUnit 5"</span>, <span class="number">7</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Method Source in Other class</em></p><ul><li>Factory methods in external classes must be static.</li><li>Each factory method must generate a stream of arguments.</li><li>Factory methods must not accept any arguments.<figure class="highlight java"><figcaption><span>MethodSource in external classes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@ParameterizedTest</span></span><br><span class="line">   <span class="meta">@MethodSource</span>(<span class="string">"com.niraj.MethodSource#stringProvider"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">withMethodSource</span><span class="params">(String word, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"withMethodSource"</span>);</span><br><span class="line">assertNotNull(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Stream&lt;Arguments&gt; <span class="title">createWordsWithLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Stream.of(Arguments.of(<span class="string">"Hello"</span>, <span class="number">5</span>), Arguments.of(<span class="string">"JUnit 5"</span>, <span class="number">7</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CsvSource"><a href="#CsvSource" class="headerlink" title="@CsvSource"></a>@CsvSource</h5>As name suggest <code>@CsvSource</code> allows you to express argument lists as comma-separated values (i.e., String literals).<figure class="highlight java"><figcaption><span>CsvSource</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@ParameterizedTest</span></span><br><span class="line">   <span class="meta">@CsvSource</span>(&#123; <span class="string">"Hello, 5"</span>, <span class="string">"World, 5"</span>, <span class="string">"test,4"</span> &#125;)</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">withCsvSource</span><span class="params">(String word, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">assertEquals(word.length(), length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CsvFileSource"><a href="#CsvFileSource" class="headerlink" title="@CsvFileSource"></a>@CsvFileSource</h5>Similar to <code>@CsvSource</code> We can also provide csv values using file from classpath <code>@CsvFileSource</code>.  <figure class="highlight java"><figcaption><span>CsvFileSource</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@ParameterizedTest</span></span><br><span class="line">   <span class="meta">@CsvFileSource</span>(resources = <span class="string">"/testdata.csv"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">withCsvFileSource</span><span class="params">(String word, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">assertEquals(word.length(), length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="ArgumentsSource"><a href="#ArgumentsSource" class="headerlink" title="ArgumentsSource"></a>ArgumentsSource</h4><p>If any of the above Source provider does not meet your requirement, then you can use your custom Argument Source provider. You will need to implement <code>ArgumentsProvider</code> Interface.</p><figure class="highlight java"><figcaption><span>ArgumentsSource</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@ArgumentsSource</span>(StringArgumentsProvider.class)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithArgumentsSource</span><span class="params">(String argument)</span> </span>&#123;</span><br><span class="line">        assertNotNull(argument);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>StringArgumentsProvider</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringArgumentsProvider</span> <span class="keyword">implements</span> <span class="title">ArgumentsProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Stream&lt;? extends Arguments&gt; provideArguments(ExtensionContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="string">"Hello"</span>, <span class="string">"world"</span>).map(Arguments::of);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Argument-Conversion"><a href="#Argument-Conversion" class="headerlink" title="Argument Conversion"></a>Argument Conversion</h3><p> In all above Test cases you might have observed that the arguments are getting converted to method parameter types. In all examples, arguments  are getting converted to <code>String</code>.</p><p> Who is converting these arguments ?</p><p> What if we change it to <code>int</code> or any other types?</p><p> What happens if incase we want to use any User Defined object ?   </p><p><em>Widening Conversion</em><br>JUnit Jupiter supports Widening Primitive Conversion for arguments supplied to a <code>@ParameterizedTest</code>. For example, a parameterized test annotated with <code>@ValueSource(ints = { 1, 2, 3 })</code> can be declared to accept not only an argument of type int but also an argument of type long, float, or double.</p><p><em>Explicit Conversion</em><br>We Can Specify <code>ArgumentConverter</code> to convert to any user define object. In below example i wanted to convert String “niraj,sonawane” to <code>Person</code> object.  </p><figure class="highlight java"><figcaption><span>ArgumentConverter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@ValueSource</span>(strings =&#123;<span class="string">"niraj,sonawane"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">withCustomConverter</span><span class="params">(@ConvertWith(PersonConverter.class)</span> Person person) </span>&#123;</span><br><span class="line">assertEquals(Person.getFirstName(),<span class="string">"niraj"</span>);</span><br><span class="line">assertEquals(Person.getLastName(),<span class="string">"sonawane"</span>);</span><br><span class="line">&#125; </span><br><span class="line">    <span class="comment">//Convert class </span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonConverter</span> <span class="keyword">implements</span> <span class="title">ArgumentConverter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">convert</span><span class="params">(Object source, ParameterContext context)</span> <span class="keyword">throws</span> ArgumentConversionException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (source <span class="keyword">instanceof</span> String)</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String[] split = ((String) source).split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Emp(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException ex) &#123;</span><br><span class="line">String message = source + <span class="string">" is no correct string representation of a Emp."</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArgumentConversionException(message, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArgumentConversionException(source + <span class="string">" is no valid point"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/12/30/Junit-5-Write-Powerful-Unit-Test-Cases-Using-Parameterized-Tests/wellington-rodrigues-575521-unsplash.jpg&quot;&gt;
&lt;p&gt;&lt;a styl
      
    
    </summary>
    
      <category term="Unit Testing" scheme="https://nirajsonawane.github.io/categories/Unit-Testing/"/>
    
    
      <category term="JUnit-5" scheme="https://nirajsonawane.github.io/tags/JUnit-5/"/>
    
      <category term="Unit Testing" scheme="https://nirajsonawane.github.io/tags/Unit-Testing/"/>
    
  </entry>
  
  <entry>
    <title>Applying Reactive Programing to Existing Batch Application- RXJava2</title>
    <link href="https://nirajsonawane.github.io/2018/12/06/Applying-Reactive-Programing-to-Existing-Batch-Application-RXJava2/"/>
    <id>https://nirajsonawane.github.io/2018/12/06/Applying-Reactive-Programing-to-Existing-Batch-Application-RXJava2/</id>
    <published>2018-12-06T05:10:55.000Z</published>
    <updated>2018-12-11T15:45:31.299Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/06/Applying-Reactive-Programing-to-Existing-Batch-Application-RXJava2/Reactive-Extensions.png"> <p>Today, I will share my experience of migrating our existing Spring batch application to reactive programing model using <strong>ReactiveX</strong> extensions.<br>The goal is to explain, What is <strong>ReactiveX-RXjava2</strong> and demonstrating Working example.</p><h2 id="What-is-ReactiveX-And-RxJava"><a href="#What-is-ReactiveX-And-RxJava" class="headerlink" title="What is ReactiveX And RxJava"></a>What is ReactiveX And RxJava</h2><p><strong>ReactiveX</strong> Is An API for asynchronous programming with observable streams.ReactiveX is a  combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming.</p><p><strong>RxJava</strong> is the Java implementation of ReactiveX. RxJava provides Java API for asynchronous programming with observable streams.<br><a href="http://reactivex.io/" target="_blank" rel="noopener">ReactiveX</a></p><h2 id="Why-Reactive-programming"><a href="#Why-Reactive-programming" class="headerlink" title="Why Reactive programming?"></a>Why Reactive programming?</h2><p> For Me Reactive Programming is a development model focus around <em>Asynchronous Data Streams</em>.<br> In Reactive programming, <em>Data streams</em> are the center part of your application. Mesages ,Events, Errors ,Event chains ,call etc  are going to be conveyed As a data stream.<br> <code>Reactive programming provides a simple way of asynchronous programming.</code></p><h2 id="Migration-Story"><a href="#Migration-Story" class="headerlink" title="Migration Story"></a>Migration Story</h2><a id="more"></a><p>The Batch application was very traditional use case of file processing. Processing includes Multiple complex Steps.<br>To Stimulate Similar processing with less complexity, I have created small <code>Spring-Batch</code> application that process csv file containing <em>FirstName,LastName and Age</em>. Processing includes below Steps.</p><ol><li>Validations - Age Should not be more than 100 years.</li><li>Enrichment 1 - Upper Case First Name.        </li><li>Enrichment 2 - Upper Case Last Name.        </li><li>Segregation  - Based on Age, Categories Person As Teenager, YoungAdult or Senior Citizens.         </li><li>Database Insert- Based on Age Group insert person in associate table.</li></ol><p><a href="https://github.com/nirajsonawane/spring-batch-csv-processor" target="_blank" rel="noopener">The complete source code Spring-Batch Implementation</a><br><a href="https://github.com/nirajsonawane/rxjava2-csvprocessor" target="_blank" rel="noopener">The complete source code RXJava2 Implementation</a></p><h2 id="Let’s-Start-with-RXJava2-Implementation"><a href="#Let’s-Start-with-RXJava2-Implementation" class="headerlink" title="Let’s Start with RXJava2 Implementation"></a>Let’s Start with RXJava2 Implementation</h2><h4 id="Building-blocks-for-RxJava"><a href="#Building-blocks-for-RxJava" class="headerlink" title="Building blocks for RxJava"></a>Building blocks for RxJava</h4><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="noopener">Observables</a> Representing sources of data<br><a href="http://reactivex.io/RxJava/javadoc/rx/Subscriber.html" target="_blank" rel="noopener">Subscribers or observers</a> listening to the observables<br><a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">Operators</a> Operators create  Observables Or Transform data or operate on an Observable and return an Observable set of methods for modifying and composing the data.</p><h4 id="Step-1-Creating-Observable-on-Input-File"><a href="#Step-1-Creating-Observable-on-Input-File" class="headerlink" title="Step 1 : Creating Observable on Input File"></a>Step 1 : Creating Observable on Input File</h4><p><code>ObServable</code> is Responsible for reading data from file and passing it to Subscriber.There are multiple ways by which we create Observable. For reading data from file we will use <code>defer()</code> operator.<br><strong>The defer()</strong> operator does not create the Observable until the observer subscribes, and create a fresh Observable for each observer.</p><figure class="highlight java"><figcaption><span>Create Observable</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Observable&lt;Person&gt; observable = Observable.defer(() -&gt; <span class="keyword">new</span> CsvFileObservableSource(filePath))</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvFileObservableSource</span> <span class="keyword">implements</span> <span class="title">ObservableSource</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(CsvFileObservableSource.class);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String filename;</span><br><span class="line">CsvFileObservableSource(String filename) &#123;</span><br><span class="line"><span class="keyword">this</span>.filename = filename; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Person&gt; observer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Files.lines(Paths.get(filename)).forEach(inputLine -&gt; &#123;</span><br><span class="line">String[] split = inputLine.split(<span class="string">","</span>);</span><br><span class="line"><span class="comment">//Send data </span></span><br><span class="line">                observer.onNext(    </span><br><span class="line">Person.builder()</span><br><span class="line">.firstName(split[<span class="number">0</span>])</span><br><span class="line">.lastName(split[<span class="number">1</span>])</span><br><span class="line">.age(Integer.parseInt(split[<span class="number">2</span>]))</span><br><span class="line">.build());</span><br><span class="line">&#125;);</span><br><span class="line">observer.onComplete(); <span class="comment">// No more data to be send </span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">observer.onError(e); <span class="comment">// Some error , send error information to subscriber. </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step-2-Subscribe-to-Observable"><a href="#Step-2-Subscribe-to-Observable" class="headerlink" title="Step 2 : Subscribe to  Observable"></a>Step 2 : Subscribe to  Observable</h4><p><code>observable.subscribe(onNext,onError,onComplete);</code><br>Provide onNext,onError,onComplete consumers<br>The Subscriber will print the values line by line read from file.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(</span><br><span class="line">person -&gt; System.out::println, </span><br><span class="line">Throwable::printStackTrace, </span><br><span class="line">() -&gt; System.out::println(<span class="string">"I am Done"</span>);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="Step-3-Add-Processing-logic-using-Operators"><a href="#Step-3-Add-Processing-logic-using-Operators" class="headerlink" title="Step 3 : Add Processing logic using Operators"></a>Step 3 : Add Processing logic using Operators</h3><p>Now Process the elements read from the file using operators like <code>filter</code> &amp; <code>map</code> This is similar to java 8 stream.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Observable&lt;List&lt;Person&gt;&gt; observable = Observable.defer(() -&gt; <span class="keyword">new</span> CsvFileObservableSource(filePath))</span><br><span class="line">.filter(ValidationProcessor::process)</span><br><span class="line">.map(FirstNameProcessor::process)</span><br><span class="line">.map(LastNameProcessor::process)</span><br><span class="line">.map(AgeProcessor::process)</span><br><span class="line">.buffer(chunkSize);</span><br></pre></td></tr></table></figure><br><strong>Note</strong> If you observe,<code>Observable</code> is of Type <code>List&lt;Person&gt;</code> instead of <code>&lt;Person&gt;</code> . This is because we want to process data in chunk and not as individual data item. This capability is provided by <code>buffer</code> operator.</p><p><strong>Buffer</strong><br>periodically gather items emitted by an Observable into bundles and emit these bundles rather than emitting the items one at a time.</p><h3 id="Step-4-Group-Person-elements-and-Insert-in-different-Tables"><a href="#Step-4-Group-Person-elements-and-Insert-in-different-Tables" class="headerlink" title="Step 4 : Group Person elements and Insert in different Tables"></a>Step 4 : Group Person elements and Insert in different Tables</h3><p>Now Based on Age, We want to Categories Person As Teenager, YoungAdult or Senior Citizens.<br><strong>GroupBy Operator</strong><br>Divide an Observable into a set of Observables that each emit a different subset of items from the original Observable.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> Observable&lt;GroupedObservable&lt;String, Person&gt;&gt; groupObservable = Observable</span><br><span class="line">.defer(() -&gt; <span class="keyword">new</span> CsvFileObservableSource(filePath))</span><br><span class="line">.filter(ValidationProcessor::process)</span><br><span class="line">.map(FirstNameProcessor::process)</span><br><span class="line">.map(LastNameProcessor::process)</span><br><span class="line">.map(AgeProcessor::process)</span><br><span class="line">.groupBy(Person::getAgeGroup);</span><br><span class="line"></span><br><span class="line">groupObservable.subscribe(s -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"TEENAGER"</span>.equals(s.getKey())) &#123;</span><br><span class="line">s.buffer(chunkSize).subscribe(daoServiceImpl::insertTeenagerList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"YOUNGADULT"</span>.equals(s.getKey())) &#123;</span><br><span class="line">s.buffer(chunkSize).subscribe(daoServiceImpl::insertYoungadultList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"SENIORCITIZENS"</span>.equals(s.getKey())) &#123;</span><br><span class="line">s.buffer(chunkSize).subscribe(daoServiceImpl::insertSeniorcitizensList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, Throwable::printStackTrace, () -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"File Processing Complited"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><a href="https://github.com/nirajsonawane/rxjava2-csvprocessor" target="_blank" rel="noopener">The complete source code RXJava2 Implementation</a></p><p>There are other important aspect like <strong>Error Handling</strong>, <strong>Backpressure</strong> and <strong>Multithreading</strong> are not in scope of this article. I will try to cover them in upcoming articles.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/12/06/Applying-Reactive-Programing-to-Existing-Batch-Application-RXJava2/Reactive-Extensions.png&quot;&gt; 
&lt;p&gt;Today, I will share my experience of migrating our existing Spring batch application to reactive programing model using &lt;strong&gt;ReactiveX&lt;/strong&gt; extensions.&lt;br&gt;The goal is to explain, What is &lt;strong&gt;ReactiveX-RXjava2&lt;/strong&gt; and demonstrating Working example.&lt;/p&gt;
&lt;h2 id=&quot;What-is-ReactiveX-And-RxJava&quot;&gt;&lt;a href=&quot;#What-is-ReactiveX-And-RxJava&quot; class=&quot;headerlink&quot; title=&quot;What is ReactiveX And RxJava&quot;&gt;&lt;/a&gt;What is ReactiveX And RxJava&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;ReactiveX&lt;/strong&gt; Is An API for asynchronous programming with observable streams.ReactiveX is a  combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RxJava&lt;/strong&gt; is the Java implementation of ReactiveX. RxJava provides Java API for asynchronous programming with observable streams.&lt;br&gt;&lt;a href=&quot;http://reactivex.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ReactiveX&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Why-Reactive-programming&quot;&gt;&lt;a href=&quot;#Why-Reactive-programming&quot; class=&quot;headerlink&quot; title=&quot;Why Reactive programming?&quot;&gt;&lt;/a&gt;Why Reactive programming?&lt;/h2&gt;&lt;p&gt; For Me Reactive Programming is a development model focus around &lt;em&gt;Asynchronous Data Streams&lt;/em&gt;.&lt;br&gt; In Reactive programming, &lt;em&gt;Data streams&lt;/em&gt; are the center part of your application. Mesages ,Events, Errors ,Event chains ,call etc  are going to be conveyed As a data stream.&lt;br&gt; &lt;code&gt;Reactive programming provides a simple way of asynchronous programming.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Migration-Story&quot;&gt;&lt;a href=&quot;#Migration-Story&quot; class=&quot;headerlink&quot; title=&quot;Migration Story&quot;&gt;&lt;/a&gt;Migration Story&lt;/h2&gt;
    
    </summary>
    
      <category term="RXJava-2" scheme="https://nirajsonawane.github.io/categories/RXJava-2/"/>
    
    
      <category term="RXjava" scheme="https://nirajsonawane.github.io/tags/RXjava/"/>
    
      <category term="ReactiveX" scheme="https://nirajsonawane.github.io/tags/ReactiveX/"/>
    
      <category term="Functional Programming" scheme="https://nirajsonawane.github.io/tags/Functional-Programming/"/>
    
      <category term="Reactive Programming" scheme="https://nirajsonawane.github.io/tags/Reactive-Programming/"/>
    
      <category term="Streams" scheme="https://nirajsonawane.github.io/tags/Streams/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch - Process Multiple Files Parallel</title>
    <link href="https://nirajsonawane.github.io/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/"/>
    <id>https://nirajsonawane.github.io/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/</id>
    <published>2018-11-08T11:47:22.000Z</published>
    <updated>2018-12-11T15:49:42.379Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/wild-flowers-571940_1920.jpg"> <p>Photo Credit <a href="https://pixabay.com/photo-571940/" target="_blank" rel="noopener">Pixabay</a></p><p>Today, We will discuss how we can Process Multiple Files Concurrently using Spring Batch.</p><p><strong><em>Prerequisite</em></strong> Basic knowledge of Spring &amp; Spring Batch Framework is Required.</p><p><strong><em>Background</em></strong><br>Spring Batch is a lightweight, comprehensive batch framework designed to enable the development of robust batch applications vital for the daily operations of enterprise systems. Spring Batch builds upon the characteristics of the Spring Framework that people have come to expect (productivity, POJO-based development approach, and general ease of use), while making it easy for developers to access and leverage more advance enterprise services when necessary.</p><p><strong><em>Scaling and Parallel Processing</em></strong> Spring Batch Offers Multiple options for Scaling and Parallel Processing. At very high level these are separated in below categories.  </p><ol><li>Multi-threaded Step</li><li>Parallel Steps</li><li>Remote Chunking</li><li>Partitioning</li></ol><p>For Processing Multiple Files we will be using <em>Partitioning</em>.</p><p><strong><em>Partitioning</em></strong><br><img src="/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/partitioning-overview.png"><br>The Job is executing on the left hand side as a sequence of Steps, and one of the Steps is labelled as a Master. The Slaves in this picture are all identical instances of a Step, which could in fact take the place of the Master resulting in the same outcome for the Job. The Slaves are typically going to be remote services, but could also be local threads of execution. The messages sent by the Master to the Slaves in this pattern do not need to be durable, or have guaranteed delivery: Spring Batch meta-data in the <code>JobRepository</code> will ensure that each Slave is executed once and only once for each Job execution.<br>If required, we can pass data from the master to the slave. The meta data (i.e. the JobRepository), makes sure that every slave is executed only once in a single execution of the Job.<br><a id="more"></a><br><strong><em>Demo Application For processing Multiple Files Concurrently</em></strong>  We will extend the Spring Batch Sample Application provided on Getting Stated guide <a href="https://spring.io/guides/gs/batch-processing/" target="_blank" rel="noopener">Here</a></p><p>Sample Application : Sample application imports data from a CSV spreadsheet, transforms it with custom code, and stores the final results in a database. We will add the capability of Processing <strong><strong>Multiple Files Concurrently</strong></strong> Step by Step.</p><p><strong><em>Defining <code>Partitioner</code> bean  using <code>MultiResourcePartitioner</code></em></strong><br><code>MultiResourcePartitioner</code> is Implementation of <code>Partitioner</code> that locates multiple resources and associates their file names with execution context keys. Creates an ExecutionContext per resource, and labels them as {partition0, partition1, …, partitionN}.<br><figure class="highlight java"><figcaption><span>MultiResourcePartitioner Bean Configuration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Bean</span>(<span class="string">"partitioner"</span>)</span><br><span class="line"><span class="meta">@StepScope</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Partitioner <span class="title">partitioner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"In Partitioner"</span>);</span><br><span class="line">MultiResourcePartitioner partitioner = <span class="keyword">new</span> MultiResourcePartitioner();</span><br><span class="line">ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">Resource[] resources = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resources = resolver.getResources(<span class="string">"/*.csv"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">partitioner.setResources(resources);</span><br><span class="line">partitioner.partition(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> partitioner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong><em>Configuration of Master Step</em></strong><br><figure class="highlight java"><figcaption><span>Master Step & TaskExcecutor Configuration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"masterStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">masterStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"masterStep"</span>)</span><br><span class="line">.partitioner(<span class="string">"step1"</span>, partitioner())</span><br><span class="line">.step(step1())</span><br><span class="line">.taskExecutor(taskExecutor())</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">taskExecutor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">taskExecutor.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">taskExecutor.afterPropertiesSet();</span><br><span class="line"><span class="keyword">return</span> taskExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong><em>Binding Input Data to Steps: Passing File Name</em></strong><br>This can be done using  <code>StepScope</code> feature of Spring Batch.<code>StepScope</code> Allows the late binding.<br>We need to Read filename from the <code>stepExecutionContext</code> as shown below.<br><figure class="highlight java"><figcaption><span>FlatFileItemReader Configuration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@StepScope</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"personItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Person&gt; <span class="title">personItemReader</span><span class="params">(@Value(<span class="string">"#&#123;stepExecutionContext['fileName']&#125;"</span>)</span> String filename) <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line"></span><br><span class="line">       log.info(<span class="string">"In Reader"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Person&gt;()</span><br><span class="line">                        .name(<span class="string">"personItemReader"</span>)</span><br><span class="line">.delimited()</span><br><span class="line">.names(<span class="keyword">new</span> String[] &#123; <span class="string">"firstName"</span>, <span class="string">"lastName"</span> &#125;)</span><br><span class="line">.fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Person&gt;() &#123;</span><br><span class="line">&#123;</span><br><span class="line">setTargetType(Person.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.resource(<span class="keyword">new</span> UrlResource(filename))</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong><em>Configuration of slave Step</em></strong><br><figure class="highlight java"><figcaption><span>Slave Step Configuration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">.&lt;Person, Person&gt;chunk(<span class="number">10</span>)</span><br><span class="line">.processor(processor())</span><br><span class="line">.writer(writer)</span><br><span class="line">.reader(personItemReader)</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Now if we Launch the application, In logs we can see each file is getting process by separate thread.<br><img src="/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/output.png"><br><strong> References </strong><br><a href="https://spring.io/guides/gs/batch-processing/" target="_blank" rel="noopener">Spring Batch getting Started </a><br><a href="https://docs.spring.io/spring-batch/4.0.x/reference/html/scalability.html#scalability" target="_blank" rel="noopener">Scaling and Parallel Processing</a><br><a href="https://docs.spring.io/spring-batch/4.0.x/reference/html/scalability.html#partitioning" target="_blank" rel="noopener">Partitioning</a><br><a href="https://github.com/nirajsonawane/parallel-file-processor.git" target="_blank" rel="noopener">Github Link of Solution </a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/wild-flowers-571940_1920.jpg&quot;&gt; 
&lt;p&gt;Photo Credit &lt;a href=&quot;https://pixabay.com/photo-571940/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pixabay&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today, We will discuss how we can Process Multiple Files Concurrently using Spring Batch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Prerequisite&lt;/em&gt;&lt;/strong&gt; Basic knowledge of Spring &amp;amp; Spring Batch Framework is Required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Background&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;Spring Batch is a lightweight, comprehensive batch framework designed to enable the development of robust batch applications vital for the daily operations of enterprise systems. Spring Batch builds upon the characteristics of the Spring Framework that people have come to expect (productivity, POJO-based development approach, and general ease of use), while making it easy for developers to access and leverage more advance enterprise services when necessary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Scaling and Parallel Processing&lt;/em&gt;&lt;/strong&gt; Spring Batch Offers Multiple options for Scaling and Parallel Processing. At very high level these are separated in below categories.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Multi-threaded Step&lt;/li&gt;
&lt;li&gt;Parallel Steps&lt;/li&gt;
&lt;li&gt;Remote Chunking&lt;/li&gt;
&lt;li&gt;Partitioning&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For Processing Multiple Files we will be using &lt;em&gt;Partitioning&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Partitioning&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/partitioning-overview.png&quot;&gt;&lt;br&gt;The Job is executing on the left hand side as a sequence of Steps, and one of the Steps is labelled as a Master. The Slaves in this picture are all identical instances of a Step, which could in fact take the place of the Master resulting in the same outcome for the Job. The Slaves are typically going to be remote services, but could also be local threads of execution. The messages sent by the Master to the Slaves in this pattern do not need to be durable, or have guaranteed delivery: Spring Batch meta-data in the &lt;code&gt;JobRepository&lt;/code&gt; will ensure that each Slave is executed once and only once for each Job execution.&lt;br&gt;If required, we can pass data from the master to the slave. The meta data (i.e. the JobRepository), makes sure that every slave is executed only once in a single execution of the Job.&lt;br&gt;
    
    </summary>
    
      <category term="Spring-Batch" scheme="https://nirajsonawane.github.io/categories/Spring-Batch/"/>
    
    
      <category term="Spring" scheme="https://nirajsonawane.github.io/tags/Spring/"/>
    
      <category term="Spring-Batch" scheme="https://nirajsonawane.github.io/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Angular Material Tabs with Router</title>
    <link href="https://nirajsonawane.github.io/2018/10/27/Angular-Material-Tabs-with-Router/"/>
    <id>https://nirajsonawane.github.io/2018/10/27/Angular-Material-Tabs-with-Router/</id>
    <published>2018-10-27T04:28:55.000Z</published>
    <updated>2018-12-11T15:48:18.176Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/10/27/Angular-Material-Tabs-with-Router/angular.png"> <p>In this article, I will show you how to Use <strong>Angular Material Tab Component with Angular Routing</strong>. The Article is based on <strong>Angular 6</strong>.<br>We will Create small application using angular cli and will add needed component step by step.</p><h2 id="Step-1-Create-Angular-6-Project"><a href="#Step-1-Create-Angular-6-Project" class="headerlink" title="Step 1: Create Angular 6 Project"></a>Step 1: Create Angular 6 Project</h2><figure class="highlight javascript"><figcaption><span>Run the command in angular cli</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng <span class="keyword">new</span> angular-material-tab-router</span><br></pre></td></tr></table></figure><h2 id="Step-2-Add-Angular-material-to-project"><a href="#Step-2-Add-Angular-material-to-project" class="headerlink" title="Step 2: Add Angular material to project"></a>Step 2: Add Angular material to project</h2><figure class="highlight javascript"><figcaption><span>Run the command in angular cli</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @angular/material @angular/cdk @angular/animations</span><br></pre></td></tr></table></figure><h2 id="Step-3-Add-Angular-PreBuild-Theme-to-project"><a href="#Step-3-Add-Angular-PreBuild-Theme-to-project" class="headerlink" title="Step 3: Add Angular  PreBuild Theme to project."></a>Step 3: Add Angular  PreBuild Theme to project.</h2><p>We will be using indigo-pink Theme.<br><figure class="highlight css"><figcaption><span>styless.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"~@angular/material/prebuilt-themes/indigo-pink.css"</span>;</span><br></pre></td></tr></table></figure><br><a id="more"></a></p><h2 id="Step-4-Add-BrowserAnimationsModule"><a href="#Step-4-Add-BrowserAnimationsModule" class="headerlink" title="Step 4: Add BrowserAnimationsModule"></a>Step 4: Add BrowserAnimationsModule</h2><figure class="highlight"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;BrowserAnimationsModule&#125; from '@angular/platform-browser/animations';</span><br></pre></td></tr></table></figure><h2 id="Step-5-Add-Angular-Material-Toolbar-amp-Tabs"><a href="#Step-5-Add-Angular-Material-Toolbar-amp-Tabs" class="headerlink" title="Step 5: Add Angular Material Toolbar &amp; Tabs."></a>Step 5: Add Angular Material Toolbar &amp; Tabs.</h2><p>In the most situations, a Material toolbar will be placed at the top of your application and will only have a single row that includes the title of your application.</p><figure class="highlight"><figcaption><span>app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;mat-toolbar color="primary"&gt;</span><br><span class="line">&lt;span&gt; Angular Material App With Tab and Routing &lt;/span&gt;</span><br><span class="line">&lt;span class="example-fill-remaining-space"&gt;&lt;/span&gt;  </span><br><span class="line">&lt;/mat-toolbar&gt; </span><br></pre></td></tr></table></figure><p><strong>Angular Material Tabs</strong> organize content into separate views where only one view can be visible at a time. Each tab’s label is shown in the tab header and the active tab’s label is designated with the animated ink bar. When the list of tab labels exceeds the width of the header, pagination controls appear to let the user scroll left and right across the labels.<br><figure class="highlight plain"><figcaption><span>app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mat-tab-group&gt;</span><br><span class="line">&lt;mat-tab label=&quot;First&quot;&gt; Content 1 &lt;/mat-tab&gt;</span><br><span class="line">&lt;mat-tab label=&quot;Second&quot;&gt; Content 2 &lt;/mat-tab&gt;</span><br><span class="line">&lt;mat-tab label=&quot;Third&quot;&gt; Content 3 &lt;/mat-tab&gt;</span><br><span class="line">&lt;/mat-tab-group&gt;</span><br></pre></td></tr></table></figure></p><p>Add corresponding imports in <code>app.module.ts</code><br><figure class="highlight plain"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123;MatToolbarModule&#125; from &apos;@angular/material/toolbar&apos;;</span><br><span class="line">import &#123;MatTabsModule&#125; from &apos;@angular/material/tabs&apos;;</span><br><span class="line">import &#123;BrowserAnimationsModule&#125; from &apos;@angular/platform-browser/animations&apos;;</span><br><span class="line"></span><br><span class="line"> imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    MatToolbarModule,</span><br><span class="line">    MatTabsModule,</span><br><span class="line">    BrowserAnimationsModule,</span><br><span class="line">    AppRoutingModule,</span><br><span class="line">    </span><br><span class="line">  ],</span><br></pre></td></tr></table></figure></p><p><strong>Now  we have integrated  Material MatTabsModule in  our application.</strong>  Start application<br><code>ng serve</code></p><img src="/2018/10/27/Angular-Material-Tabs-with-Router/angular1.png"> <h2 id="Step-6-Add-Routing-module-to-application"><a href="#Step-6-Add-Routing-module-to-application" class="headerlink" title="Step 6: Add Routing module to application"></a>Step 6: Add Routing module to application</h2><p>An Angular best practice is to load and configure the router in a separate, top-level module that is dedicated to routing and imported by the root AppModule.<br>By convention, the module class name is <code>AppRoutingModule</code> and it belongs in the <code>app-routing.module.ts</code> in the <code>src/app</code> folder.<br><figure class="highlight javascript"><figcaption><span>Run the command in angular cli</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ng generate <span class="built_in">module</span> app-routing --flat --<span class="built_in">module</span>=app</span><br><span class="line"></span><br><span class="line"><span class="comment">//Also generate some test component using cli </span></span><br><span class="line">ng generate component componenet1</span><br><span class="line">ng generate component componenet2</span><br><span class="line">ng generate component componenet3</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="Step-7-Initialize-and-Add-Routes"><a href="#Step-7-Initialize-and-Add-Routes" class="headerlink" title="Step 7: Initialize and Add Routes"></a>Step 7: Initialize and Add Routes</h2><p>Routes tell the router which view to display when a user clicks a link or pastes a URL into the browser address bar.<br>A typical Angular Route has two properties:</p><ul><li>Path: a string that matches the URL in the browser address bar.</li><li>Component: the component that the router should create when navigating to this route.</li></ul><p>This is how the <code>app-routing.module.ts</code> will look like after adding routes.<br><figure class="highlight javascript"><figcaption><span>app-routing.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule, Routes &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Componenet1Component &#125; <span class="keyword">from</span> <span class="string">'./componenet1/componenet1.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Componenet2Component &#125; <span class="keyword">from</span> <span class="string">'./componenet2/componenet2.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Componenet3Component &#125; <span class="keyword">from</span> <span class="string">'./componenet3/componenet3.component'</span>;</span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">redirectTo</span>: <span class="string">'/first'</span>, <span class="attr">pathMatch</span>: <span class="string">'full'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'first'</span>, <span class="attr">component</span>:  Componenet1Component&#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'second'</span>, <span class="attr">component</span>:  Componenet2Component&#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'third'</span>, <span class="attr">component</span>: Componenet3Component&#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRouting = RouterModule.forRoot(routes);</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    RouterModule.forRoot(routes),</span><br><span class="line">    CommonModule</span><br><span class="line">  ],</span><br><span class="line">  exports: [ RouterModule ],</span><br><span class="line">  declarations: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Step-7-Tabs-and-Navigation"><a href="#Step-7-Tabs-and-Navigation" class="headerlink" title="Step 7 : Tabs and Navigation"></a>Step 7 : Tabs and Navigation</h2><p>While <code>&lt;mat-tab-group&gt;</code> is used to switch between views within a single route, <code>&lt;nav mat-tab-nav-bar&gt;</code> provides a tab-like UI for navigating between routes.<br>let’s update <code>&lt;mat-tab-group&gt;</code> to <code>&lt;nav mat-tab-nav-bar&gt;</code></p><figure class="highlight javascript"><figcaption><span>app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav mat-tab-nav-bar&gt;</span><br><span class="line">&lt;a mat-tab-link</span><br><span class="line">*ngFor=<span class="string">"let link of navLinks"</span></span><br><span class="line">[routerLink]=<span class="string">"link.link"</span></span><br><span class="line">routerLinkActive #rla="routerLinkActive"</span><br><span class="line">[active]=<span class="string">"rla.isActive"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>nav&gt;</span><br><span class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;</span><br></pre></td></tr></table></figure><p><strong> Setup navLinks </strong><br>In the <code>app.component.ts</code> , I have initialized navLinks with a routeLinks array in the constructor. Also note that <code>ngOnInit()</code> function is responsible to maintaining  Tab selection.  </p><figure class="highlight javascript"><figcaption><span>AppComponent.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;MatToolbarModule&#125; <span class="keyword">from</span> <span class="string">'@angular/material/toolbar'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  title = <span class="string">'angular-material-tab-router'</span>;  </span><br><span class="line">  navLinks: any[];</span><br><span class="line">  activeLinkIndex = <span class="number">-1</span>; </span><br><span class="line">  <span class="keyword">constructor</span>(private router: Router) &#123;</span><br><span class="line">    <span class="keyword">this</span>.navLinks = [</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'First'</span>,</span><br><span class="line">            link: <span class="string">'./first'</span>,</span><br><span class="line">            index: <span class="number">0</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            label: <span class="string">'Second'</span>,</span><br><span class="line">            link: <span class="string">'./second'</span>,</span><br><span class="line">            index: <span class="number">1</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            label: <span class="string">'Third'</span>,</span><br><span class="line">            link: <span class="string">'./third'</span>,</span><br><span class="line">            index: <span class="number">2</span></span><br><span class="line">        &#125;, </span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line">ngOnInit(): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.router.events.subscribe(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.activeLinkIndex = <span class="keyword">this</span>.navLinks.indexOf(<span class="keyword">this</span>.navLinks.find(<span class="function"><span class="params">tab</span> =&gt;</span> tab.link === <span class="string">'.'</span> + <span class="keyword">this</span>.router.url));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Working application will look like below</em><br><img src="/2018/10/27/Angular-Material-Tabs-with-Router/angular2.png"> </p><p><strong> References </strong><br><a href="https://material.angular.io/components/" target="_blank" rel="noopener">Material Components</a><br><a href="https://angular.io/docs" target="_blank" rel="noopener">Angular </a></p><p><a href="https://github.com/nirajsonawane/angular-material-tab-router.git" target="_blank" rel="noopener">Github Link of Solution </a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/10/27/Angular-Material-Tabs-with-Router/angular.png&quot;&gt; 
&lt;p&gt;In this article, I will show you how to Use &lt;strong&gt;Angular Material Tab Component with Angular Routing&lt;/strong&gt;. The Article is based on &lt;strong&gt;Angular 6&lt;/strong&gt;.&lt;br&gt;We will Create small application using angular cli and will add needed component step by step.&lt;/p&gt;
&lt;h2 id=&quot;Step-1-Create-Angular-6-Project&quot;&gt;&lt;a href=&quot;#Step-1-Create-Angular-6-Project&quot; class=&quot;headerlink&quot; title=&quot;Step 1: Create Angular 6 Project&quot;&gt;&lt;/a&gt;Step 1: Create Angular 6 Project&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Run the command in angular cli&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ng &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; angular-material-tab-router&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Step-2-Add-Angular-material-to-project&quot;&gt;&lt;a href=&quot;#Step-2-Add-Angular-material-to-project&quot; class=&quot;headerlink&quot; title=&quot;Step 2: Add Angular material to project&quot;&gt;&lt;/a&gt;Step 2: Add Angular material to project&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Run the command in angular cli&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save @angular/material @angular/cdk @angular/animations&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Step-3-Add-Angular-PreBuild-Theme-to-project&quot;&gt;&lt;a href=&quot;#Step-3-Add-Angular-PreBuild-Theme-to-project&quot; class=&quot;headerlink&quot; title=&quot;Step 3: Add Angular  PreBuild Theme to project.&quot;&gt;&lt;/a&gt;Step 3: Add Angular  PreBuild Theme to project.&lt;/h2&gt;&lt;p&gt;We will be using indigo-pink Theme.&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;figcaption&gt;&lt;span&gt;styless.css&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;~@angular/material/prebuilt-themes/indigo-pink.css&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://nirajsonawane.github.io/categories/Angular/"/>
    
    
      <category term="Angular6" scheme="https://nirajsonawane.github.io/tags/Angular6/"/>
    
      <category term="Material" scheme="https://nirajsonawane.github.io/tags/Material/"/>
    
      <category term="Navigation" scheme="https://nirajsonawane.github.io/tags/Navigation/"/>
    
      <category term="Routing" scheme="https://nirajsonawane.github.io/tags/Routing/"/>
    
  </entry>
  
</feed>
