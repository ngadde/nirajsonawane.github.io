<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niraj Sonawane</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nirajsonawane.github.io/"/>
  <updated>2018-12-06T15:40:49.050Z</updated>
  <id>https://nirajsonawane.github.io/</id>
  
  <author>
    <name>Niraj Sonawane</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Applying Reactive Programing to Existing Batch Application- RXJava2</title>
    <link href="https://nirajsonawane.github.io/2018/12/06/Applying-Reactive-Programing-to-Existing-Batch-Application-RXJava2/"/>
    <id>https://nirajsonawane.github.io/2018/12/06/Applying-Reactive-Programing-to-Existing-Batch-Application-RXJava2/</id>
    <published>2018-12-06T05:10:55.000Z</published>
    <updated>2018-12-06T15:40:49.050Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/12/06/Applying-Reactive-Programing-to-Existing-Batch-Application-RXJava2/Reactive-Extensions.png"> <p>Today, I will share my experience of migrating our existing Spring batch application to reactive programing model using <strong>ReactiveX</strong> extensions.<br>The goal is to explain, What is <strong>ReactiveX-RXjava2</strong> and demonstrating Working example.</p><h2 id="What-is-ReactiveX-And-RxJava"><a href="#What-is-ReactiveX-And-RxJava" class="headerlink" title="What is ReactiveX And RxJava"></a>What is ReactiveX And RxJava</h2><p><strong>ReactiveX</strong> Is An API for asynchronous programming with observable streams.ReactiveX is a  combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming.</p><p><strong>RxJava</strong> is the Java implementation of ReactiveX. RxJava provides Java API for asynchronous programming with observable streams.<br><a href="http://reactivex.io/" target="_blank" rel="noopener">ReactiveX</a></p><h2 id="Why-Reactive-programming"><a href="#Why-Reactive-programming" class="headerlink" title="Why Reactive programming?"></a>Why Reactive programming?</h2><p> For Me Reactive Programming is a development model focus around <em>Asynchronous Data Streams</em>.<br> In Reactive programming, <em>Data streams</em> are the center part of your application. Mesages ,Events, Errors ,Event chains ,call etc  are going to be conveyed As a data stream.<br> <code>Reactive programming provides a simple way of asynchronous programming.</code></p><h2 id="Migration-Story"><a href="#Migration-Story" class="headerlink" title="Migration Story"></a>Migration Story</h2><p>The Batch application was very traditional use case of file processing. Processing includes Multiple complex Steps.<br>To Stimulate Similar processing with less complexity, I have created small <code>Spring-Batch</code> application that process csv file containing <em>FirstName,LastName and Age</em>. Processing includes below Steps.</p><ol><li>Validations - Age Should not be more than 100 years.</li><li>Enrichment 1 - Upper Case First Name.        </li><li>Enrichment 2 - Upper Case Last Name.        </li><li>Segregation  - Based on Age, Categories Person As Teenager, YoungAdult or Senior Citizens.         </li><li>Database Insert- Based on Age Group insert person in associate table.</li></ol><p><a href="https://github.com/nirajsonawane/spring-batch-csv-processor" target="_blank" rel="noopener">The complete source code Spring-Batch Implementation</a><br><a href="https://github.com/nirajsonawane/rxjava2-csvprocessor" target="_blank" rel="noopener">The complete source code RXJava2 Implementation</a></p><h2 id="Let’s-Start-with-RXJava2-Implementation"><a href="#Let’s-Start-with-RXJava2-Implementation" class="headerlink" title="Let’s Start with RXJava2 Implementation"></a>Let’s Start with RXJava2 Implementation</h2><h4 id="Building-blocks-for-RxJava"><a href="#Building-blocks-for-RxJava" class="headerlink" title="Building blocks for RxJava"></a>Building blocks for RxJava</h4><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="noopener">Observables</a> Representing sources of data<br><a href="http://reactivex.io/RxJava/javadoc/rx/Subscriber.html" target="_blank" rel="noopener">Subscribers or observers</a> listening to the observables<br><a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">Operators</a> Operators create  Observables Or Transform data or operate on an Observable and return an Observable set of methods for modifying and composing the data.</p><h4 id="Step-1-Creating-Observable-on-Input-File"><a href="#Step-1-Creating-Observable-on-Input-File" class="headerlink" title="Step 1 : Creating Observable on Input File"></a>Step 1 : Creating Observable on Input File</h4><p><code>ObServable</code> is Responsible for reading data from file and passing it to Subscriber.There are multiple ways by which we create Observable. For reading data from file we will use <code>defer()</code> operator.<br><strong>The defer()</strong> operator does not create the Observable until the observer subscribes, and create a fresh Observable for each observer.</p><figure class="highlight java"><figcaption><span>Create Observable</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Observable&lt;Person&gt; observable = Observable.defer(() -&gt; <span class="keyword">new</span> CsvFileObservableSource(filePath))</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvFileObservableSource</span> <span class="keyword">implements</span> <span class="title">ObservableSource</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(CsvFileObservableSource.class);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String filename;</span><br><span class="line">CsvFileObservableSource(String filename) &#123;</span><br><span class="line"><span class="keyword">this</span>.filename = filename; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Person&gt; observer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Files.lines(Paths.get(filename)).forEach(inputLine -&gt; &#123;</span><br><span class="line">String[] split = inputLine.split(<span class="string">","</span>);</span><br><span class="line"><span class="comment">//Send data </span></span><br><span class="line">                observer.onNext(    </span><br><span class="line">Person.builder()</span><br><span class="line">.firstName(split[<span class="number">0</span>])</span><br><span class="line">.lastName(split[<span class="number">1</span>])</span><br><span class="line">.age(Integer.parseInt(split[<span class="number">2</span>]))</span><br><span class="line">.build());</span><br><span class="line">&#125;);</span><br><span class="line">observer.onComplete(); <span class="comment">// No more data to be send </span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">observer.onError(e); <span class="comment">// Some error , send error information to subscriber. </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step-2-Subscribe-to-Observable"><a href="#Step-2-Subscribe-to-Observable" class="headerlink" title="Step 2 : Subscribe to  Observable"></a>Step 2 : Subscribe to  Observable</h4><p><code>observable.subscribe(onNext,onError,onComplete);</code>Provide onNext,onError,onComplete consumers<br>The Subscriber will print the values line by line read from file.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(</span><br><span class="line">person -&gt; System.out::println, </span><br><span class="line">Throwable::printStackTrace, </span><br><span class="line">() -&gt; System.out::println(<span class="string">"I am Done"</span>);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="Step-3-Add-Processing-logic-using-Operators"><a href="#Step-3-Add-Processing-logic-using-Operators" class="headerlink" title="Step 3 : Add Processing logic using Operators"></a>Step 3 : Add Processing logic using Operators</h3><p>Now Process the elements read from the file using operators like <code>filter</code> &amp; <code>map</code> This is similar to java 8 stream.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Observable&lt;List&lt;Person&gt;&gt; observable = Observable.defer(() -&gt; <span class="keyword">new</span> CsvFileObservableSource(filePath))</span><br><span class="line">.filter(ValidationProcessor::process)</span><br><span class="line">.map(FirstNameProcessor::process)</span><br><span class="line">.map(LastNameProcessor::process)</span><br><span class="line">.map(AgeProcessor::process)</span><br><span class="line">.buffer(chunkSize);</span><br></pre></td></tr></table></figure><br><strong>Note</strong> If you observe,<code>Observable</code> is of Type <code>List&lt;Person&gt;</code> instead of <code>&lt;Person&gt;</code> . This is because we want to process data in chunk and not as individual data item. This capability is provided by <code>buffer</code> operator.</p><p><strong>Buffer</strong><br>periodically gather items emitted by an Observable into bundles and emit these bundles rather than emitting the items one at a time.</p><h3 id="Step-4-Group-Person-elements-and-Insert-in-different-Tables"><a href="#Step-4-Group-Person-elements-and-Insert-in-different-Tables" class="headerlink" title="Step 4 : Group Person elements and Insert in different Tables"></a>Step 4 : Group Person elements and Insert in different Tables</h3><p>Now Based on Age, We want to Categories Person As Teenager, YoungAdult or Senior Citizens.<br><strong>GroupBy Operator</strong><br>Divide an Observable into a set of Observables that each emit a different subset of items from the original Observable.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> Observable&lt;GroupedObservable&lt;String, Person&gt;&gt; groupObservable = Observable</span><br><span class="line">.defer(() -&gt; <span class="keyword">new</span> CsvFileObservableSource(filePath))</span><br><span class="line">.filter(ValidationProcessor::process)</span><br><span class="line">.map(FirstNameProcessor::process)</span><br><span class="line">.map(LastNameProcessor::process)</span><br><span class="line">.map(AgeProcessor::process)</span><br><span class="line">.groupBy(Person::getAgeGroup);</span><br><span class="line"></span><br><span class="line">groupObservable.subscribe(s -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"TEENAGER"</span>.equals(s.getKey())) &#123;</span><br><span class="line">s.buffer(chunkSize).subscribe(daoServiceImpl::insertTeenagerList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"YOUNGADULT"</span>.equals(s.getKey())) &#123;</span><br><span class="line">s.buffer(chunkSize).subscribe(daoServiceImpl::insertYoungadultList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"SENIORCITIZENS"</span>.equals(s.getKey())) &#123;</span><br><span class="line">s.buffer(chunkSize).subscribe(daoServiceImpl::insertSeniorcitizensList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, Throwable::printStackTrace, () -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"File Processing Complited"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><a href="https://github.com/nirajsonawane/rxjava2-csvprocessor" target="_blank" rel="noopener">The complete source code RXJava2 Implementation</a></p><p>There are other important aspect like <strong>Error Handling</strong>, <strong>Backpressure</strong> and <strong>Multithreading</strong> are not in scope of this article. I will try to cover them in upcoming articles.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/12/06/Applying-Reactive-Programing-to-Existing-Batch-Application-RXJava2/Reactive-Extensions.png&quot;&gt; 
&lt;p&gt;Today, I will share m
      
    
    </summary>
    
      <category term="RXJava-2" scheme="https://nirajsonawane.github.io/categories/RXJava-2/"/>
    
    
      <category term="RXjava" scheme="https://nirajsonawane.github.io/tags/RXjava/"/>
    
      <category term="ReactiveX" scheme="https://nirajsonawane.github.io/tags/ReactiveX/"/>
    
      <category term="Functional Programming" scheme="https://nirajsonawane.github.io/tags/Functional-Programming/"/>
    
      <category term="Reactive Programming" scheme="https://nirajsonawane.github.io/tags/Reactive-Programming/"/>
    
      <category term="Streams" scheme="https://nirajsonawane.github.io/tags/Streams/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch - Process Multiple Files Parallel</title>
    <link href="https://nirajsonawane.github.io/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/"/>
    <id>https://nirajsonawane.github.io/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/</id>
    <published>2018-11-08T11:47:22.000Z</published>
    <updated>2018-11-10T23:15:26.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/wild-flowers-571940_1920.jpg"> <p>Photo Credit <a href="https://pixabay.com/photo-571940/" target="_blank" rel="noopener">Pixabay</a></p><p>Today, We will discuss how we can Process Multiple Files Concurrently using Spring Batch.</p><p><strong><em>Prerequisite</em></strong> Basic knowledge of Spring &amp; Spring Batch Framework is Required.</p><p><strong><em>Background</em></strong><br>Spring Batch is a lightweight, comprehensive batch framework designed to enable the development of robust batch applications vital for the daily operations of enterprise systems. Spring Batch builds upon the characteristics of the Spring Framework that people have come to expect (productivity, POJO-based development approach, and general ease of use), while making it easy for developers to access and leverage more advance enterprise services when necessary.</p><p><strong><em>Scaling and Parallel Processing</em></strong> Spring Batch Offers Multiple options for Scaling and Parallel Processing. At very high level these are separated in below categories.  </p><ol><li>Multi-threaded Step</li><li>Parallel Steps</li><li>Remote Chunking</li><li>Partitioning</li></ol><p>For Processing Multiple Files we will be using <em>Partitioning</em>.</p><p><strong><em>Partitioning</em></strong><br><img src="/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/partitioning-overview.png"><br>The Job is executing on the left hand side as a sequence of Steps, and one of the Steps is labelled as a Master. The Slaves in this picture are all identical instances of a Step, which could in fact take the place of the Master resulting in the same outcome for the Job. The Slaves are typically going to be remote services, but could also be local threads of execution. The messages sent by the Master to the Slaves in this pattern do not need to be durable, or have guaranteed delivery: Spring Batch meta-data in the <code>JobRepository</code> will ensure that each Slave is executed once and only once for each Job execution.<br>If required, we can pass data from the master to the slave. The meta data (i.e. the JobRepository), makes sure that every slave is executed only once in a single execution of the Job.</p><p><strong><em>Demo Application For processing Multiple Files Concurrently</em></strong>  We will extend the Spring Batch Sample Application provided on Getting Stated guide <a href="https://spring.io/guides/gs/batch-processing/" target="_blank" rel="noopener">Here</a></p><p>Sample Application : Sample application imports data from a CSV spreadsheet, transforms it with custom code, and stores the final results in a database. We will add the capability of Processing <strong><strong>Multiple Files Concurrently</strong></strong> Step by Step.</p><p><strong><em>Defining <code>Partitioner</code> bean  using <code>MultiResourcePartitioner</code></em></strong><br><code>MultiResourcePartitioner</code> is Implementation of <code>Partitioner</code> that locates multiple resources and associates their file names with execution context keys. Creates an ExecutionContext per resource, and labels them as {partition0, partition1, …, partitionN}.<br><figure class="highlight java"><figcaption><span>MultiResourcePartitioner Bean Configuration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Bean</span>(<span class="string">"partitioner"</span>)</span><br><span class="line"><span class="meta">@StepScope</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Partitioner <span class="title">partitioner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"In Partitioner"</span>);</span><br><span class="line">MultiResourcePartitioner partitioner = <span class="keyword">new</span> MultiResourcePartitioner();</span><br><span class="line">ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">Resource[] resources = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resources = resolver.getResources(<span class="string">"/*.csv"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">partitioner.setResources(resources);</span><br><span class="line">partitioner.partition(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> partitioner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong><em>Configuration of Master Step</em></strong><br><figure class="highlight java"><figcaption><span>Master Step & TaskExcecutor Configuration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"masterStep"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">masterStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"masterStep"</span>)</span><br><span class="line">.partitioner(<span class="string">"step1"</span>, partitioner())</span><br><span class="line">.step(step1())</span><br><span class="line">.taskExecutor(taskExecutor())</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">taskExecutor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">taskExecutor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">taskExecutor.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">taskExecutor.afterPropertiesSet();</span><br><span class="line"><span class="keyword">return</span> taskExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong><em>Binding Input Data to Steps: Passing File Name</em></strong><br>This can be done using  <code>StepScope</code> feature of Spring Batch.<code>StepScope</code> Allows the late binding.<br>We need to Read filename from the <code>stepExecutionContext</code> as shown below.<br><figure class="highlight java"><figcaption><span>FlatFileItemReader Configuration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@StepScope</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"personItemReader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;Person&gt; <span class="title">personItemReader</span><span class="params">(@Value(<span class="string">"#&#123;stepExecutionContext['fileName']&#125;"</span>)</span> String filename) <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line"></span><br><span class="line">       log.info(<span class="string">"In Reader"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FlatFileItemReaderBuilder&lt;Person&gt;()</span><br><span class="line">                        .name(<span class="string">"personItemReader"</span>)</span><br><span class="line">.delimited()</span><br><span class="line">.names(<span class="keyword">new</span> String[] &#123; <span class="string">"firstName"</span>, <span class="string">"lastName"</span> &#125;)</span><br><span class="line">.fieldSetMapper(<span class="keyword">new</span> BeanWrapperFieldSetMapper&lt;Person&gt;() &#123;</span><br><span class="line">&#123;</span><br><span class="line">setTargetType(Person.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.resource(<span class="keyword">new</span> UrlResource(filename))</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong><em>Configuration of slave Step</em></strong><br><figure class="highlight java"><figcaption><span>Slave Step Configuration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"step1"</span>)</span><br><span class="line">.&lt;Person, Person&gt;chunk(<span class="number">10</span>)</span><br><span class="line">.processor(processor())</span><br><span class="line">.writer(writer)</span><br><span class="line">.reader(personItemReader)</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Now if we Launch the application, In logs we can see each file is getting process by separate thread.<br><img src="/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/output.png"><br><strong> References </strong><br><a href="https://spring.io/guides/gs/batch-processing/" target="_blank" rel="noopener">Spring Batch getting Started </a><br><a href="https://docs.spring.io/spring-batch/4.0.x/reference/html/scalability.html#scalability" target="_blank" rel="noopener">Scaling and Parallel Processing</a><br><a href="https://docs.spring.io/spring-batch/4.0.x/reference/html/scalability.html#partitioning" target="_blank" rel="noopener">Partitioning</a><br><a href="https://github.com/nirajsonawane/parallel-file-processor.git" target="_blank" rel="noopener">Github Link of Solution </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/11/08/Spring-Batch-Process-Multiple-Files-Parallel/wild-flowers-571940_1920.jpg&quot;&gt; 
&lt;p&gt;Photo Credit &lt;a href=&quot;https://pixabay.
      
    
    </summary>
    
      <category term="Spring-Batch" scheme="https://nirajsonawane.github.io/categories/Spring-Batch/"/>
    
    
      <category term="Spring" scheme="https://nirajsonawane.github.io/tags/Spring/"/>
    
      <category term="Spring-Batch" scheme="https://nirajsonawane.github.io/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Angular Material Tabs with Router</title>
    <link href="https://nirajsonawane.github.io/2018/10/27/Angular-Material-Tabs-with-Router/"/>
    <id>https://nirajsonawane.github.io/2018/10/27/Angular-Material-Tabs-with-Router/</id>
    <published>2018-10-27T04:28:55.000Z</published>
    <updated>2018-10-28T15:30:18.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/10/27/Angular-Material-Tabs-with-Router/angular.png"> <p>In this article, I will show you how to Use <strong>Angular Material Tab Component with Angular Routing</strong>. The Article is based on <strong>Angular 6</strong>.<br>We will Create small application using angular cli and will add needed component step by step.</p><h2 id="Step-1-Create-Angular-6-Project"><a href="#Step-1-Create-Angular-6-Project" class="headerlink" title="Step 1: Create Angular 6 Project"></a>Step 1: Create Angular 6 Project</h2><figure class="highlight javascript"><figcaption><span>Run the command in angular cli</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng <span class="keyword">new</span> angular-material-tab-router</span><br></pre></td></tr></table></figure><h2 id="Step-2-Add-Angular-material-to-project"><a href="#Step-2-Add-Angular-material-to-project" class="headerlink" title="Step 2: Add Angular material to project"></a>Step 2: Add Angular material to project</h2><figure class="highlight javascript"><figcaption><span>Run the command in angular cli</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @angular/material @angular/cdk @angular/animations</span><br></pre></td></tr></table></figure><h2 id="Step-3-Add-Angular-PreBuild-Theme-to-project"><a href="#Step-3-Add-Angular-PreBuild-Theme-to-project" class="headerlink" title="Step 3: Add Angular  PreBuild Theme to project."></a>Step 3: Add Angular  PreBuild Theme to project.</h2><p>We will be using indigo-pink Theme.<br><figure class="highlight css"><figcaption><span>styless.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"~@angular/material/prebuilt-themes/indigo-pink.css"</span>;</span><br></pre></td></tr></table></figure></p><h2 id="Step-4-Add-BrowserAnimationsModule"><a href="#Step-4-Add-BrowserAnimationsModule" class="headerlink" title="Step 4: Add BrowserAnimationsModule"></a>Step 4: Add BrowserAnimationsModule</h2><figure class="highlight"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;BrowserAnimationsModule&#125; from '@angular/platform-browser/animations';</span><br></pre></td></tr></table></figure><h2 id="Step-5-Add-Angular-Material-Toolbar-amp-Tabs"><a href="#Step-5-Add-Angular-Material-Toolbar-amp-Tabs" class="headerlink" title="Step 5: Add Angular Material Toolbar &amp; Tabs."></a>Step 5: Add Angular Material Toolbar &amp; Tabs.</h2><p>In the most situations, a Material toolbar will be placed at the top of your application and will only have a single row that includes the title of your application.</p><figure class="highlight"><figcaption><span>app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;mat-toolbar color="primary"&gt;</span><br><span class="line">&lt;span&gt; Angular Material App With Tab and Routing &lt;/span&gt;</span><br><span class="line">&lt;span class="example-fill-remaining-space"&gt;&lt;/span&gt;  </span><br><span class="line">&lt;/mat-toolbar&gt; </span><br></pre></td></tr></table></figure><p><strong>Angular Material Tabs</strong> organize content into separate views where only one view can be visible at a time. Each tab’s label is shown in the tab header and the active tab’s label is designated with the animated ink bar. When the list of tab labels exceeds the width of the header, pagination controls appear to let the user scroll left and right across the labels.<br><figure class="highlight plain"><figcaption><span>app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mat-tab-group&gt;</span><br><span class="line">&lt;mat-tab label=&quot;First&quot;&gt; Content 1 &lt;/mat-tab&gt;</span><br><span class="line">&lt;mat-tab label=&quot;Second&quot;&gt; Content 2 &lt;/mat-tab&gt;</span><br><span class="line">&lt;mat-tab label=&quot;Third&quot;&gt; Content 3 &lt;/mat-tab&gt;</span><br><span class="line">&lt;/mat-tab-group&gt;</span><br></pre></td></tr></table></figure></p><p>Add corresponding imports in <code>app.module.ts</code><br><figure class="highlight plain"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123;MatToolbarModule&#125; from &apos;@angular/material/toolbar&apos;;</span><br><span class="line">import &#123;MatTabsModule&#125; from &apos;@angular/material/tabs&apos;;</span><br><span class="line">import &#123;BrowserAnimationsModule&#125; from &apos;@angular/platform-browser/animations&apos;;</span><br><span class="line"></span><br><span class="line"> imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    MatToolbarModule,</span><br><span class="line">    MatTabsModule,</span><br><span class="line">    BrowserAnimationsModule,</span><br><span class="line">    AppRoutingModule,</span><br><span class="line">    </span><br><span class="line">  ],</span><br></pre></td></tr></table></figure></p><p><strong>Now  we have integrated  Material MatTabsModule in  our application.</strong>  Start application<br><code>ng serve</code></p><img src="/2018/10/27/Angular-Material-Tabs-with-Router/angular1.png"> <h2 id="Step-6-Add-Routing-module-to-application"><a href="#Step-6-Add-Routing-module-to-application" class="headerlink" title="Step 6: Add Routing module to application"></a>Step 6: Add Routing module to application</h2><p>An Angular best practice is to load and configure the router in a separate, top-level module that is dedicated to routing and imported by the root AppModule.<br>By convention, the module class name is <code>AppRoutingModule</code> and it belongs in the <code>app-routing.module.ts</code> in the <code>src/app</code> folder.<br><figure class="highlight javascript"><figcaption><span>Run the command in angular cli</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ng generate <span class="built_in">module</span> app-routing --flat --<span class="built_in">module</span>=app</span><br><span class="line"></span><br><span class="line"><span class="comment">//Also generate some test component using cli </span></span><br><span class="line">ng generate component componenet1</span><br><span class="line">ng generate component componenet2</span><br><span class="line">ng generate component componenet3</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="Step-7-Initialize-and-Add-Routes"><a href="#Step-7-Initialize-and-Add-Routes" class="headerlink" title="Step 7: Initialize and Add Routes"></a>Step 7: Initialize and Add Routes</h2><p>Routes tell the router which view to display when a user clicks a link or pastes a URL into the browser address bar.<br>A typical Angular Route has two properties:</p><ul><li>Path: a string that matches the URL in the browser address bar.</li><li>Component: the component that the router should create when navigating to this route.</li></ul><p>This is how the <code>app-routing.module.ts</code> will look like after adding routes.<br><figure class="highlight javascript"><figcaption><span>app-routing.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule, Routes &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Componenet1Component &#125; <span class="keyword">from</span> <span class="string">'./componenet1/componenet1.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Componenet2Component &#125; <span class="keyword">from</span> <span class="string">'./componenet2/componenet2.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Componenet3Component &#125; <span class="keyword">from</span> <span class="string">'./componenet3/componenet3.component'</span>;</span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">redirectTo</span>: <span class="string">'/first'</span>, <span class="attr">pathMatch</span>: <span class="string">'full'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'first'</span>, <span class="attr">component</span>:  Componenet1Component&#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'second'</span>, <span class="attr">component</span>:  Componenet2Component&#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'third'</span>, <span class="attr">component</span>: Componenet3Component&#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRouting = RouterModule.forRoot(routes);</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    RouterModule.forRoot(routes),</span><br><span class="line">    CommonModule</span><br><span class="line">  ],</span><br><span class="line">  exports: [ RouterModule ],</span><br><span class="line">  declarations: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Step-7-Tabs-and-Navigation"><a href="#Step-7-Tabs-and-Navigation" class="headerlink" title="Step 7 : Tabs and Navigation"></a>Step 7 : Tabs and Navigation</h2><p>While <code>&lt;mat-tab-group&gt;</code> is used to switch between views within a single route, <code>&lt;nav mat-tab-nav-bar&gt;</code> provides a tab-like UI for navigating between routes.<br>let’s update <code>&lt;mat-tab-group&gt;</code> to <code>&lt;nav mat-tab-nav-bar&gt;</code></p><figure class="highlight javascript"><figcaption><span>app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav mat-tab-nav-bar&gt;</span><br><span class="line">&lt;a mat-tab-link</span><br><span class="line">*ngFor=<span class="string">"let link of navLinks"</span></span><br><span class="line">[routerLink]=<span class="string">"link.link"</span></span><br><span class="line">routerLinkActive #rla="routerLinkActive"</span><br><span class="line">[active]=<span class="string">"rla.isActive"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>nav&gt;</span><br><span class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;</span><br></pre></td></tr></table></figure><p><strong> Setup navLinks </strong><br>In the <code>app.component.ts</code> , I have initialized navLinks with a routeLinks array in the constructor. Also note that <code>ngOnInit()</code> function is responsible to maintaining  Tab selection.  </p><figure class="highlight javascript"><figcaption><span>AppComponent.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;MatToolbarModule&#125; <span class="keyword">from</span> <span class="string">'@angular/material/toolbar'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  title = <span class="string">'angular-material-tab-router'</span>;  </span><br><span class="line">  navLinks: any[];</span><br><span class="line">  activeLinkIndex = <span class="number">-1</span>; </span><br><span class="line">  <span class="keyword">constructor</span>(private router: Router) &#123;</span><br><span class="line">    <span class="keyword">this</span>.navLinks = [</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'First'</span>,</span><br><span class="line">            link: <span class="string">'./first'</span>,</span><br><span class="line">            index: <span class="number">0</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            label: <span class="string">'Second'</span>,</span><br><span class="line">            link: <span class="string">'./second'</span>,</span><br><span class="line">            index: <span class="number">1</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            label: <span class="string">'Third'</span>,</span><br><span class="line">            link: <span class="string">'./third'</span>,</span><br><span class="line">            index: <span class="number">2</span></span><br><span class="line">        &#125;, </span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line">ngOnInit(): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.router.events.subscribe(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.activeLinkIndex = <span class="keyword">this</span>.navLinks.indexOf(<span class="keyword">this</span>.navLinks.find(<span class="function"><span class="params">tab</span> =&gt;</span> tab.link === <span class="string">'.'</span> + <span class="keyword">this</span>.router.url));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Working application will look like below</em><br><img src="/2018/10/27/Angular-Material-Tabs-with-Router/angular2.png"> </p><p><strong> References </strong><br><a href="https://material.angular.io/components/" target="_blank" rel="noopener">Material Components</a><br><a href="https://angular.io/docs" target="_blank" rel="noopener">Angular </a></p><p><a href="https://github.com/nirajsonawane/angular-material-tab-router.git" target="_blank" rel="noopener">Github Link of Solution </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/10/27/Angular-Material-Tabs-with-Router/angular.png&quot;&gt; 
&lt;p&gt;In this article, I will show you how to Use &lt;strong&gt;Angular Materi
      
    
    </summary>
    
      <category term="Angular" scheme="https://nirajsonawane.github.io/categories/Angular/"/>
    
    
      <category term="Angular6" scheme="https://nirajsonawane.github.io/tags/Angular6/"/>
    
      <category term="Material" scheme="https://nirajsonawane.github.io/tags/Material/"/>
    
      <category term="Navigation" scheme="https://nirajsonawane.github.io/tags/Navigation/"/>
    
      <category term="Routing" scheme="https://nirajsonawane.github.io/tags/Routing/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 Custom Collector</title>
    <link href="https://nirajsonawane.github.io/2018/09/11/Java-8-Custom-Collector/"/>
    <id>https://nirajsonawane.github.io/2018/09/11/Java-8-Custom-Collector/</id>
    <published>2018-09-11T02:52:10.000Z</published>
    <updated>2018-10-30T07:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/09/11/Java-8-Custom-Collector/laptop-3190194_1920.jpg"> <p>In this Article , we’ll Discuss How we can <strong>Create our own Custom Collector</strong> in java 8 and above.<br>For this article, We will implement <strong>Summary Statistics</strong> For BigDecimal number. </p><h3 id="Java-8-Summary-Statistics"><a href="#Java-8-Summary-Statistics" class="headerlink" title="Java 8 Summary Statistics"></a>Java 8 Summary Statistics</h3><p>Java 8 Provides Summary Statistics for Long,Int &amp; Double. These Summary classes will help you to get count, min, max, sum, and average values.</p><ul><li>LongSummaryStatistics</li><li>IntSummaryStatistics</li><li>DoubleSummaryStatistics</li></ul><h5 id="IntSummaryStatistics-Example"><a href="#IntSummaryStatistics-Example" class="headerlink" title="IntSummaryStatistics Example"></a>IntSummaryStatistics Example</h5><p>In below example we are trying to calculate count, min, max, sum, and average of 1 to 100 Integer.</p><figure class="highlight java"><figcaption><span>Calculate Sum,Min,Max,Count & Average</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">IntSummaryStatistics summaryStatistics = IntStream.range(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line">.summaryStatistics();</span><br><span class="line">System.out.println(summaryStatistics);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="implementing-SummaryStatistics-for-Big-Decimal-numbers"><a href="#implementing-SummaryStatistics-for-Big-Decimal-numbers" class="headerlink" title="implementing SummaryStatistics  for Big Decimal numbers"></a>implementing SummaryStatistics  for Big Decimal numbers</h4><p>Java does not provides inbuilt Summary Statistics class for BigDecimal Number. </p><p>Lets try to implement our own BigDecimal SummaryStatistics.</p><p><strong>Step 1 </strong> : Create Collector</p><figure class="highlight java"><figcaption><span>Calculate Sum,Min,Max,Count & Average</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBigDecimalSummaryCollector</span> <span class="keyword">implements</span> <span class="title">Consumer</span>&lt;<span class="title">BigDecimal</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ROUND_HALF_UP = BigDecimal.ROUND_HALF_UP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer TRANSACTIONS_SCALE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BigDecimal sum = BigDecimal.ZERO.setScale(TRANSACTIONS_SCALE, ROUND_HALF_UP);</span><br><span class="line"><span class="keyword">private</span> BigDecimal minimum = BigDecimal.ZERO.setScale(TRANSACTIONS_SCALE, ROUND_HALF_UP);</span><br><span class="line"><span class="keyword">private</span> BigDecimal maximum = BigDecimal.ZERO.setScale(TRANSACTIONS_SCALE, ROUND_HALF_UP);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Collector&lt;BigDecimal, ?, MyBigDecimalSummaryCollector&gt; myBigDecimalSummaryStatistics() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Collector.of(MyBigDecimalSummaryCollector::<span class="keyword">new</span>, MyBigDecimalSummaryCollector::accept,</span><br><span class="line">MyBigDecimalSummaryCollector::merge);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(BigDecimal t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">firstElementSetup(t);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sum = sum.add(t);</span><br><span class="line">minimum = minimum.min(t);</span><br><span class="line">maximum = maximum.max(t);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyBigDecimalSummaryCollector <span class="title">merge</span><span class="params">(MyBigDecimalSummaryCollector s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">setupFirstElement(s);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sum = sum.add(s.sum);</span><br><span class="line">minimum = minimum.min(s.minimum);</span><br><span class="line">maximum = maximum.max(s.maximum);</span><br><span class="line">count += s.count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupFirstElement</span><span class="params">(MyBigDecimalSummaryCollector s)</span> </span>&#123;</span><br><span class="line">count = s.count;</span><br><span class="line">sum = s.sum;</span><br><span class="line">minimum = s.minimum;</span><br><span class="line">maximum = s.maximum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">firstElementSetup</span><span class="params">(BigDecimal t)</span> </span>&#123;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">sum = t;</span><br><span class="line">minimum = t;</span><br><span class="line">maximum = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getAverage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> BigDecimal.ZERO.setScale(TRANSACTIONS_SCALE, ROUND_HALF_UP);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum.divide(BigDecimal.valueOf(count), TRANSACTIONS_SCALE,</span><br><span class="line">ROUND_HALF_UP);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSum</span><span class="params">(BigDecimal sum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sum = sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getMinimum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> minimum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinimum</span><span class="params">(BigDecimal minimum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.minimum = minimum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getMaximum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> maximum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaximum</span><span class="params">(BigDecimal maximum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maximum = maximum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.count = count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"MyBigDecimalSummaryCollector [sum="</span> + sum + <span class="string">", minimum="</span> + minimum + <span class="string">", maximum="</span> + maximum + <span class="string">", count="</span></span><br><span class="line">+ count + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Step 2 </strong> :</p><figure class="highlight java"><figcaption><span>Use Collector</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MyBigDecimalSummaryCollector collect = IntStream.range(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line">.mapToObj(number -&gt; BigDecimal.valueOf(number))</span><br><span class="line">.collect(MyBigDecimalSummaryCollector.myBigDecimalSummaryStatistics());</span><br><span class="line"></span><br><span class="line">System.out.println(collect);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/09/11/Java-8-Custom-Collector/laptop-3190194_1920.jpg&quot;&gt; 
&lt;p&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Create our ow
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Collector" scheme="https://nirajsonawane.github.io/categories/Java-8/Collector/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Java-9" scheme="https://nirajsonawane.github.io/tags/Java-9/"/>
    
      <category term="Collector" scheme="https://nirajsonawane.github.io/tags/Collector/"/>
    
      <category term="Bigdecimal" scheme="https://nirajsonawane.github.io/tags/Bigdecimal/"/>
    
      <category term="Summary Statistics" scheme="https://nirajsonawane.github.io/tags/Summary-Statistics/"/>
    
  </entry>
  
  <entry>
    <title>Sort Map by Value using Custom Comparator</title>
    <link href="https://nirajsonawane.github.io/2018/09/10/Sort-Map-by-Value-using-Custom-Comparator/"/>
    <id>https://nirajsonawane.github.io/2018/09/10/Sort-Map-by-Value-using-Custom-Comparator/</id>
    <published>2018-09-10T08:33:33.000Z</published>
    <updated>2018-09-10T22:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this Article , we’ll Discuss How we can <strong>Sort map by Value using Comparator</strong> in java 8.</p><figure class="highlight java"><figcaption><span>Name class as key of HashMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String firstName;</span><br><span class="line"> <span class="keyword">private</span> String lastName;</span><br><span class="line">       <span class="comment">//builder </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Name class as key of HashMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Age</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer year;</span><br><span class="line">        <span class="keyword">private</span> Integer month;</span><br><span class="line">        <span class="comment">//builder</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We want to sort Map by <code>Age.Year</code>. </p><figure class="highlight java"><figcaption><span>Sort map by value using Comparator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  Map&lt;Name, Age&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Name name0 = Name.builder().firstName(<span class="string">"Zendor"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name1 = Name.builder().firstName(<span class="string">"Niraj"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name2 = Name.builder().firstName(<span class="string">"Pratik"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name3 = Name.builder().firstName(<span class="string">"Jeetesh"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name4 = Name.builder().firstName(<span class="string">"Rahul"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name5 = Name.builder().firstName(<span class="string">"Amit"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line"></span><br><span class="line">Age age0 = Age.builder().year(<span class="number">30</span>).month(<span class="number">5</span>).build();</span><br><span class="line">Age age1 = Age.builder().year(<span class="number">66</span>).month(<span class="number">3</span>).build();</span><br><span class="line">Age age2 = Age.builder().year(<span class="number">17</span>).month(<span class="number">6</span>).build();</span><br><span class="line">Age age3 = Age.builder().year(<span class="number">3</span>).month(<span class="number">5</span>).build();</span><br><span class="line">Age age4 = Age.builder().year(<span class="number">50</span>).month(<span class="number">5</span>).build();</span><br><span class="line">Age age5 = Age.builder().year(<span class="number">80</span>).month(<span class="number">12</span>).build();</span><br><span class="line"></span><br><span class="line">map.put(name0,age0);</span><br><span class="line">map.put(name1,age1);</span><br><span class="line">map.put(name2,age2);</span><br><span class="line">map.put(name3,age3);</span><br><span class="line">map.put(name4,age4);</span><br><span class="line">map.put(name5,age5);</span><br><span class="line"></span><br><span class="line">Comparator&lt;Age&gt; byAge = (Age obj1,Age obj2) -&gt; obj1.getYear().compareTo(obj2.getYear());</span><br><span class="line"></span><br><span class="line">LinkedHashMap&lt;Name, Age&gt; sortedMap = map.entrySet().stream()</span><br><span class="line">                                          .sorted(Map.Entry.&lt;Name,Age&gt;comparingByValue(byAge))</span><br><span class="line">                                          .collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2)-&gt;e1,LinkedHashMap::<span class="keyword">new</span>)); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/nirajsonawane/java-stream-examples" target="_blank" rel="noopener">Source Code Github Link </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Sort map by Value using Comparator&lt;/strong&gt; in java 8.&lt;/p&gt;
&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/tags/Stream/"/>
    
      <category term="Map" scheme="https://nirajsonawane.github.io/tags/Map/"/>
    
      <category term="Sorting" scheme="https://nirajsonawane.github.io/tags/Sorting/"/>
    
      <category term="Comparator" scheme="https://nirajsonawane.github.io/tags/Comparator/"/>
    
  </entry>
  
  <entry>
    <title>Sort Map by key using Custom Comparator</title>
    <link href="https://nirajsonawane.github.io/2018/09/10/Sort-Map-by-key-using-Custom-Comparator/"/>
    <id>https://nirajsonawane.github.io/2018/09/10/Sort-Map-by-key-using-Custom-Comparator/</id>
    <published>2018-09-10T08:33:18.000Z</published>
    <updated>2018-09-10T22:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this Article , we’ll Discuss How we can <strong>Sort map by Custom key or Comparator</strong> in java 8.</p><p>We want to sort below Map by FirstName. Name object is used as key for Map. </p><figure class="highlight java"><figcaption><span>Name class as key of HashMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">       <span class="comment">//builder </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Sort map by Key using Comparator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  Map&lt;Name, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Name name0 = Name.builder().firstName(<span class="string">"Zendor"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name1 = Name.builder().firstName(<span class="string">"Niraj"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name2 = Name.builder().firstName(<span class="string">"Pratik"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name3 = Name.builder().firstName(<span class="string">"Jeetesh"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name4 = Name.builder().firstName(<span class="string">"Rahul"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name5 = Name.builder().firstName(<span class="string">"Amit"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">map.put(name0,<span class="number">55</span>);</span><br><span class="line">map.put(name1,<span class="number">1</span>);</span><br><span class="line">map.put(name2,<span class="number">2</span>);</span><br><span class="line">map.put(name3,<span class="number">3</span>);</span><br><span class="line">map.put(name4,<span class="number">4</span>);</span><br><span class="line">map.put(name5,<span class="number">5</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This is how we can do that </p><figure class="highlight java"><figcaption><span>Sort map by Key using Comparator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Comparator&lt;Name&gt; byName = (Name o1, Name o2)-&gt; o1.getFirstName().compareTo(o2.getFirstName());</span><br><span class="line"></span><br><span class="line">LinkedHashMap&lt;Name, Integer&gt; sortedMap = map.entrySet().stream()</span><br><span class="line">                                            .sorted(Map.Entry.&lt;Name,Integer&gt;comparingByKey(byName))</span><br><span class="line">                                            .collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2)-&gt;e1,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><p><a href="https://github.com/nirajsonawane/java-stream-examples" target="_blank" rel="noopener">Source Code Github Link </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Sort map by Custom key or Comparator&lt;/strong&gt; in java 8.&lt;/p&gt;
&lt;p&gt;We want to sort below 
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/tags/Stream/"/>
    
      <category term="Map" scheme="https://nirajsonawane.github.io/tags/Map/"/>
    
      <category term="Sorting" scheme="https://nirajsonawane.github.io/tags/Sorting/"/>
    
      <category term="Comparator" scheme="https://nirajsonawane.github.io/tags/Comparator/"/>
    
  </entry>
  
  <entry>
    <title>Java Stream - Sort map by value</title>
    <link href="https://nirajsonawane.github.io/2018/09/09/Java-Stream-Sort-map-by-value/"/>
    <id>https://nirajsonawane.github.io/2018/09/09/Java-Stream-Sort-map-by-value/</id>
    <published>2018-09-09T18:25:43.000Z</published>
    <updated>2018-09-10T21:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this Article , we’ll Discuss How we can <strong>Sort map by Value</strong> in java 8.</p><p>We want to sort below Map by Value<br><figure class="highlight java"><figcaption><span>Sort map by Value</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"Niraj"</span>, <span class="number">6</span>);</span><br><span class="line">map.put(<span class="string">"Rahul"</span>, <span class="number">43</span>);</span><br><span class="line">map.put(<span class="string">"Ram"</span>, <span class="number">44</span>);</span><br><span class="line">map.put(<span class="string">"Sham"</span>, <span class="number">33</span>);</span><br><span class="line">map.put(<span class="string">"Pratik"</span>, <span class="number">5</span>);</span><br><span class="line">map.put(<span class="string">"Ashok"</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></p><p>Map Sorting using <code>comparingByValue</code> in Ascending order<br><figure class="highlight java"><figcaption><span>Sort map by Value Ascending order</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMapByValueAscending </span><br><span class="line">          =  map.entrySet().stream()</span><br><span class="line">            .sorted(Map.Entry.comparingByValue())</span><br><span class="line">            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure></p><p>Map Sorting using <code>comparingByValue</code> in Descending order. For Descending order you need to use <code>reversed()</code><br><figure class="highlight java"><figcaption><span>Sort map by Value Descending order</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMapByValueDescending</span><br><span class="line">            = map.entrySet().stream()</span><br><span class="line">              .sorted(Map.Entry.&lt;String,Integer&gt;comparingByValue().reversed())</span><br><span class="line">               .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1 ,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/nirajsonawane/java-stream-examples" target="_blank" rel="noopener">Source Code Github Link </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Sort map by Value&lt;/strong&gt; in java 8.&lt;/p&gt;
&lt;p&gt;We want to sort below Map by Value&lt;br&gt;&lt;fi
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/tags/Stream/"/>
    
      <category term="Map" scheme="https://nirajsonawane.github.io/tags/Map/"/>
    
      <category term="Sorting" scheme="https://nirajsonawane.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Java Stream - Sort map by key</title>
    <link href="https://nirajsonawane.github.io/2018/09/09/Java-Stream-Sort-map-by-key/"/>
    <id>https://nirajsonawane.github.io/2018/09/09/Java-Stream-Sort-map-by-key/</id>
    <published>2018-09-09T18:25:24.000Z</published>
    <updated>2018-10-30T07:38:20.000Z</updated>
    
    <content type="html"><![CDATA[ Photo by Anton Lecock on Unsplash<br><br><br><br><br>In this Article , we’ll Discuss How we can <strong>Sort map by key</strong> in java 8.<br><br>We want to sort below Map by key<br><figure class="highlight java"><figcaption><span>Sort map by Key</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"Niraj"</span>, <span class="number">6</span>);</span><br><span class="line">map.put(<span class="string">"Rahul"</span>, <span class="number">43</span>);</span><br><span class="line">map.put(<span class="string">"Ram"</span>, <span class="number">44</span>);</span><br><span class="line">map.put(<span class="string">"Sham"</span>, <span class="number">33</span>);</span><br><span class="line">map.put(<span class="string">"Pratik"</span>, <span class="number">5</span>);</span><br><span class="line">map.put(<span class="string">"Ashok"</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>Map Sorting using <code>comparingByKey</code> in Ascending order<br><figure class="highlight java"><figcaption><span>Sort map by Key Ascending order</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMapByValueAscending </span><br><span class="line">          = map.entrySet()</span><br><span class="line">         .stream().sorted(Map.Entry.comparingByKey())</span><br><span class="line">         .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure></p><p>Map Sorting using <code>comparingByKey</code> in Descending order. For Descending order you need to use <code>reversed()</code><br><figure class="highlight java"><figcaption><span>Sort map by Key Descending order</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMapByValueDescending</span><br><span class="line">            = map.entrySet()</span><br><span class="line">            .stream().sorted(Map.Entry.&lt;String,Integer&gt;comparingByKey().reversed())</span><br><span class="line">            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1 ,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/nirajsonawane/java-stream-examples" target="_blank" rel="noopener">Source Code Github Link </a></p>]]></content>
    
    <summary type="html">
    
      
      
         Photo by Anton Lecock on Unsplash&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Sort map by key&lt;/strong&gt; in java 8.
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/tags/Stream/"/>
    
      <category term="Map" scheme="https://nirajsonawane.github.io/tags/Map/"/>
    
      <category term="Sorting" scheme="https://nirajsonawane.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Angular pipes</title>
    <link href="https://nirajsonawane.github.io/2018/08/05/Angular-pipes/"/>
    <id>https://nirajsonawane.github.io/2018/08/05/Angular-pipes/</id>
    <published>2018-08-05T14:33:17.000Z</published>
    <updated>2018-10-27T22:49:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Angular-Pipes-are-used-to-transforms-texts"><a href="#Angular-Pipes-are-used-to-transforms-texts" class="headerlink" title="Angular Pipes are used to transforms texts."></a>Angular Pipes are used to transforms texts.</h3><p>A pipe takes in data as input and transforms it to a desired output</p><h4 id="LowerCase-Pipe"><a href="#LowerCase-Pipe" class="headerlink" title="LowerCase Pipe"></a>LowerCase Pipe</h4><p>Transforms text to all lower case. It is used as follows. </p><pre><code>{{value_expression | lowercase }}</code></pre><h4 id="UpperCase-Pipe"><a href="#UpperCase-Pipe" class="headerlink" title="UpperCase Pipe"></a>UpperCase Pipe</h4><p>Transforms text to all Upper case. It is used as follows. </p><pre><code>{{ value_expression | uppercase  }} </code></pre><h4 id="TitleCasePipe"><a href="#TitleCasePipe" class="headerlink" title="TitleCasePipe"></a>TitleCasePipe</h4><p>Transforms text to title case. Capitalizes the first letter of each word, and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</p><pre><code>{{ value_expression | titlecase }}</code></pre><h4 id="Date-Pipe"><a href="#Date-Pipe" class="headerlink" title="Date Pipe"></a>Date Pipe</h4><p>Converts the Date to human-friendly date</p><h4 id="CurrencyPipe"><a href="#CurrencyPipe" class="headerlink" title="CurrencyPipe"></a>CurrencyPipe</h4><p>Transforms a number to a currency string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Angular-Pipes-are-used-to-transforms-texts&quot;&gt;&lt;a href=&quot;#Angular-Pipes-are-used-to-transforms-texts&quot; class=&quot;headerlink&quot; title=&quot;Angular 
      
    
    </summary>
    
      <category term="Angular" scheme="https://nirajsonawane.github.io/categories/Angular/"/>
    
    
      <category term="Angular6" scheme="https://nirajsonawane.github.io/tags/Angular6/"/>
    
      <category term="Pipes" scheme="https://nirajsonawane.github.io/tags/Pipes/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Smart Casts</title>
    <link href="https://nirajsonawane.github.io/2018/07/30/Kotlin-Smart-Casts/"/>
    <id>https://nirajsonawane.github.io/2018/07/30/Kotlin-Smart-Casts/</id>
    <published>2018-07-30T16:46:36.000Z</published>
    <updated>2018-07-31T13:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Many times while working we need to check if an object is of certain type at runtime. </p><p>In java we have <code>instanceof</code> operator  to check whether the object is an instance of the specified type.</p><figure class="highlight java"><figcaption><span>instanceof Java Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceofExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyClass obj=<span class="keyword">new</span> MyClass();  </span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> MyClass);<span class="comment">//true </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In Kotlin, You can check whether an object is of a certain type at runtime by using the <code>is</code> operator. </p><figure class="highlight kotlin"><figcaption><span>is operator Kotlin Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">        print(obj.length)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (obj !<span class="keyword">is</span> String) &#123; <span class="comment">// same as !(obj is String)</span></span><br><span class="line">print(<span class="string">"Not a String"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">print(obj.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Smart-Casts"><a href="#Smart-Casts" class="headerlink" title="Smart Casts"></a>Smart Casts</h3><p><strong>Kotlin Complier is quite smart and help us to avoid  boilerplate code.</strong></p><p>In many cases we do not need to use explicit cast operators , because the compiler tracks the is -checks and explicit casts for immutable values and inserts (safe) casts automatically when needed:</p><figure class="highlight kotlin"><figcaption><span>Smart Casts Kotlin Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(x: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">is</span> String) &#123;</span><br><span class="line">    print(x.length) <span class="comment">// x is automatically cast to String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The compiler is smart enough to know a cast to be safe if a negative check leads to a return:<br><figure class="highlight kotlin"><figcaption><span>Smart Casts Kotlin Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x !<span class="keyword">is</span> String) <span class="keyword">return</span></span><br><span class="line">    print(x.length) <span class="comment">// x is automatically cast to String</span></span><br></pre></td></tr></table></figure></p><p>Such smart casts work for when-expressions and while-loops as well:<br><figure class="highlight kotlin"><figcaption><span>Smart Casts Kotlin Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">     <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; print(x + <span class="number">1</span>)</span><br><span class="line">     <span class="keyword">is</span> String -&gt; print(x.length + <span class="number">1</span>)</span><br><span class="line">     <span class="keyword">is</span> IntArray -&gt; print(x.sum())</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many times while working we need to check if an object is of certain type at runtime. &lt;/p&gt;
&lt;p&gt;In java we have &lt;code&gt;instanceof&lt;/code&gt; ope
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://nirajsonawane.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://nirajsonawane.github.io/tags/Kotlin/"/>
    
      <category term="Smart Casts" scheme="https://nirajsonawane.github.io/tags/Smart-Casts/"/>
    
      <category term="Kotlin Types" scheme="https://nirajsonawane.github.io/tags/Kotlin-Types/"/>
    
  </entry>
  
</feed>
