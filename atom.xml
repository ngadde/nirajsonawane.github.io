<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niraj Sonawane</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nirajsonawane.github.io/"/>
  <updated>2018-06-18T12:24:18.595Z</updated>
  <id>https://nirajsonawane.github.io/</id>
  
  <author>
    <name>Niraj Sonawane</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BlockingQueue</title>
    <link href="https://nirajsonawane.github.io/2018/06/18/BlockingQueue/"/>
    <id>https://nirajsonawane.github.io/2018/06/18/BlockingQueue/</id>
    <published>2018-06-18T09:57:41.000Z</published>
    <updated>2018-06-18T12:24:18.595Z</updated>
    
    <content type="html"><![CDATA[<p>This Article is part of Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.<br>In this article, we’ll focus on a the concept of <code>BlockingQueue</code> in the Java language.</p><h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><p>A Queue that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.</p><p>A <code>BlockingQueue</code> may be capacity bounded. At any given time it may have a remainingCapacity beyond which no additional elements can be put without blocking. A BlockingQueue without any intrinsic capacity constraints always reports a remaining capacity of Integer.MAX_VALUE.</p><p><code>BlockingQueue</code> implementations are thread-safe. All queuing methods achieve their effects atomically using internal locks or other forms of concurrency control. However, the bulk Collection operations addAll, containsAll, retainAll and removeAll are not necessarily performed atomically unless specified otherwise in an implementation. So it is possible, for example, for addAll(c) to fail (throwing an exception) after adding only some of the elements in c.</p><p><em>let’s implement Producer and Consumer Problem using BlockingQueue</em></p><figure class="highlight java"><figcaption><span>BlockingQueue Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueProducer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line"><span class="keyword">private</span> Random random;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockingQueueProducer</span><span class="params">(BlockingQueue&lt;Integer&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.blockingQueue=blockingQueue;</span><br><span class="line"><span class="keyword">this</span>.random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"BlockingQueueProducer - Adding Elements"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">blockingQueue.put(random.nextInt(<span class="number">3000</span>));</span><br><span class="line">System.out.println(<span class="string">"Added Element : Current Size of Q "</span> + blockingQueue.size());</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueConsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockingQueueConsumer</span><span class="params">(BlockingQueue&lt;Integer&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.blockingQueue=blockingQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"BlockingQueueConsumer : iteam recived from Q "</span> + blockingQueue.take() );</span><br><span class="line">Thread.sleep(<span class="number">2500</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BlockingQueue&lt;Integer&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(<span class="number">5</span>);</span><br><span class="line">ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">newFixedThreadPool.submit(<span class="keyword">new</span> BlockingQueueConsumer(blockingQueue));</span><br><span class="line">newFixedThreadPool.submit(<span class="keyword">new</span> BlockingQueueProducer(blockingQueue));</span><br><span class="line">newFixedThreadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2018/06/18/BlockingQueue/output.png" title="OutPut"><h4 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h4><h4 id="put-E-e"><a href="#put-E-e" class="headerlink" title="put(E e)"></a>put(E e)</h4><p>Inserts the specified element into this queue, waiting if necessary for space to become available.</p><h4 id="take"><a href="#take" class="headerlink" title="take()"></a>take()</h4><p>Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.</p><h4 id="poll"><a href="#poll" class="headerlink" title="poll()"></a>poll()</h4><p>Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Article is part of Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concurr
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>CyclicBarrier</title>
    <link href="https://nirajsonawane.github.io/2018/06/18/CyclicBarrier/"/>
    <id>https://nirajsonawane.github.io/2018/06/18/CyclicBarrier/</id>
    <published>2018-06-18T04:57:26.000Z</published>
    <updated>2018-06-18T09:52:19.689Z</updated>
    
    <content type="html"><![CDATA[<p>This Article is part of Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.<br>In this article, we’ll focus on a the concept of <code>CyclicBarrier</code> in the Java language.</p><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p><code>CyclicBarrier</code> allows a set of threads to all wait for each other to reach a common barrier point. CyclicBarriers are useful in programs involving a fixed sized party of threads that must occasionally wait for each other. The barrier is called cyclic because it can be <strong>re-used</strong> after the waiting threads are released.</p><p><em>CyclicBarrier</em> are Similar to <a href="/2018/06/17/CountDownLatch/" title="CountDownLatch">CountDownLatch</a>  but CyclicBarrier provide some additional features like<br><strong>Reseting CyclicBarrier &amp; Supports an optional Runnable command that is run once per barrier point.</strong></p><figure class="highlight java"><figcaption><span>CyclicBarrier Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> workerId;</span><br><span class="line"><span class="keyword">private</span> Random random;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrierWorker</span><span class="params">(CyclicBarrier cyclicBarrier ,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cyclicBarrier=cyclicBarrier;</span><br><span class="line"><span class="keyword">this</span>.workerId=id;</span><br><span class="line"><span class="keyword">this</span>.random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Starting worker ID "</span> + <span class="keyword">this</span>.workerId);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(random.nextInt(<span class="number">4000</span>));</span><br><span class="line">System.out.println(<span class="string">"Worker "</span> + workerId + <span class="string">" Completed it's work, Reducing  count of cyclicBarrier "</span> );</span><br><span class="line">cyclicBarrier.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>, ()-&gt;System.out.println(<span class="string">"Barrier point reach ::: All Task Completed"</span>));</span><br><span class="line">ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">IntStream.range(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"> .forEach(cnt-&gt;&#123;newFixedThreadPool.submit(<span class="keyword">new</span> CyclicBarrierWorker(cyclicBarrier, cnt));</span><br><span class="line"> &#125;);</span><br><span class="line">System.out.println(<span class="string">"All Task Submited"</span>);</span><br><span class="line">newFixedThreadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/06/18/CyclicBarrier/output.png" title="OutPut"><h4 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h4><p><code>CyclicBarrier(int parties, Runnable barrierAction)</code> :<br>Creates a new CyclicBarrier that will trip when the given number of parties (threads) are waiting upon it, <strong>and which will execute the given barrier action when the barrier is tripped, performed by the last thread entering the barrier.</strong></p><p><code>getNumberWaiting()</code><br>Returns the number of parties currently waiting at the barrier.</p><p><code>reset</code><br>Resets the barrier to its initial state.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Article is part of Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concurr
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>CountDownLatch</title>
    <link href="https://nirajsonawane.github.io/2018/06/17/CountDownLatch/"/>
    <id>https://nirajsonawane.github.io/2018/06/17/CountDownLatch/</id>
    <published>2018-06-17T12:32:44.000Z</published>
    <updated>2018-06-18T03:59:22.543Z</updated>
    
    <content type="html"><![CDATA[<p>This Article is part of Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.<br>In this article, we’ll focus on a the concept of <code>CountDownLatch</code> in the Java language.</p><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p><code>CountDownLatch</code> enables a java thread to wait until other set of threads completes their tasks. </p><p>e.g. Assume we have divided one task in 10 small independent task.<br>Now main thread should wait, till other 10 Threads finish there work. In these scenarios CountDownLatch can be used.      </p><p>A <code>CountDownLatch</code> is initialized with a given count.<br>The <code>await</code> methods block until the current count reaches zero due to invocations of the <code>countDown()</code> method, after which all waiting threads are released and any subsequent invocations of await return immediately.<br>This is a one-shot phenomenon – the count cannot be reset. If you need a version that resets the count, consider using a <code>CyclicBarrier</code>.</p><figure class="highlight java"><figcaption><span>CountDownLatch Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> workerId;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatchWorker</span><span class="params">(CountDownLatch countDownLatch ,<span class="keyword">int</span> workerId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.countDownLatch=countDownLatch;</span><br><span class="line"><span class="keyword">this</span>.workerId=workerId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Worker "</span> + workerId + <span class="string">" Started"</span> );</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(workerId*<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Worker "</span> + workerId + <span class="string">" Completed it's work, Reducing  count of countDownLatch "</span> );</span><br><span class="line">countDownLatch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line">ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">  .forEach(cnt -&gt; &#123;</span><br><span class="line">  newCachedThreadPool.submit(<span class="keyword">new</span> CountDownLatchWorker(countDownLatch, cnt));</span><br><span class="line">  &#125;);</span><br><span class="line">System.out.println(<span class="string">"Main Thread is wating for workers to finish!!!!!!"</span>);</span><br><span class="line">countDownLatch.await();</span><br><span class="line">System.out.println(<span class="string">"Work of All Worker is Completed"</span>);</span><br><span class="line">newCachedThreadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/06/17/CountDownLatch/output.png" title="OutPut"><h4 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h4><p><strong>await Method</strong><br>Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted.<br>If the current count is zero then this method returns immediately.<br>If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happen:</p><p><strong>countDown Method</strong><br>Decrements the count of the latch, releasing all waiting threads if the count reaches zero.<br>If the current count is greater than zero then it is decremented. If the new count is zero then all waiting threads are re-enabled for thread scheduling purposes.<br>If the current count equals zero then nothing happens.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Article is part of Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concurr
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Callable and Future</title>
    <link href="https://nirajsonawane.github.io/2018/06/17/Callable-and-Future/"/>
    <id>https://nirajsonawane.github.io/2018/06/17/Callable-and-Future/</id>
    <published>2018-06-17T06:57:03.000Z</published>
    <updated>2018-06-17T12:22:24.468Z</updated>
    
    <content type="html"><![CDATA[<p>This Article is part of Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.<br>In this quick article, we’ll focus on a the concept of <code>Callable</code> &amp;  <code>Future</code> in the Java language.</p><h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><p>The <code>Callable</code> interface represents a thread that can return the value. It’s the same as the Runnable interface but can return the value.<br>The callable interface can be used to Compute the value and return it to invoking thread. </p><h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><p><code>Future</code>is generic interface that represents value which will be returned by callable interface.<br>There are two methods to get actual value from Future.<br><code>get()</code> : When this method is called, thread will wait for result indefinitely.<br><code>V get(long timeout, TimeUnit unit)</code> : When this method is called, thread will wait for result only for specified time. </p><figure class="highlight java"><figcaption><span>Callable Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableWorkerExample</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String someReturnValue;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CallableWorkerExample</span><span class="params">(String someValue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.someReturnValue=someValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Working on call"</span>);</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.someReturnValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableAndFuture</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">CallableWorkerExample worker= <span class="keyword">new</span> CallableWorkerExample(<span class="string">"Some Value"</span>);</span><br><span class="line">ExecutorService newSingleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">Future&lt;String&gt; submit = newSingleThreadExecutor.submit(worker);</span><br><span class="line">System.out.println(<span class="string">"Task Submited"</span>);</span><br><span class="line">String returnValue = submit.get();</span><br><span class="line">System.out.println(<span class="string">"Return value from Callable "</span> +returnValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h4><p><strong>Exception Handling</strong><br><code>Runnable.run</code> method does not throws exceptions but <code>Callable.call</code> method throws exception.<br><strong>ExecutorService</strong><br><code>ExecutorService.submit</code> Submits a value-returning task for execution and returns a Future representing the pending results of the task.<code>submit</code>Method can take <strong>Callable</strong> and <strong>Runnable</strong> task as input.But the <code>execute</code> Method Discussed in <a href="/2018/06/15/ExecutorServiceAndThreadPools/" title="ExecutorServiceAndThreadPools">ExecutorServiceAndThreadPools</a>  only takes <strong>Runnable</strong>  task as input.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Article is part of Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concurr
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>ExecutorServiceAndThreadPools</title>
    <link href="https://nirajsonawane.github.io/2018/06/15/ExecutorServiceAndThreadPools/"/>
    <id>https://nirajsonawane.github.io/2018/06/15/ExecutorServiceAndThreadPools/</id>
    <published>2018-06-15T17:26:51.000Z</published>
    <updated>2018-06-15T19:04:38.067Z</updated>
    
    <content type="html"><![CDATA[<p>This Article is part of Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><p>In this quick article, we’ll focus on a the concept of <code>ExecutorService</code> Framework in the Java language.</p><p><code>ExecutorService</code> is a framework simplifies the task of creating threads and managing thread  life cycle. <code>ExecutorService</code> is an interface, We need its implementations in order to make any use of it. </p><p><code>ThreadPoolExecutor</code> &amp; <code>ScheduledThreadPoolExecutor</code> implementations are available in java concurrent package.</p><h3 id="Creating-an-ExecutorService"><a href="#Creating-an-ExecutorService" class="headerlink" title="Creating an ExecutorService:"></a>Creating an ExecutorService:</h3><p><code>Executors</code> factory methods are available for creating ExecutorService. </p><p><code>ExecutorService executorService1 = Executors.newSingleThreadExecutor();</code><br><code>ExecutorService executorService2 = Executors.newFixedThreadPool(10);</code><br><code>ExecutorService executorService3 = Executors.newCachedThreadPool();</code></p><h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><p><code>newCachedThreadPool</code> method creates an executor having an expandable thread pool.Whenever a thread is needed, pool returns a thread from cache and if not available, a new thread is created for a short time. When the timeout of thread is over, that thread is vanished. </p><p><em>In below example 10 Threds will run Simultaneously </em></p><figure class="highlight java"><figcaption><span>newCachedThreadPool Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyWorker</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyWorker id "</span> + id + <span class="string">" IS Working"</span> + <span class="string">"Start Time "</span> + System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorServiceExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> .forEach(cnt-&gt;newCachedThreadPool.execute(<span class="keyword">new</span> MyWorker(cnt)));</span><br><span class="line">newCachedThreadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><p><code>newFixedThreadPool</code> method Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.. </p><p><em>In below example 5 Threds will run Simultaneously. After Complition of task same 5 threds will be used for next 5 taks </em></p><figure class="highlight java"><figcaption><span>newFixedThreadPool Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyWorker</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyWorker id "</span> + id + <span class="string">" IS Working"</span> + <span class="string">"Start Time "</span> + System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorServiceExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> .forEach(cnt-&gt;newFixedThreadPool.execute(<span class="keyword">new</span> MyWorker(cnt)));</span><br><span class="line">newFixedThreadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><p><code>newSingleThreadExecutor</code> method Creates an Executor that uses a single worker thread operating off an unbounded queue.</p><p><em>In below example 1 Thread will run Simultaneously. After Complition of task same threds will be used for next 10 taks </em></p><figure class="highlight java"><figcaption><span>newSingleThreadExecutor Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyWorker</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyWorker id "</span> + id + <span class="string">" IS Working"</span> + <span class="string">"Start Time "</span> + System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorServiceExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService newSingleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> .forEach(cnt-&gt;newSingleThreadExecutor.execute(<span class="keyword">new</span> MyWorker(cnt)));</span><br><span class="line">newSingleThreadExecutor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h4><p><code>shutdown()</code><br>An <code>ExecutorService</code> can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an <code>ExecutorService</code>.<br>The <code>shutdown()</code> method will allow previously submitted tasks to execute before terminating, while the <code>shutdownNow()</code> method prevents waiting tasks from starting and attempts to stop currently executing tasks.</p><p><code>execute()</code><br>Executes the given command at some time in the future. The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the Executor implementation.<br>execute method only takes <strong>runnable</strong> task.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Article is part of Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concurr
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Semaphores</title>
    <link href="https://nirajsonawane.github.io/2018/06/15/Semaphores/"/>
    <id>https://nirajsonawane.github.io/2018/06/15/Semaphores/</id>
    <published>2018-06-15T12:47:27.000Z</published>
    <updated>2018-06-15T14:15:27.910Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Semaphores are a really simple concept, invented by the famous Dutch computer scientist Edsger Dijkstra.</strong> </p><p>Basically a semaphore is a counter (integer) that allows a thread to get into a critical region.<br>What the counter is counting are permits that allow access to the shared resource. Thus, to access the resource, a thread must be granted a permit from the semaphore.</p><p>If the value of the counter is greater than 0 then thread get the permit otherwise waits for the permit.<br>Once thread leaves the critical region increments the counter so that other thread can access the critical section.  </p><p>Most of the time we use semaphores to limit the number of concurrent threads accessing a specific resource.</p><p><strong>Example</strong><br>let consider, We want to limit connections to some resources to some max limit.Similar to connection pool.<br>In below example 10 threads are trying to get connection at same time.But we should not allow more than 5 connections </p><figure class="highlight java"><figcaption><span>Semaphore Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nirajsonawane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Semaphore connectionSemaphore;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">(<span class="keyword">int</span> poolsize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.connectionSemaphore = <span class="keyword">new</span> Semaphore(poolsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnectionFromPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (connectionSemaphore.availablePermits() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">connectionSemaphore.tryAcquire();</span><br><span class="line">System.out.println(<span class="string">"Get the connection"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Max active connection limit reach!! try again"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">connectionSemaphore.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionService</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConnectionPool connectionPool;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConnectionService</span><span class="params">(ConnectionPool connectionPool)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.connectionPool = connectionPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">connectionPool.getConnectionFromPool();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Semaphores</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">ConnectionPool connectionPool = <span class="keyword">new</span> ConnectionPool(<span class="number">5</span>);</span><br><span class="line">ConnectionService service = <span class="keyword">new</span> ConnectionService(connectionPool);</span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">.forEach((cnt) -&gt; executorService.execute(service));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Out of 10 threds only 5 was able to get the connection.</em></p><img src="/2018/06/15/Semaphores/output.png" title="OutPut"><p><strong>Key Points</strong></p><ol><li><code>tryAcquire()</code>– Return true if a permit is available immediately and acquire it otherwise return false,</li><li><code>acquire()</code>- Acquires a permit and blocking until one is available.</li><li><code>release()</code> – Release a permit</li><li><code>availablePermits()</code> – Return number of current permits available</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Semaphores are a really simple concept, invented by the famous Dutch computer scientist Edsger Dijkstra.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Basical
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Wait-Notify-And-Notifyall</title>
    <link href="https://nirajsonawane.github.io/2018/06/15/Wait-Notify-And-Notifyall/"/>
    <id>https://nirajsonawane.github.io/2018/06/15/Wait-Notify-And-Notifyall/</id>
    <published>2018-06-15T09:07:17.000Z</published>
    <updated>2018-06-15T11:36:56.779Z</updated>
    
    <content type="html"><![CDATA[<p>This is Sixth Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><p>In this article, we will look at one of the most basic methods of Java-thread synchronization.</p><p><code>Object</code> Class in Java has three final methods to allow threads to communicate about the lock status of the threads. </p><h4 id="These-methods-are-wait-notify-and-notifyAll"><a href="#These-methods-are-wait-notify-and-notifyAll" class="headerlink" title="These methods are wait(), notify() and notifyAll()."></a>These methods are <code>wait()</code>, <code>notify()</code> and <code>notifyAll()</code>.</h4><h5 id="wait"><a href="#wait" class="headerlink" title="wait()"></a><code>wait()</code></h5><p>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.</p><h5 id="notify"><a href="#notify" class="headerlink" title="notify()"></a><code>notify()</code></h5><p>Wakes up a single thread that is waiting on this object’s monitor.</p><h5 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll()"></a><code>notifyAll()</code></h5><p>Wakes up all threads that are waiting on this object’s monitor.</p><h6 id="Let’s-try-to-implement-Producer-amp-Consumer-problem-using-wait-notify-amp-notifyAll"><a href="#Let’s-try-to-implement-Producer-amp-Consumer-problem-using-wait-notify-amp-notifyAll" class="headerlink" title="Let’s try to implement Producer &amp; Consumer problem using wait(),notify()&amp; notifyAll();"></a>Let’s try to implement Producer &amp; Consumer problem using wait(),notify()&amp; notifyAll();</h6><p>Producer will add number in List. List can have maximum 5 numbers . Consumer will remove elements from list until it becomes empty.</p><figure class="highlight java"><figcaption><span>Volatile Keyword Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="keyword">package</span> com.nirajsonawane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (list.size() == <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"List is full Notifying Consumer &amp; Releasing Lock"</span>);</span><br><span class="line">notifyAll();</span><br><span class="line">wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (list.size() &lt; <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Adding items"</span>);</span><br><span class="line">list.add(random.nextInt());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumner</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"List is Empty :Notifying Publisher &amp; Releasing Lock"</span>);</span><br><span class="line">notifyAll();</span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Size of list "</span> + list.size() + <span class="string">" Removed Number is "</span> + list.remove(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyNotifyAllExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Processor p = <span class="keyword">new</span> Processor();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(() -&gt; p.producer());</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(() -&gt; p.consumner());</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Sixth Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concur
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Volatile</title>
    <link href="https://nirajsonawane.github.io/2018/06/15/Volatile/"/>
    <id>https://nirajsonawane.github.io/2018/06/15/Volatile/</id>
    <published>2018-06-15T08:40:37.000Z</published>
    <updated>2018-06-15T08:54:45.606Z</updated>
    
    <content type="html"><![CDATA[<p>This is Fifth Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><p>In this quick article, we’ll focus on a the concept of <code>volatile</code> keyword in the Java language.</p><p>Every read of a <code>volatile</code> variable will be read from the RAM so from the main memory and not from cache. Usually variables are cached for performance reasons.</p><p>Using <code>volatile</code> variables reduces the risk of memory consistency errors, because any write to a volatile variable establishes a happens-before relationship with subsequent reads of that same variable. This means that changes to a volatile variable are always visible to other thread.</p><figure class="highlight java"><figcaption><span>Volatile Keyword Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> COUNT = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Fifth Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concur
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Intrinsic Locks</title>
    <link href="https://nirajsonawane.github.io/2018/06/13/Intrinsic-Locks/"/>
    <id>https://nirajsonawane.github.io/2018/06/13/Intrinsic-Locks/</id>
    <published>2018-06-13T02:08:33.000Z</published>
    <updated>2018-06-13T02:22:17.326Z</updated>
    
    <content type="html"><![CDATA[<p>This is Fourth Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><h4 id="Intrinsic-Locks"><a href="#Intrinsic-Locks" class="headerlink" title="Intrinsic Locks"></a>Intrinsic Locks</h4><p><a href="/2018/06/13/Synchronization/" title="Synchronization">Synchronization</a>  is built around an internal entity known as the <strong>intrinsic lock</strong> or <strong>monitor lock</strong>. Intrinsic locks play a role in both aspects of synchronization: enforcing exclusive access to an object’s state and establishing happens-before relationships that are essential to visibility.</p><p>Every object has an <code>intrinsic</code> lock associated with it. By convention, a thread that needs exclusive and consistent access to an object’s fields has to acquire the object’s intrinsic lock before accessing them, and then release the intrinsic lock when it’s done with them.</p><p> As long as a thread owns an intrinsic lock, no other thread can acquire the same lock. The other thread will block when it attempts to acquire the lock.</p><h4 id="Locks-In-Synchronized-Methods"><a href="#Locks-In-Synchronized-Methods" class="headerlink" title="Locks In Synchronized Methods"></a>Locks In Synchronized Methods</h4><p>We have discussed  Synchronized Methods in previous Article <a href="/2018/06/13/Synchronization/" title="Synchronization">Synchronization</a>.<br>When a thread invokes a synchronized method, it automatically acquires the intrinsic lock for that method’s object and releases it when the method returns. The lock release occurs even if the return was caused by an uncaught exception.</p><h4 id="Locks-In-Synchronized-Static-Methods"><a href="#Locks-In-Synchronized-Static-Methods" class="headerlink" title="Locks In Synchronized Static Methods"></a>Locks In Synchronized Static Methods</h4><p>As  a static method is associated with a class, not an object. In this case, the thread acquires the intrinsic lock for the Class object associated with the class. Thus access to class’s static fields is controlled by a lock that’s disti</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Fourth Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concu
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Synchronization</title>
    <link href="https://nirajsonawane.github.io/2018/06/13/Synchronization/"/>
    <id>https://nirajsonawane.github.io/2018/06/13/Synchronization/</id>
    <published>2018-06-13T01:10:27.000Z</published>
    <updated>2018-06-13T02:03:01.338Z</updated>
    
    <content type="html"><![CDATA[<p>This is Third Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><h3 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h3><p>Threads communicate primarily by sharing access to fields and the objects reference fields refer to. This form of communication is extremely efficient, but makes two kinds of errors possible: thread interference and memory consistency errors. The tool needed to prevent these errors is <em>synchronization</em>.</p><p>There are many situations in which multiple threads must share access to common objects.<br>And There may be a situation when multiple threads try to access the same resource, Then they can produce inconsistent result due to concurrency issues.</p><p>e.g  In below example two Threads are trying to increment counter by 1000, So after end of execution. Vlaue of counter should be 2000, but that not the case. </p><figure class="highlight java"><figcaption><span>Inconsistent result due to concurrency - Without Synchronization</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedMethodExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span>   <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">counter = counter+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main start!!"</span>);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">increment();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">increment();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">System.out.println(<span class="string">"Counter "</span> + counter);</span><br><span class="line">System.out.println(<span class="string">"Main End"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/06/13/Synchronization/output1.png" title="OutPut"><p>If you check output , The value of Conter is not exactly equal to 2000.  </p><h3 id="Synchronization-idioms"><a href="#Synchronization-idioms" class="headerlink" title="Synchronization idioms"></a>Synchronization idioms</h3><p>The Java programming language provides two basic synchronization idioms: <code>synchronized methods</code> and <code>synchronized statements</code>.</p><h4 id="Synchronized-Methods"><a href="#Synchronized-Methods" class="headerlink" title="Synchronized Methods"></a>Synchronized Methods</h4><p>To make a method synchronized, simply add the <code>synchronized</code> keyword to its declaration.<br>Synchronized method is used to lock an object for any shared resource. When a thread invokes a synchronized method, it automatically acquires the lock for that object and releases it when the thread completes its task.</p><p>If in above exapmle we make increment method as Synchronized, then has two effects:</p><p><em>First</em>, it is not possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object.</p><p><em>Second</em>, when a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads.</p><figure class="highlight java"><figcaption><span>Synchronized Method Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedMethodExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>   <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">counter = counter+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main start!!"</span>);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">increment();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">increment();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">System.out.println(<span class="string">"Counter "</span> + counter);</span><br><span class="line">System.out.println(<span class="string">"Main End"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2018/06/13/Synchronization/output2.png" title="OutPut"><h4 id="Synchronized-Blocks"><a href="#Synchronized-Blocks" class="headerlink" title="Synchronized Blocks"></a>Synchronized Blocks</h4><p>Each time We do not have to synchronize a whole method. Sometimes it is preferable to synchronize only part of a method. Java synchronized blocks inside methods makes this possible.The <code>increment</code> method  Can implemented by using Synchronized Blocks<br><figure class="highlight java"><figcaption><span>Synchronized Block Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span>   <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;  </span><br><span class="line">    counter = counter+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>It is better to use Synchronized Blocks using private object, rather than putting it on a method.</strong></p><p>Putting it on the method means you are using the lock of the object itself to provide thread safety. With this kind of mechanism, it is possible for a malicious user of your code to also obtain the lock on your object, and hold it forever, effectively blocking other threads. A non-malicious user can effectively do the same thing inadvertently.</p><p>If you use the lock of a private data member, you can prevent this, since it is impossible for a malicious user to obtain the lock on your private object.</p><figure class="highlight java"><figcaption><span>Synchronized Block Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Object lockObject = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span>   <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockObject)&#123;  </span><br><span class="line">    counter = counter+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Third Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concur
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
</feed>
