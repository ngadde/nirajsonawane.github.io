<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niraj Sonawane</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nirajsonawane.github.io/"/>
  <updated>2018-09-10T09:16:47.122Z</updated>
  <id>https://nirajsonawane.github.io/</id>
  
  <author>
    <name>Niraj Sonawane</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sort Map by Value using Custom Comparator</title>
    <link href="https://nirajsonawane.github.io/2018/09/10/Sort-Map-by-Value-using-Custom-Comparator/"/>
    <id>https://nirajsonawane.github.io/2018/09/10/Sort-Map-by-Value-using-Custom-Comparator/</id>
    <published>2018-09-10T08:33:33.000Z</published>
    <updated>2018-09-10T09:16:47.122Z</updated>
    
    <content type="html"><![CDATA[<p>In this Article , we’ll Discuss How we can <strong>Sort map by Value using Comparator</strong> in java 8.</p><figure class="highlight java"><figcaption><span>Name class as key of HashMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String firstName;</span><br><span class="line"> <span class="keyword">private</span> String lastName;</span><br><span class="line">       <span class="comment">//builder </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Name class as key of HashMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Age</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer year;</span><br><span class="line">        <span class="keyword">private</span> Integer month;</span><br><span class="line">        <span class="comment">//builder</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We want to sort Map by <code>Age.Year</code>. </p><figure class="highlight java"><figcaption><span>Sort map by value using Comparator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  Map&lt;Name, Age&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Name name0 = Name.builder().firstName(<span class="string">"Zendor"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name1 = Name.builder().firstName(<span class="string">"Niraj"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name2 = Name.builder().firstName(<span class="string">"Pratik"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name3 = Name.builder().firstName(<span class="string">"Jeetesh"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name4 = Name.builder().firstName(<span class="string">"Rahul"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name5 = Name.builder().firstName(<span class="string">"Amit"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line"></span><br><span class="line">Age age0 = Age.builder().year(<span class="number">30</span>).month(<span class="number">5</span>).build();</span><br><span class="line">Age age1 = Age.builder().year(<span class="number">66</span>).month(<span class="number">3</span>).build();</span><br><span class="line">Age age2 = Age.builder().year(<span class="number">17</span>).month(<span class="number">6</span>).build();</span><br><span class="line">Age age3 = Age.builder().year(<span class="number">3</span>).month(<span class="number">5</span>).build();</span><br><span class="line">Age age4 = Age.builder().year(<span class="number">50</span>).month(<span class="number">5</span>).build();</span><br><span class="line">Age age5 = Age.builder().year(<span class="number">80</span>).month(<span class="number">12</span>).build();</span><br><span class="line"></span><br><span class="line">map.put(name0,age0);</span><br><span class="line">map.put(name1,age1);</span><br><span class="line">map.put(name2,age2);</span><br><span class="line">map.put(name3,age3);</span><br><span class="line">map.put(name4,age4);</span><br><span class="line">map.put(name5,age5);</span><br><span class="line"></span><br><span class="line">Comparator&lt;Age&gt; byAge = (Age obj1,Age obj2) -&gt; obj1.getYear().compareTo(obj2.getYear());</span><br><span class="line"></span><br><span class="line">LinkedHashMap&lt;Name, Age&gt; sortedMap = map.entrySet().stream()</span><br><span class="line">                                          .sorted(Map.Entry.&lt;Name,Age&gt;comparingByValue(byAge))</span><br><span class="line">                                          .collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2)-&gt;e1,LinkedHashMap::<span class="keyword">new</span>)); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/nirajsonawane/java-stream-examples" target="_blank" rel="noopener">Source Code Github Link </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Sort map by Value using Comparator&lt;/strong&gt; in java 8.&lt;/p&gt;
&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/tags/Stream/"/>
    
      <category term="Map" scheme="https://nirajsonawane.github.io/tags/Map/"/>
    
      <category term="Sorting" scheme="https://nirajsonawane.github.io/tags/Sorting/"/>
    
      <category term="Comparator" scheme="https://nirajsonawane.github.io/tags/Comparator/"/>
    
  </entry>
  
  <entry>
    <title>Sort Map by key using Custom Comparator</title>
    <link href="https://nirajsonawane.github.io/2018/09/10/Sort-Map-by-key-using-Custom-Comparator/"/>
    <id>https://nirajsonawane.github.io/2018/09/10/Sort-Map-by-key-using-Custom-Comparator/</id>
    <published>2018-09-10T08:33:18.000Z</published>
    <updated>2018-09-10T08:46:32.180Z</updated>
    
    <content type="html"><![CDATA[<p>In this Article , we’ll Discuss How we can <strong>Sort map by Custom key or Comparator</strong> in java 8.</p><p>We want to sort below Map by FirstName. Name object is used as key for Map. </p><figure class="highlight java"><figcaption><span>Name class as key of HashMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">       <span class="comment">//builder </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Sort map by Key using Comparator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  Map&lt;Name, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Name name0 = Name.builder().firstName(<span class="string">"Zendor"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name1 = Name.builder().firstName(<span class="string">"Niraj"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name2 = Name.builder().firstName(<span class="string">"Pratik"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name3 = Name.builder().firstName(<span class="string">"Jeetesh"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name4 = Name.builder().firstName(<span class="string">"Rahul"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">Name name5 = Name.builder().firstName(<span class="string">"Amit"</span>).lastName(<span class="string">"Sonawane"</span>).build();</span><br><span class="line">map.put(name0,<span class="number">55</span>);</span><br><span class="line">map.put(name1,<span class="number">1</span>);</span><br><span class="line">map.put(name2,<span class="number">2</span>);</span><br><span class="line">map.put(name3,<span class="number">3</span>);</span><br><span class="line">map.put(name4,<span class="number">4</span>);</span><br><span class="line">map.put(name5,<span class="number">5</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This is how we can do that </p><figure class="highlight java"><figcaption><span>Sort map by Key using Comparator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Comparator&lt;Name&gt; byName = (Name o1, Name o2)-&gt; o1.getFirstName().compareTo(o2.getFirstName());</span><br><span class="line"></span><br><span class="line">LinkedHashMap&lt;Name, Integer&gt; sortedMap = map.entrySet().stream()</span><br><span class="line">                                            .sorted(Map.Entry.&lt;Name,Integer&gt;comparingByKey(byName))</span><br><span class="line">                                            .collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue,(e1,e2)-&gt;e1,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><p><a href="https://github.com/nirajsonawane/java-stream-examples" target="_blank" rel="noopener">Source Code Github Link </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Sort map by Custom key or Comparator&lt;/strong&gt; in java 8.&lt;/p&gt;
&lt;p&gt;We want to sort below 
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/tags/Stream/"/>
    
      <category term="Map" scheme="https://nirajsonawane.github.io/tags/Map/"/>
    
      <category term="Sorting" scheme="https://nirajsonawane.github.io/tags/Sorting/"/>
    
      <category term="Comparator" scheme="https://nirajsonawane.github.io/tags/Comparator/"/>
    
  </entry>
  
  <entry>
    <title>Java Stream - Sort map by value</title>
    <link href="https://nirajsonawane.github.io/2018/09/09/Java-Stream-Sort-map-by-value/"/>
    <id>https://nirajsonawane.github.io/2018/09/09/Java-Stream-Sort-map-by-value/</id>
    <published>2018-09-09T18:25:43.000Z</published>
    <updated>2018-09-10T08:26:45.267Z</updated>
    
    <content type="html"><![CDATA[<p>In this Article , we’ll Discuss How we can <strong>Sort map by Value</strong> in java 8.</p><p>We want to sort below Map by Value<br><figure class="highlight java"><figcaption><span>Sort map by Value</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"Niraj"</span>, <span class="number">6</span>);</span><br><span class="line">map.put(<span class="string">"Rahul"</span>, <span class="number">43</span>);</span><br><span class="line">map.put(<span class="string">"Ram"</span>, <span class="number">44</span>);</span><br><span class="line">map.put(<span class="string">"Sham"</span>, <span class="number">33</span>);</span><br><span class="line">map.put(<span class="string">"Pratik"</span>, <span class="number">5</span>);</span><br><span class="line">map.put(<span class="string">"Ashok"</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></p><p>Map Sorting using <code>comparingByValue</code> in Ascending order<br><figure class="highlight java"><figcaption><span>Sort map by Value Ascending order</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMapByValueAscending </span><br><span class="line">          =  map.entrySet().stream()</span><br><span class="line">            .sorted(Map.Entry.comparingByValue())</span><br><span class="line">            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure></p><p>Map Sorting using <code>comparingByValue</code> in Descending order. For Descending order you need to use <code>reversed()</code><br><figure class="highlight java"><figcaption><span>Sort map by Value Descending order</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMapByValueDescending</span><br><span class="line">            = map.entrySet().stream()</span><br><span class="line">              .sorted(Map.Entry.&lt;String,Integer&gt;comparingByValue().reversed())</span><br><span class="line">               .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1 ,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/nirajsonawane/java-stream-examples" target="_blank" rel="noopener">Source Code Github Link </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Sort map by Value&lt;/strong&gt; in java 8.&lt;/p&gt;
&lt;p&gt;We want to sort below Map by Value&lt;br&gt;&lt;fi
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/tags/Stream/"/>
    
      <category term="Map" scheme="https://nirajsonawane.github.io/tags/Map/"/>
    
      <category term="Sorting" scheme="https://nirajsonawane.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Java Stream - Sort map by key</title>
    <link href="https://nirajsonawane.github.io/2018/09/09/Java-Stream-Sort-map-by-key/"/>
    <id>https://nirajsonawane.github.io/2018/09/09/Java-Stream-Sort-map-by-key/</id>
    <published>2018-09-09T18:25:24.000Z</published>
    <updated>2018-09-10T08:26:17.076Z</updated>
    
    <content type="html"><![CDATA[<p>In this Article , we’ll Discuss How we can <strong>Sort map by key</strong> in java 8.</p><p>We want to sort below Map by key<br><figure class="highlight java"><figcaption><span>Sort map by Key</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"Niraj"</span>, <span class="number">6</span>);</span><br><span class="line">map.put(<span class="string">"Rahul"</span>, <span class="number">43</span>);</span><br><span class="line">map.put(<span class="string">"Ram"</span>, <span class="number">44</span>);</span><br><span class="line">map.put(<span class="string">"Sham"</span>, <span class="number">33</span>);</span><br><span class="line">map.put(<span class="string">"Pratik"</span>, <span class="number">5</span>);</span><br><span class="line">map.put(<span class="string">"Ashok"</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></p><p>Map Sorting using <code>comparingByKey</code> in Ascending order<br><figure class="highlight java"><figcaption><span>Sort map by Key Ascending order</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMapByValueAscending </span><br><span class="line">          = map.entrySet()</span><br><span class="line">         .stream().sorted(Map.Entry.comparingByKey())</span><br><span class="line">         .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure></p><p>Map Sorting using <code>comparingByKey</code> in Descending order. For Descending order you need to use <code>reversed()</code><br><figure class="highlight java"><figcaption><span>Sort map by Key Descending order</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMapByValueDescending</span><br><span class="line">            = map.entrySet()</span><br><span class="line">            .stream().sorted(Map.Entry.&lt;String,Integer&gt;comparingByKey().reversed())</span><br><span class="line">            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1 ,LinkedHashMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/nirajsonawane/java-stream-examples" target="_blank" rel="noopener">Source Code Github Link </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Sort map by key&lt;/strong&gt; in java 8.&lt;/p&gt;
&lt;p&gt;We want to sort below Map by key&lt;br&gt;&lt;figure
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/tags/Stream/"/>
    
      <category term="Map" scheme="https://nirajsonawane.github.io/tags/Map/"/>
    
      <category term="Sorting" scheme="https://nirajsonawane.github.io/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 Custom Collector</title>
    <link href="https://nirajsonawane.github.io/2018/09/03/Java-8-Custom-Collector/"/>
    <id>https://nirajsonawane.github.io/2018/09/03/Java-8-Custom-Collector/</id>
    <published>2018-09-03T02:52:10.000Z</published>
    <updated>2018-09-03T04:17:58.383Z</updated>
    
    <content type="html"><![CDATA[<p>In this Article , we’ll Discuss How we can <strong>Create our own Custom Collector</strong> in java 8 and above.<br>For this article, We will implement <strong>Summary Statistics</strong> For BigDecimal number. </p><h3 id="Java-8-Summary-Statistics"><a href="#Java-8-Summary-Statistics" class="headerlink" title="Java 8 Summary Statistics"></a>Java 8 Summary Statistics</h3><p>Java 8 Provides Summary Statistics for Long,Int &amp; Double. These Summary classes will help you to get count, min, max, sum, and average values.</p><ul><li>LongSummaryStatistics</li><li>IntSummaryStatistics</li><li>DoubleSummaryStatistics</li></ul><h5 id="IntSummaryStatistics-Example"><a href="#IntSummaryStatistics-Example" class="headerlink" title="IntSummaryStatistics Example"></a>IntSummaryStatistics Example</h5><p>In below example we are trying to calculate count, min, max, sum, and average of 1 to 100 Integer.</p><figure class="highlight java"><figcaption><span>Calculate Sum,Min,Max,Count & Average</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">IntSummaryStatistics summaryStatistics = IntStream.range(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line">.summaryStatistics();</span><br><span class="line">System.out.println(summaryStatistics);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="implementing-SummaryStatistics-for-Big-Decimal-numbers"><a href="#implementing-SummaryStatistics-for-Big-Decimal-numbers" class="headerlink" title="implementing SummaryStatistics  for Big Decimal numbers"></a>implementing SummaryStatistics  for Big Decimal numbers</h4><p>Java does not provides inbuilt Summary Statistics class for BigDecimal Number. </p><p>Lets try to implement our own BigDecimal SummaryStatistics.</p><p><strong>Step 1 </strong> : Create Collector</p><figure class="highlight java"><figcaption><span>Calculate Sum,Min,Max,Count & Average</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBigDecimalSummaryCollector</span> <span class="keyword">implements</span> <span class="title">Consumer</span>&lt;<span class="title">BigDecimal</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ROUND_HALF_UP = BigDecimal.ROUND_HALF_UP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer TRANSACTIONS_SCALE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BigDecimal sum = BigDecimal.ZERO.setScale(TRANSACTIONS_SCALE, ROUND_HALF_UP);</span><br><span class="line"><span class="keyword">private</span> BigDecimal minimum = BigDecimal.ZERO.setScale(TRANSACTIONS_SCALE, ROUND_HALF_UP);</span><br><span class="line"><span class="keyword">private</span> BigDecimal maximum = BigDecimal.ZERO.setScale(TRANSACTIONS_SCALE, ROUND_HALF_UP);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Collector&lt;BigDecimal, ?, MyBigDecimalSummaryCollector&gt; myBigDecimalSummaryStatistics() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Collector.of(MyBigDecimalSummaryCollector::<span class="keyword">new</span>, MyBigDecimalSummaryCollector::accept,</span><br><span class="line">MyBigDecimalSummaryCollector::merge);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(BigDecimal t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">firstElementSetup(t);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sum = sum.add(t);</span><br><span class="line">minimum = minimum.min(t);</span><br><span class="line">maximum = maximum.max(t);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyBigDecimalSummaryCollector <span class="title">merge</span><span class="params">(MyBigDecimalSummaryCollector s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">setupFirstElement(s);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sum = sum.add(s.sum);</span><br><span class="line">minimum = minimum.min(s.minimum);</span><br><span class="line">maximum = maximum.max(s.maximum);</span><br><span class="line">count += s.count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupFirstElement</span><span class="params">(MyBigDecimalSummaryCollector s)</span> </span>&#123;</span><br><span class="line">count = s.count;</span><br><span class="line">sum = s.sum;</span><br><span class="line">minimum = s.minimum;</span><br><span class="line">maximum = s.maximum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">firstElementSetup</span><span class="params">(BigDecimal t)</span> </span>&#123;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">sum = t;</span><br><span class="line">minimum = t;</span><br><span class="line">maximum = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getAverage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> BigDecimal.ZERO.setScale(TRANSACTIONS_SCALE, ROUND_HALF_UP);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum.divide(BigDecimal.valueOf(count), TRANSACTIONS_SCALE,</span><br><span class="line">ROUND_HALF_UP);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSum</span><span class="params">(BigDecimal sum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sum = sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getMinimum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> minimum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinimum</span><span class="params">(BigDecimal minimum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.minimum = minimum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getMaximum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> maximum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaximum</span><span class="params">(BigDecimal maximum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maximum = maximum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.count = count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"MyBigDecimalSummaryCollector [sum="</span> + sum + <span class="string">", minimum="</span> + minimum + <span class="string">", maximum="</span> + maximum + <span class="string">", count="</span></span><br><span class="line">+ count + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Step 2 </strong> :</p><figure class="highlight java"><figcaption><span>Use Collector</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MyBigDecimalSummaryCollector collect = IntStream.range(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line">.mapToObj(number -&gt; BigDecimal.valueOf(number))</span><br><span class="line">.collect(MyBigDecimalSummaryCollector.myBigDecimalSummaryStatistics());</span><br><span class="line"></span><br><span class="line">System.out.println(collect);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this Article , we’ll Discuss How we can &lt;strong&gt;Create our own Custom Collector&lt;/strong&gt; in java 8 and above.&lt;br&gt;For this article, We 
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Collector" scheme="https://nirajsonawane.github.io/categories/Java-8/Collector/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Java-9" scheme="https://nirajsonawane.github.io/tags/Java-9/"/>
    
      <category term="Collector" scheme="https://nirajsonawane.github.io/tags/Collector/"/>
    
      <category term="Bigdecimal" scheme="https://nirajsonawane.github.io/tags/Bigdecimal/"/>
    
      <category term="Summary Statistics" scheme="https://nirajsonawane.github.io/tags/Summary-Statistics/"/>
    
  </entry>
  
  <entry>
    <title>Angular pipes</title>
    <link href="https://nirajsonawane.github.io/2018/08/05/Angular-pipes/"/>
    <id>https://nirajsonawane.github.io/2018/08/05/Angular-pipes/</id>
    <published>2018-08-05T14:33:17.000Z</published>
    <updated>2018-09-02T16:54:28.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Angular-Pipes-are-used-to-transforms-texts"><a href="#Angular-Pipes-are-used-to-transforms-texts" class="headerlink" title="Angular Pipes are used to transforms texts."></a>Angular Pipes are used to transforms texts.</h3><p>A pipe takes in data as input and transforms it to a desired output</p><h4 id="LowerCase-Pipe"><a href="#LowerCase-Pipe" class="headerlink" title="LowerCase Pipe"></a>LowerCase Pipe</h4><p>Transforms text to all lower case. It is used as follows. </p><pre><code>{{value_expression | lowercase }}</code></pre><h4 id="UpperCase-Pipe"><a href="#UpperCase-Pipe" class="headerlink" title="UpperCase Pipe"></a>UpperCase Pipe</h4><p>Transforms text to all Upper case. It is used as follows. </p><pre><code>{{ value_expression | uppercase  }} </code></pre><h4 id="TitleCasePipe"><a href="#TitleCasePipe" class="headerlink" title="TitleCasePipe"></a>TitleCasePipe</h4><p>Transforms text to title case. Capitalizes the first letter of each word, and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</p><pre><code>{{ value_expression | titlecase }}</code></pre><h4 id="Date-Pipe"><a href="#Date-Pipe" class="headerlink" title="Date Pipe"></a>Date Pipe</h4><p>Converts the Date to human-friendly date</p><h4 id="CurrencyPipe"><a href="#CurrencyPipe" class="headerlink" title="CurrencyPipe"></a>CurrencyPipe</h4><p>Transforms a number to a currency string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Angular-Pipes-are-used-to-transforms-texts&quot;&gt;&lt;a href=&quot;#Angular-Pipes-are-used-to-transforms-texts&quot; class=&quot;headerlink&quot; title=&quot;Angular 
      
    
    </summary>
    
      <category term="Angular 6" scheme="https://nirajsonawane.github.io/categories/Angular-6/"/>
    
    
      <category term="Angular 6" scheme="https://nirajsonawane.github.io/tags/Angular-6/"/>
    
      <category term="Pipes" scheme="https://nirajsonawane.github.io/tags/Pipes/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Smart Casts</title>
    <link href="https://nirajsonawane.github.io/2018/07/30/Kotlin-Smart-Casts/"/>
    <id>https://nirajsonawane.github.io/2018/07/30/Kotlin-Smart-Casts/</id>
    <published>2018-07-30T16:46:36.000Z</published>
    <updated>2018-07-31T00:29:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Many times while working we need to check if an object is of certain type at runtime. </p><p>In java we have <code>instanceof</code> operator  to check whether the object is an instance of the specified type.</p><figure class="highlight java"><figcaption><span>instanceof Java Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceofExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyClass obj=<span class="keyword">new</span> MyClass();  </span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> MyClass);<span class="comment">//true </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In Kotlin, You can check whether an object is of a certain type at runtime by using the <code>is</code> operator. </p><figure class="highlight kotlin"><figcaption><span>is operator Kotlin Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">        print(obj.length)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (obj !<span class="keyword">is</span> String) &#123; <span class="comment">// same as !(obj is String)</span></span><br><span class="line">print(<span class="string">"Not a String"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">print(obj.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Smart-Casts"><a href="#Smart-Casts" class="headerlink" title="Smart Casts"></a>Smart Casts</h3><p><strong>Kotlin Complier is quite smart and help us to avoid  boilerplate code.</strong></p><p>In many cases we do not need to use explicit cast operators , because the compiler tracks the is -checks and explicit casts for immutable values and inserts (safe) casts automatically when needed:</p><figure class="highlight kotlin"><figcaption><span>Smart Casts Kotlin Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">demo</span><span class="params">(x: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">is</span> String) &#123;</span><br><span class="line">    print(x.length) <span class="comment">// x is automatically cast to String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The compiler is smart enough to know a cast to be safe if a negative check leads to a return:<br><figure class="highlight kotlin"><figcaption><span>Smart Casts Kotlin Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x !<span class="keyword">is</span> String) <span class="keyword">return</span></span><br><span class="line">    print(x.length) <span class="comment">// x is automatically cast to String</span></span><br></pre></td></tr></table></figure></p><p>Such smart casts work for when-expressions and while-loops as well:<br><figure class="highlight kotlin"><figcaption><span>Smart Casts Kotlin Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">     <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; print(x + <span class="number">1</span>)</span><br><span class="line">     <span class="keyword">is</span> String -&gt; print(x.length + <span class="number">1</span>)</span><br><span class="line">     <span class="keyword">is</span> IntArray -&gt; print(x.sum())</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many times while working we need to check if an object is of certain type at runtime. &lt;/p&gt;
&lt;p&gt;In java we have &lt;code&gt;instanceof&lt;/code&gt; ope
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://nirajsonawane.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://nirajsonawane.github.io/tags/Kotlin/"/>
    
      <category term="Smart Casts" scheme="https://nirajsonawane.github.io/tags/Smart-Casts/"/>
    
      <category term="Kotlin Types" scheme="https://nirajsonawane.github.io/tags/Kotlin-Types/"/>
    
  </entry>
  
  <entry>
    <title>Remove Optional Empty/Null values from list</title>
    <link href="https://nirajsonawane.github.io/2018/06/21/Remove-Optional-Empty-null-values-from-list/"/>
    <id>https://nirajsonawane.github.io/2018/06/21/Remove-Optional-Empty-null-values-from-list/</id>
    <published>2018-06-21T06:19:10.000Z</published>
    <updated>2018-07-30T16:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this Article , we’ll Discuss, How we can <strong>Convert Stream of Optional elements to a Stream of present value elements.</strong></p><p>Java 8 has added <code>Optional</code> type to avoid null pointer exception.</p><p>lets say we have <code>List&lt;Optional&lt;String&gt;&gt;</code> and for further processing we want <code>List&lt;Strings&gt;</code>.<br>In This case we need to remove the null and empty elements from stream and convert it into a Stream of present value elements.</p><figure class="highlight java"><figcaption><span>Convert Stream of Optional elements to a Stream of present value elements</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Input List </span></span><br><span class="line">List&lt;Optional&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(Optional.empty());</span><br><span class="line">list.add(Optional.of(<span class="string">"Str1"</span>));</span><br><span class="line">list.add(Optional.of(<span class="string">"Str2"</span>));</span><br><span class="line">list.add(Optional.empty());</span><br><span class="line">list.add(Optional.ofNullable(<span class="keyword">null</span>));</span><br><span class="line"><span class="comment">//Using Filter</span></span><br><span class="line">List&lt;String&gt; listWithoutNull = list.stream()</span><br><span class="line">                                   .filter(Optional::isPresent)</span><br><span class="line">                                   .map(obj -&gt;obj.get())</span><br><span class="line">                                   .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//Using removeIf (if that list supports removal )</span></span><br><span class="line">                        list.removeIf(iteam-&gt;!iteam.isPresent());                                  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Java-9"><a href="#Java-9" class="headerlink" title="Java 9"></a>Java 9</h4><p>In java 9 We can easily convert Stream of optionals to a stream of present values.<br>Using newly  addded  <code>Optional::stream</code> API </p><figure class="highlight java"><figcaption><span>java 9</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; listWithoutNull = list.stream()</span><br><span class="line">                                  .flatMap(Optional::stream)</span><br><span class="line">                                 .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this Article , we’ll Discuss, How we can &lt;strong&gt;Convert Stream of Optional elements to a Stream of present value elements.&lt;/strong&gt;&lt;/
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="Stream" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/"/>
    
      <category term="Filter" scheme="https://nirajsonawane.github.io/categories/Java-8/Stream/Filter/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Java-9" scheme="https://nirajsonawane.github.io/tags/Java-9/"/>
    
      <category term="Optional" scheme="https://nirajsonawane.github.io/tags/Optional/"/>
    
      <category term="Filter" scheme="https://nirajsonawane.github.io/tags/Filter/"/>
    
  </entry>
  
  <entry>
    <title>Exchanger</title>
    <link href="https://nirajsonawane.github.io/2018/06/18/Exchanger/"/>
    <id>https://nirajsonawane.github.io/2018/06/18/Exchanger/</id>
    <published>2018-06-18T12:35:57.000Z</published>
    <updated>2018-06-20T02:13:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>This Article is part of Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.<br>In this article, we’ll focus on a the concept of <code>Exchanger</code> in the Java language.</p><h3 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h3><p>The exchanger class provides a kind of point for two threads, where threads can exchange their objects with other threads.An Exchanger may be viewed as a bidirectional form of a SynchronousQueue. Exchangers may be useful in applications such as genetic algorithms and pipeline designs.<br>When a thread arrives at an exchange point, it is necessary to wait for another thread to arrive. When other partners come in threads, two threads go forward to exchange threads.</p><p><em>In below example two threads are passing Integer values to each others. Both the Thread will wait until they receive the Information</em></p><figure class="highlight java"><figcaption><span>Exchanger Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Exchanger&lt;Integer&gt; exchanger;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FirstThread</span><span class="params">(Exchanger&lt;Integer&gt; exchanger)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Passing information form FirstThread"</span>);</span><br><span class="line">Integer exchange = exchanger.exchange(<span class="number">99</span>);</span><br><span class="line">System.out.println(<span class="string">"Information Sent From FirstThread"</span>);</span><br><span class="line">System.out.println(<span class="string">"Received information from Second Thread."</span> + exchange);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Exchanger&lt;Integer&gt; exchanger;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SecondThread</span><span class="params">(Exchanger&lt;Integer&gt; exchanger)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Receiving information from First Thread."</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">Integer exchange = exchanger.exchange(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"Received information from first Thread."</span> + exchange);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Exchanger&lt;Integer&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line"></span><br><span class="line">ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">newFixedThreadPool.submit(<span class="keyword">new</span> FirstThread(exchanger));</span><br><span class="line">newFixedThreadPool.submit(<span class="keyword">new</span> SecondThread(exchanger));</span><br><span class="line">newFixedThreadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/06/18/Exchanger/output.png" title="OutPut">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Article is part of Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concurr
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>BlockingQueue</title>
    <link href="https://nirajsonawane.github.io/2018/06/18/BlockingQueue/"/>
    <id>https://nirajsonawane.github.io/2018/06/18/BlockingQueue/</id>
    <published>2018-06-18T09:57:41.000Z</published>
    <updated>2018-06-18T12:25:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>This Article is part of Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.<br>In this article, we’ll focus on a the concept of <code>BlockingQueue</code> in the Java language.</p><h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><p>A Queue that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.</p><p>A <code>BlockingQueue</code> may be capacity bounded. At any given time it may have a remainingCapacity beyond which no additional elements can be put without blocking. A BlockingQueue without any intrinsic capacity constraints always reports a remaining capacity of Integer.MAX_VALUE.</p><p><code>BlockingQueue</code> implementations are thread-safe. All queuing methods achieve their effects atomically using internal locks or other forms of concurrency control. However, the bulk Collection operations addAll, containsAll, retainAll and removeAll are not necessarily performed atomically unless specified otherwise in an implementation. So it is possible, for example, for addAll(c) to fail (throwing an exception) after adding only some of the elements in c.</p><p><em>let’s implement Producer and Consumer Problem using BlockingQueue</em></p><figure class="highlight java"><figcaption><span>BlockingQueue Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueProducer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line"><span class="keyword">private</span> Random random;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockingQueueProducer</span><span class="params">(BlockingQueue&lt;Integer&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.blockingQueue=blockingQueue;</span><br><span class="line"><span class="keyword">this</span>.random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"BlockingQueueProducer - Adding Elements"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">blockingQueue.put(random.nextInt(<span class="number">3000</span>));</span><br><span class="line">System.out.println(<span class="string">"Added Element : Current Size of Q "</span> + blockingQueue.size());</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueConsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockingQueueConsumer</span><span class="params">(BlockingQueue&lt;Integer&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.blockingQueue=blockingQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"BlockingQueueConsumer : iteam recived from Q "</span> + blockingQueue.take() );</span><br><span class="line">Thread.sleep(<span class="number">2500</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BlockingQueue&lt;Integer&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(<span class="number">5</span>);</span><br><span class="line">ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">newFixedThreadPool.submit(<span class="keyword">new</span> BlockingQueueConsumer(blockingQueue));</span><br><span class="line">newFixedThreadPool.submit(<span class="keyword">new</span> BlockingQueueProducer(blockingQueue));</span><br><span class="line">newFixedThreadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2018/06/18/BlockingQueue/output.png" title="OutPut"><h4 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h4><h4 id="put-E-e"><a href="#put-E-e" class="headerlink" title="put(E e)"></a>put(E e)</h4><p>Inserts the specified element into this queue, waiting if necessary for space to become available.</p><h4 id="take"><a href="#take" class="headerlink" title="take()"></a>take()</h4><p>Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.</p><h4 id="poll"><a href="#poll" class="headerlink" title="poll()"></a>poll()</h4><p>Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Article is part of Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concurr
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
</feed>
