<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niraj Sonawane</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nirajsonawane.github.io/"/>
  <updated>2018-06-10T12:11:51.659Z</updated>
  <id>https://nirajsonawane.github.io/</id>
  
  <author>
    <name>Niraj Sonawane</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Join Method</title>
    <link href="https://nirajsonawane.github.io/2018/06/10/Join-Method/"/>
    <id>https://nirajsonawane.github.io/2018/06/10/Join-Method/</id>
    <published>2018-06-10T11:40:23.000Z</published>
    <updated>2018-06-10T12:11:51.659Z</updated>
    
    <content type="html"><![CDATA[<p>This is Second Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><p>The <code>join</code> method allows one thread to wait for the completion of another. If t is a <code>Thread</code> object whose thread is currently executing,</p><p><code>t.join();</code><br>causes the current thread to pause execution until tâ€™s thread terminates.</p><p>Overloads of join allow the programmer to specify a waiting period. However, as with sleep, join is dependent on the OS for timing, so you should not assume that join will wait exactly as long as you specify.</p><p><code>join</code> responds to an interrupt by exiting with an <code>InterruptedException</code></p><figure class="highlight java"><figcaption><span>Join Method Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinMethodExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">"Thread Number 1"</span>));</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">"Thread Number 2"</span>));</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">  System.out.println(<span class="string">"Main Method End"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/06/10/Join-Method/output1.png" title="OutPut"><p>If you check output , The main <code>Thread</code> ends before <code>T2</code> Thread. If you want to wait for Completion of  <code>T2</code> then we need to call <code>join</code> method.</p><figure class="highlight java"><figcaption><span>Join Method Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinMethodExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">"Thread Number 1"</span>));</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">"Thread Number 2"</span>));</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">  System.out.println(<span class="string">"Main Method End"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/06/10/Join-Method/output2.png" title="OutPut">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Second Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concu
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Creating Threads in Java</title>
    <link href="https://nirajsonawane.github.io/2018/06/10/Creating-Threads/"/>
    <id>https://nirajsonawane.github.io/2018/06/10/Creating-Threads/</id>
    <published>2018-06-10T10:17:39.000Z</published>
    <updated>2018-06-10T12:09:20.180Z</updated>
    
    <content type="html"><![CDATA[<p>This is First Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><h3 id="Threads-can-be-Created-using-below-ways"><a href="#Threads-can-be-Created-using-below-ways" class="headerlink" title="Threads can be Created using below ways."></a>Threads can be Created using below ways.</h3><h4 id="Extending-Thread-class"><a href="#Extending-Thread-class" class="headerlink" title="Extending Thread class"></a>Extending Thread class</h4><p>The First way is to extend the <code>Thread</code> class, and  override the <code>run()</code><br>The extending class must override <code>run()</code> method which is the entry point of new thread.</p><figure class="highlight java"><figcaption><span>Extending Thread class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadRunner</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"ThreadRunner : "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatingThreadsExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"></span><br><span class="line">Thread t1= <span class="keyword">new</span> ThreadRunner();</span><br><span class="line">t1.start();</span><br><span class="line">System.out.println(<span class="string">"Main Method End"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Implementing-the-Runnable-Interface"><a href="#Implementing-the-Runnable-Interface" class="headerlink" title="Implementing the Runnable Interface"></a>Implementing the Runnable Interface</h4><p>We Can pass an implementation of the Runnable interface to the constructor of <code>Thread</code>, then call <code>start()</code></p><figure class="highlight java"><figcaption><span>Implementing the Runnable Interface</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"ThreadRunner1 : "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatingThreadsExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"></span><br><span class="line">Thread t1= <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadRunner());</span><br><span class="line">t1.start();</span><br><span class="line">System.out.println(<span class="string">"Main Method End"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Threads-Using-Anonymous-Classes"><a href="#Threads-Using-Anonymous-Classes" class="headerlink" title="Threads Using Anonymous Classes"></a>Threads Using Anonymous Classes</h4><p><strong>Anonymous Inner class</strong> is an inner class that is declared without any class name and thatâ€™s why itâ€™s called anonymous. You can define an anonymous inner class within a method or even within an argument to a method. </p><p>Anonymous class can be used to -<br><strong>Extend</strong> an class and override its method.<br><strong>Implement</strong> an interface and provide an implementation of its method.</p><figure class="highlight java"><figcaption><span>Threads Using Anonymous Classes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatingThreadsExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"ThreadRunner : "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Threads-Using-Java-8-Lambda"><a href="#Threads-Using-Java-8-Lambda" class="headerlink" title="Threads Using Java 8 Lambda"></a>Threads Using Java 8 Lambda</h4><p><code>Runnable</code> is a functional interface and we can use lambda expressions to provide itâ€™s implementation rather than using anonymous class. </p><figure class="highlight java"><figcaption><span>Threads Using Anonymous Classes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatingThreadsExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Runnable task = () -&gt; &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"ThreadRunner2 : "</span> + i);</span><br><span class="line">&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(task).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next <a href="/2018/06/10/Join-Method/" title="Join Method">Join Method</a>.  in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is First Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concur
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 Concurrency Tutorial</title>
    <link href="https://nirajsonawane.github.io/2018/06/10/Concurrency-1-0/"/>
    <id>https://nirajsonawane.github.io/2018/06/10/Concurrency-1-0/</id>
    <published>2018-06-10T09:56:34.000Z</published>
    <updated>2018-06-10T12:10:10.870Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Java Concurrency tutorials. These articles will describe you the Java Concurrency concepts in the context of Java 8 with easily understood code examples. </p><p>The majority of concepts shown in these articles are also available in older versions of Java.<br>However, my code samples focus on Java 8 and make heavy use of lambda expressions and other new features.</p><h4 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h4><ol><li><a href="/2018/06/10/Creating-Threads/" title="Creating Threads in Java">Creating Threads in Java</a></li><li><a href="/2018/06/10/Join-Method/" title="Join Method">Join Method</a></li><li>Threads pools with the Executor Framework</li><li>Futures and Callables</li><li>CompletableFuture</li><li>Nonblocking algorithms</li><li>Fork-Join in Java 7</li><li>Deadlock</li></ol><p>Check The  First Article in Series of Java Concurrency tutorials <a href="/2018/06/10/Creating-Threads/" title="Creating Threads in Java">Creating Threads in Java</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to Java Concurrency tutorials. These articles will describe you the Java Concurrency concepts in the context of Java 8 with easil
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Watching a Directory for Changes</title>
    <link href="https://nirajsonawane.github.io/2018/06/01/Watching-a-Directory-for-Changes/"/>
    <id>https://nirajsonawane.github.io/2018/06/01/Watching-a-Directory-for-Changes/</id>
    <published>2018-06-01T01:12:32.000Z</published>
    <updated>2018-06-09T19:05:32.934Z</updated>
    
    <content type="html"><![CDATA[<p>The <code>java.nio.file</code> package provides a file change notification API, called the <strong>Watch Service API</strong>.</p><p>This API enables you to register a directory (or directories) with the watch service. When registering, you tell the service which types of events you are interested in:<br><strong>1:File creation.<br>2:File deletion.<br>3:File Modification.</strong></p><p>When the service detects an event of interest, it is forwarded to the registered process. </p><p>The registered process has a thread (or a pool of threads) dedicated to watching for any events it has registered for. When an event comes in, it is handled as needed.</p><h4 id="Creating-watcher-service"><a href="#Creating-watcher-service" class="headerlink" title="Creating watcher service"></a>Creating watcher service</h4><p>The first step is to create a new <code>WatchService</code> by using the <code>newWatchService</code> method in the <code>FileSystem</code> class, as follows:</p><p><code>WatchService watcher = FileSystems.getDefault().newWatchService()</code></p><h4 id="Registering-for-Events"><a href="#Registering-for-Events" class="headerlink" title="Registering for Events"></a>Registering for Events</h4><p>We Can register one or more objects with the watch service.<strong>Any object that implements the Watchable interface</strong> can be registered.<br>The <code>Path</code> class implements the Watchable interface, so each directory to be monitored is registered as a Path object.</p><p>When registering an object with the watch service, you specify the types of events that you want to monitor. The supported <em>StandardWatchEventKinds</em> event types follow:</p><ol><li><code>ENTRY_CREATE</code> â€“ A directory entry is created.</li><li><code>ENTRY_DELETE</code> â€“ A directory entry is deleted.</li><li><code>ENTRY_MODIFY</code> â€“ A directory entry is modified.</li></ol><figure class="highlight java"><figcaption><span>Registering for Events</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WatchService watcher = FileSystems.getDefault().newWatchService()</span><br><span class="line">Path dir = Paths.get(<span class="string">"C:\\data\\temp\\mydir\\"</span>);</span><br><span class="line">dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);</span><br></pre></td></tr></table></figure><h3 id="Directory-Watching-Example"><a href="#Directory-Watching-Example" class="headerlink" title="Directory Watching Example"></a>Directory Watching Example</h3><p>Putting all above together. We can now go ahead and look at a complete and practical example.</p><p>In below example we are going to watch directory for all the changes and will process the events. </p><figure class="highlight java"><figcaption><span>Directory Watching Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.WatchEvent;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.WatchKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.WatchService;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectoryChangeListeners</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WatchService watcher = FileSystems.getDefault().newWatchService();</span><br><span class="line">            Path dir = Paths.get(<span class="string">"C:\\data\\temp\\"</span>);</span><br><span class="line">            dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);             </span><br><span class="line">            System.out.println(<span class="string">"Watch Service registered for dir: "</span> + dir.getFileName());</span><br><span class="line">            WatchKey key;</span><br><span class="line">            <span class="keyword">while</span> ((key = watcher.take())!=<span class="keyword">null</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (WatchEvent&lt;?&gt; event : key.pollEvents()) &#123;</span><br><span class="line">                     </span><br><span class="line">                WatchEvent.Kind&lt;?&gt; kind = event.kind();</span><br><span class="line">                    </span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    WatchEvent&lt;Path&gt; ev = (WatchEvent&lt;Path&gt;) event;</span><br><span class="line">                    Path fileName = ev.context();</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(kind==ENTRY_CREATE)</span><br><span class="line">                    &#123;</span><br><span class="line">                    System.out.println(<span class="string">"New File Added, file Name "</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(kind==ENTRY_DELETE)</span><br><span class="line">                    &#123;</span><br><span class="line">                    System.out.println(<span class="string">"File Deleted "</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line">                     </span><br><span class="line">                    <span class="keyword">if</span> (kind == ENTRY_MODIFY ) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"File Modified "</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">boolean</span> valid = key.reset();</span><br><span class="line">                <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            System.err.println(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h3><h5 id="Three-methods-are-available-for-Retrieving-events"><a href="#Three-methods-are-available-for-Retrieving-events" class="headerlink" title="Three methods are available for Retrieving events :"></a>Three methods are available for Retrieving events :</h5><ol><li><code>poll</code> â€“ Returns a queued key, if available. Returns immediately with a null value, if unavailable.</li><li><code>poll(long, TimeUnit)</code> â€“ Returns a queued key, if one is available. If a queued key is not immediately available, the program waits until the specified time. The TimeUnit argument determines whether the specified time is nanoseconds, milliseconds, or some other unit of time.</li><li><code>take</code> â€“ Returns a queued key. If no queued key is available, this method waits.</li></ol><h5 id="Reset-key"><a href="#Reset-key" class="headerlink" title="Reset key"></a>Reset key</h5><p>After the events for the key have been processed, you need to put the key back into a ready state by invoking reset. If this method returns false, the key is no longer valid and the loop can exit. This step is very important. If you fail to invoke reset, this key will not receive any further events.</p><h5 id="When-to-Use-and-Not-Use-This-API"><a href="#When-to-Use-and-Not-Use-This-API" class="headerlink" title="When to Use and Not Use This API"></a>When to Use and Not Use This API</h5><p>The Watch Service API is designed for applications that need to be notified about file change events. It is well suited for any application, like an editor or IDE, that potentially has many open files and needs to ensure that the files are synchronized with the file system. It is also well suited for an application server that watches a directory, perhaps waiting for .jsp or .jar files to drop, in order to deploy them.</p><p>This API is not designed for indexing a hard drive. Most file system implementations have native support for file change notification. The Watch Service API takes advantage of this support where available. However, when a file system does not support this mechanism, the Watch Service will poll the file system, waiting for events.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The &lt;code&gt;java.nio.file&lt;/code&gt; package provides a file change notification API, called the &lt;strong&gt;Watch Service API&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Thi
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="File" scheme="https://nirajsonawane.github.io/categories/Java-8/File/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 File Operations - Copy,Delete,Move</title>
    <link href="https://nirajsonawane.github.io/2018/05/30/java-8-File-Operations-Copy-Delete-Move/"/>
    <id>https://nirajsonawane.github.io/2018/05/30/java-8-File-Operations-Copy-Delete-Move/</id>
    <published>2018-05-30T01:22:00.000Z</published>
    <updated>2018-06-09T19:07:07.541Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Deleting-a-File-or-Directory"><a href="#Deleting-a-File-or-Directory" class="headerlink" title="Deleting a File or Directory"></a>Deleting a File or Directory</h4><p>The <code>Files</code> class provides two deletion methods.</p><p>1 : The <code>delete(Path)</code> method deletes the file or throws an exception if the deletion fails</p><p>2 : The <code>deleteIfExists(Path)</code> method also deletes the file, but if the file does not exist, no exception is thrown.</p><figure class="highlight java"><figcaption><span>Delete File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Path path = Paths.get(<span class="string">"C:\\data\\temp\\temp.txt"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Files.delete(path);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Delete Empty Directory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Path path = Paths.get(<span class="string">"C:\\data\\temp\\"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Files.delete(path);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Trying to delete Non Empty Directory will throw <code>DirectoryNotEmptyException</code>.<br>So, First we need to delete all files inside a particular non-empty directory:</p><figure class="highlight java"><figcaption><span>Delete Non Empty Directory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Path path = Paths.get(<span class="string">"C:\\data\\temp\\"</span>);</span><br><span class="line">Files.walk(path)</span><br><span class="line">     .sorted(Comparator.reverseOrder())</span><br><span class="line">     .map(Path::toFile)</span><br><span class="line">     .forEach(File::delete);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Copying-a-File-or-Directory"><a href="#Copying-a-File-or-Directory" class="headerlink" title="Copying a File or Directory"></a>Copying a File or Directory</h4><p>You can copy a file or directory by using the<br><code>copy(Path, Path, CopyOption...)</code> method. The copy fails if the target file exists, unless the <code>REPLACE_EXISTING</code> option is specified.</p><p>This method takes a varargs argument. The following StandardCopyOption and LinkOption enums are supported:</p><p><strong>REPLACE_EXISTING</strong> â€“ replace a file if it exists<br><strong>COPY_ATTRIBUTES</strong> â€“ copy metadata to the new file<br><strong>NOFOLLOW_LINKS</strong> â€“ shouldnâ€™t follow symbolic links</p><figure class="highlight java"><figcaption><span>Copy File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Path sourcepath = Paths.get(<span class="string">"C:\\data\\temp\\temp.txt"</span>);</span><br><span class="line">Path destinationepath = Paths.get(<span class="string">"C:\\data\\temp\\destination.txt"</span>);</span><br><span class="line">    Files.copy(sourcepath, destinationepath, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Copy Empty Directory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Path sourcepath = Paths.get(<span class="string">"C:\\data\\temp\\mydir"</span>);</span><br><span class="line">       Path destinationepath =         Paths.get(<span class="string">"C:\\data\\temp\\destinationDir"</span>);</span><br><span class="line">       Files.copy(sourcepath, destinationepath, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Copy Non empty Directory</strong><br>Directories can be copied. However, files inside the directory are not copied, so the new directory is empty even when the original directory contains files.</p><figure class="highlight java"><figcaption><span>Copy Non Empty Directory recursively</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Path sourcepath = Paths.get(<span class="string">"C:\\data\\temp\\mydir"</span>);</span><br><span class="line">Path destinationepath = Paths.get(<span class="string">"C:\\data\\temp\\destinationDir"</span>);  </span><br><span class="line">Files.walk(sourcepath)</span><br><span class="line">             .forEach(source -&gt; copy(source, destinationepath.resolve(sourcepath.relativize(source))));</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(Path source, Path dest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Files.copy(source, dest, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Moving-a-File-or-Directory"><a href="#Moving-a-File-or-Directory" class="headerlink" title="Moving a File or Directory"></a>Moving a File or Directory</h4><p>You can move a file or directory by using the <code>move(Path, Path, CopyOption...)</code> method.<br>The move fails if the target file exists, unless the <code>REPLACE_EXISTING</code> option is specified.</p><p>Empty directories can be moved. If the directory is not empty, the move is allowed when the directory can be moved without moving the contents of that directory. On UNIX systems, moving a directory within the same partition generally consists of renaming the directory. In that situation, this method works even when the directory contains files.</p><p>This method takes a varargs argument â€“ the following <code>StandardCopyOption</code> enums are supported:</p><p><strong>REPLACE_EXISTING</strong> â€“ Performs the move even when the target file already exists. If the target is a symbolic link, the symbolic link is replaced but what it points to is not affected.<br><strong>ATOMIC_MOVE</strong> â€“ Performs the move as an atomic file operation. If the file system does not support an atomic move, an exception is thrown. With an ATOMIC_MOVE you can move a file into a directory and be guaranteed that any process watching the directory accesses a complete file.</p><figure class="highlight java"><figcaption><span>Move File</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Path sourcepath = Path sourcepath = Paths.get(<span class="string">"C:\\data\\temp\\temp.txt"</span>);</span><br><span class="line">Path destinationepath = Paths.get(<span class="string">"C:\\data\\temp\\mydir\\temp.txtr"</span>);</span><br><span class="line"></span><br><span class="line">Files.move(sourcepath, destinationepath, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Move Empty Directory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Path sourcepath = Paths.get(<span class="string">"C:\\data\\temp\\copyme"</span>);</span><br><span class="line">Path destinationepath = Paths.get(<span class="string">"C:\\data\\temp\\mydir\\copyme"</span>);</span><br><span class="line">Files.move(sourcepath, destinationepath, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Move Non Empty Directory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">              Path sourcepath = Paths.get(<span class="string">"C:\\data\\temp\\copyme"</span>);</span><br><span class="line">              Path destinationepath = Paths.get(<span class="string">"C:\\data\\temp\\mydir\\copyme"</span>);</span><br><span class="line">              Files.move(sourcepath, destinationepath, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Deleting-a-File-or-Directory&quot;&gt;&lt;a href=&quot;#Deleting-a-File-or-Directory&quot; class=&quot;headerlink&quot; title=&quot;Deleting a File or Directory&quot;&gt;&lt;/a&gt;De
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="File" scheme="https://nirajsonawane.github.io/categories/Java-8/File/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 List all Files in Directory and Subdirectories</title>
    <link href="https://nirajsonawane.github.io/2018/05/29/Java-8-List-all-Files-in-Directory-and-Subdirectories/"/>
    <id>https://nirajsonawane.github.io/2018/05/29/Java-8-List-all-Files-in-Directory-and-Subdirectories/</id>
    <published>2018-05-29T02:10:02.000Z</published>
    <updated>2018-06-09T19:07:28.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="List-All-Files-in-Directory-and-Subdirectories"><a href="#List-All-Files-in-Directory-and-Subdirectories" class="headerlink" title="List All Files in Directory and Subdirectories"></a>List All Files in Directory and Subdirectories</h3><p><code>Files.walk</code> Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file.</p><p><code>Files.list</code> Method Return a lazily populated Stream for the current directory only,<code>Files.walk</code> can be used to get list of files  from Directory &amp; Subdirectories . </p><h5 id="Example-1-List-All-Files-in-Directory-and-Subdirectories"><a href="#Example-1-List-All-Files-in-Directory-and-Subdirectories" class="headerlink" title="Example 1: List All Files in Directory and Subdirectories"></a>Example 1: List All Files in Directory and Subdirectories</h5><figure class="highlight java"><figcaption><span>List All Files in Directory and Subdirectories</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">Path start = Paths.get(<span class="string">"C:\\data\\"</span>);</span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; stream = Files.walk(start, Integer.MAX_VALUE)) &#123;</span><br><span class="line">    List&lt;String&gt; collect = stream</span><br><span class="line">        .map(String::valueOf)</span><br><span class="line">        .sorted()</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    </span><br><span class="line">    collect.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p><code>Files.walk</code> method takes <code>int maxDepth</code> as parameter. The maxDepth parameter is the maximum number of levels of directories to visit.<br><code>MAX_VALUE</code> may be used to indicate that all levels should be visited. Value 1 can be used to list files in current Directory. </p><h5 id="Example-2-List-All-Files-in-Current-Directory-only"><a href="#Example-2-List-All-Files-in-Current-Directory-only" class="headerlink" title="Example 2: List All Files in Current Directory only"></a>Example 2: List All Files in Current Directory only</h5><figure class="highlight java"><figcaption><span>List All Files in Current Directory only</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">Path start = Paths.get(<span class="string">"C:\\data\\"</span>);</span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; stream = Files.walk(start, <span class="number">1</span>)) &#123;</span><br><span class="line">    List&lt;String&gt; collect = stream</span><br><span class="line">        .map(String::valueOf)</span><br><span class="line">        .sorted()</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    </span><br><span class="line">    collect.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;List-All-Files-in-Directory-and-Subdirectories&quot;&gt;&lt;a href=&quot;#List-All-Files-in-Directory-and-Subdirectories&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="File" scheme="https://nirajsonawane.github.io/categories/Java-8/File/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 Read File With try-with-resources</title>
    <link href="https://nirajsonawane.github.io/2018/05/24/Java-8-Read-File-With-try-with-resources/"/>
    <id>https://nirajsonawane.github.io/2018/05/24/Java-8-Read-File-With-try-with-resources/</id>
    <published>2018-05-24T01:58:00.000Z</published>
    <updated>2018-05-23T17:16:29.444Z</updated>
    
    <content type="html"><![CDATA[<p>You might have noticed that In the previous post about files we have not closed any file stream. Streams implement <code>AutoCloseable</code> and in this case, we need to close stream explicitly. We can use try-with-resources to close the stream.</p><h3 id="Sample-Code"><a href="#Sample-Code" class="headerlink" title="Sample Code"></a>Sample Code</h3><figure class="highlight java"><figcaption><span>Close BufferedReader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String filePath = <span class="string">"C:\\data\\demo\\sample.txt"</span>;</span><br><span class="line"><span class="keyword">try</span>(BufferedReader reader = Files.newBufferedReader(Paths.get(filePath)))</span><br><span class="line">&#123;</span><br><span class="line">reader.lines().forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>    <figure class="highlight java"><figcaption><span>Close Stream</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String filePath = <span class="string">"C:\\data\\demo\\sample.txt"</span>;</span><br><span class="line"><span class="keyword">try</span>(Stream&lt;String&gt; lines = Files.lines(Paths.get((filePath))))</span><br><span class="line">&#123;</span><br><span class="line">lines.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You might have noticed that In the previous post about files we have not closed any file stream. Streams implement &lt;code&gt;AutoCloseable&lt;/c
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="File" scheme="https://nirajsonawane.github.io/categories/Java-8/File/"/>
    
      <category term="5.0 -Read File With try-with-resources" scheme="https://nirajsonawane.github.io/categories/Java-8/File/5-0-Read-File-With-try-with-resources/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 List All Files in Directory</title>
    <link href="https://nirajsonawane.github.io/2018/05/23/java-8-List-All-Files-in-Directory/"/>
    <id>https://nirajsonawane.github.io/2018/05/23/java-8-List-All-Files-in-Directory/</id>
    <published>2018-05-23T17:32:00.000Z</published>
    <updated>2018-05-23T18:48:21.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="List-All-Files-in-Directory"><a href="#List-All-Files-in-Directory" class="headerlink" title="List All Files in Directory"></a>List All Files in Directory</h3><p><code>Files.list</code> Method Return a lazily populated Stream, the elements of which are the entries in the directory.</p><p>We Can use the stream operations to find Specific Files, List file matching certain criteria, List filenames in sorted order etc.</p><h5 id="Example-1-List-All-Files-in-Directory"><a href="#Example-1-List-All-Files-in-Directory" class="headerlink" title="Example 1: List All Files in Directory"></a>Example 1: List All Files in Directory</h5><figure class="highlight java"><figcaption><span>List All Files in Directory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(Stream&lt;Path&gt; list = Files.list(Paths.get(<span class="string">"C:\\Program Files\\"</span>));)</span><br><span class="line">&#123;</span><br><span class="line">  list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Example-2-List-All-Files-in-Directory-Starting-with-A"><a href="#Example-2-List-All-Files-in-Directory-Starting-with-A" class="headerlink" title="Example 2: List All Files in Directory Starting with A"></a>Example 2: List All Files in Directory Starting with A</h5><figure class="highlight java"><figcaption><span>List All Files in Directory Starting with A</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; list = Files.list(Paths.get(<span class="string">"C:\\Program Files\\"</span>))) &#123;</span><br><span class="line">List&lt;String&gt; fileList = list.map(path -&gt; path.getFileName()</span><br><span class="line">.toString())</span><br><span class="line">.filter(name -&gt; name.startsWith(<span class="string">"A"</span>))</span><br><span class="line">.sorted()</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">fileList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h5 id="Example-3-List-Files-Only"><a href="#Example-3-List-Files-Only" class="headerlink" title="Example 3: List Files Only"></a>Example 3: List Files Only</h5><figure class="highlight java"><figcaption><span>List Files Only</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; list = Files.list(Paths.get(<span class="string">"C:\\Program Files\\"</span>))) &#123;</span><br><span class="line">List&lt;String&gt; fileList = list.filter(path-&gt;path.toFile().isFile())</span><br><span class="line">.map(path -&gt; path.getFileName().toString())</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">fileList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h5 id="Example-4-List-Directory-Only"><a href="#Example-4-List-Directory-Only" class="headerlink" title="Example 4: List Directory Only"></a>Example 4: List Directory Only</h5><figure class="highlight java"><figcaption><span>List Directory Only</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; list = Files.list(Paths.get(<span class="string">"C:\\Program Files\\"</span>))) &#123;</span><br><span class="line">List&lt;String&gt; fileList = list.filter(path-&gt;path.toFile().isDirectory())</span><br><span class="line">.map(path -&gt; path.getFileName().toString())</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">fileList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h5 id="Example-5-List-Hidden-files-Only"><a href="#Example-5-List-Hidden-files-Only" class="headerlink" title="Example 5: List Hidden files  Only"></a>Example 5: List Hidden files  Only</h5><figure class="highlight java"><figcaption><span>List Hidden files Only</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; list = Files.list(Paths.get(<span class="string">"C:\\Program Files\\"</span>))) &#123;</span><br><span class="line">List&lt;String&gt; fileList = list.filter(path-&gt;path.toFile().isHidden())</span><br><span class="line">.map(path -&gt; path.getFileName().toString())</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">fileList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p><code>Files.list</code> Method Return a lazily populated Stream for the directory.<br>It does not return Stream for the nested directory. For that, we Can use <code>File.walk</code> . Will discuss that in next chapter.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;List-All-Files-in-Directory&quot;&gt;&lt;a href=&quot;#List-All-Files-in-Directory&quot; class=&quot;headerlink&quot; title=&quot;List All Files in Directory&quot;&gt;&lt;/a&gt;List 
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="File" scheme="https://nirajsonawane.github.io/categories/Java-8/File/"/>
    
      <category term="6.0 - List All Files in Directory" scheme="https://nirajsonawane.github.io/categories/Java-8/File/6-0-List-All-Files-in-Directory/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 Read File Using Buffered Reader</title>
    <link href="https://nirajsonawane.github.io/2018/05/23/Java-8-Read-File-Using-Buffered-Reader/"/>
    <id>https://nirajsonawane.github.io/2018/05/23/Java-8-Read-File-Using-Buffered-Reader/</id>
    <published>2018-05-23T01:58:08.000Z</published>
    <updated>2018-05-23T17:22:35.928Z</updated>
    
    <content type="html"><![CDATA[<p>Finally, Java 8 has made Reading &amp; Writing a text file a simple task. </p><p>If we need more fine-grained control on reading we can use new <code>Files.newBufferedReader()</code> </p><h3 id="Read-File-Using-Buffered-Reader"><a href="#Read-File-Using-Buffered-Reader" class="headerlink" title="Read File Using Buffered Reader"></a>Read File Using Buffered Reader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8ReadUsingBufferedReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String filePath = <span class="string">"C:\\data\\demo\\sample.txt"</span>;</span><br><span class="line">BufferedReader reader = Files.newBufferedReader(Paths.get(filePath));</span><br><span class="line">reader.lines().forEach(System.out::println);    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    <figure class="highlight plain"><figcaption><span>Sample.txt file</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public final class Files extends Object</span><br><span class="line">This class consists exclusively of static methods that operate on files, directories, or other types of files.</span><br><span class="line">In most cases, the methods defined here will delegate to the associated file system provider to perform the file operations.</span><br><span class="line"></span><br><span class="line">Since:</span><br><span class="line">1.7</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Finally, Java 8 has made Reading &amp;amp; Writing a text file a simple task. &lt;/p&gt;
&lt;p&gt;If we need more fine-grained control on reading we can 
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="File" scheme="https://nirajsonawane.github.io/categories/Java-8/File/"/>
    
      <category term="4.0 -Read File Using Buffered Reader" scheme="https://nirajsonawane.github.io/categories/Java-8/File/4-0-Read-File-Using-Buffered-Reader/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 Read File As Single String</title>
    <link href="https://nirajsonawane.github.io/2018/05/22/Java-8-Read-File-As-Single-String/"/>
    <id>https://nirajsonawane.github.io/2018/05/22/Java-8-Read-File-As-Single-String/</id>
    <published>2018-05-22T01:58:08.000Z</published>
    <updated>2018-05-23T16:32:30.845Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8 has added <code>Files.lines()</code> method, which can be used to read the file as Stream. Joining Collector Can be used to convert Stream to Single String.</p><h3 id="Read-file-as-a-stream"><a href="#Read-file-as-a-stream" class="headerlink" title="Read file as a stream"></a>Read file as a stream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8ReadFileAsString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String filePath = <span class="string">"C:\\data\\demo\\sample.txt"</span>;</span><br><span class="line"> Stream&lt;String&gt; lines = Files.lines(Paths.get((filePath)));</span><br><span class="line">String fileAsString = lines.collect(Collectors.joining());</span><br><span class="line">System.out.println(fileAsString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    <figure class="highlight plain"><figcaption><span>Sample.txt file for testing.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public final class Files extends Object</span><br><span class="line">This class consists exclusively of static methods that operate on files, directories, or other types of files.</span><br><span class="line">In most cases, the methods defined here will delegate to the associated file system provider to perform the file operations.</span><br><span class="line"></span><br><span class="line">Since:</span><br><span class="line">1.7</span><br><span class="line"></span><br></pre></td></tr></table></figure>    ]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 8 has added &lt;code&gt;Files.lines()&lt;/code&gt; method, which can be used to read the file as Stream. Joining Collector Can be used to conver
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="File" scheme="https://nirajsonawane.github.io/categories/Java-8/File/"/>
    
      <category term="3.0 -Read File As Single String" scheme="https://nirajsonawane.github.io/categories/Java-8/File/3-0-Read-File-As-Single-String/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
  </entry>
  
</feed>
