<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niraj Sonawane</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nirajsonawane.github.io/"/>
  <updated>2018-06-15T19:04:38.067Z</updated>
  <id>https://nirajsonawane.github.io/</id>
  
  <author>
    <name>Niraj Sonawane</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ExecutorServiceAndThreadPools</title>
    <link href="https://nirajsonawane.github.io/2018/06/15/ExecutorServiceAndThreadPools/"/>
    <id>https://nirajsonawane.github.io/2018/06/15/ExecutorServiceAndThreadPools/</id>
    <published>2018-06-15T17:26:51.000Z</published>
    <updated>2018-06-15T19:04:38.067Z</updated>
    
    <content type="html"><![CDATA[<p>This Article is part of Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><p>In this quick article, weâ€™ll focus on a the concept of <code>ExecutorService</code> Framework in the Java language.</p><p><code>ExecutorService</code> is a framework simplifies the task of creating threads and managing thread  life cycle. <code>ExecutorService</code> is an interface, We need its implementations in order to make any use of it. </p><p><code>ThreadPoolExecutor</code> &amp; <code>ScheduledThreadPoolExecutor</code> implementations are available in java concurrent package.</p><h3 id="Creating-an-ExecutorService"><a href="#Creating-an-ExecutorService" class="headerlink" title="Creating an ExecutorService:"></a>Creating an ExecutorService:</h3><p><code>Executors</code> factory methods are available for creating ExecutorService. </p><p><code>ExecutorService executorService1 = Executors.newSingleThreadExecutor();</code><br><code>ExecutorService executorService2 = Executors.newFixedThreadPool(10);</code><br><code>ExecutorService executorService3 = Executors.newCachedThreadPool();</code></p><h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><p><code>newCachedThreadPool</code> method creates an executor having an expandable thread pool.Whenever a thread is needed, pool returns a thread from cache and if not available, a new thread is created for a short time. When the timeout of thread is over, that thread is vanished. </p><p><em>In below example 10 Threds will run Simultaneously </em></p><figure class="highlight java"><figcaption><span>newCachedThreadPool Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyWorker</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyWorker id "</span> + id + <span class="string">" IS Working"</span> + <span class="string">"Start Time "</span> + System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorServiceExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> .forEach(cnt-&gt;newCachedThreadPool.execute(<span class="keyword">new</span> MyWorker(cnt)));</span><br><span class="line">newCachedThreadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><p><code>newFixedThreadPool</code> method Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.. </p><p><em>In below example 5 Threds will run Simultaneously. After Complition of task same 5 threds will be used for next 5 taks </em></p><figure class="highlight java"><figcaption><span>newFixedThreadPool Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyWorker</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyWorker id "</span> + id + <span class="string">" IS Working"</span> + <span class="string">"Start Time "</span> + System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorServiceExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> .forEach(cnt-&gt;newFixedThreadPool.execute(<span class="keyword">new</span> MyWorker(cnt)));</span><br><span class="line">newFixedThreadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><p><code>newSingleThreadExecutor</code> method Creates an Executor that uses a single worker thread operating off an unbounded queue.</p><p><em>In below example 1 Thread will run Simultaneously. After Complition of task same threds will be used for next 10 taks </em></p><figure class="highlight java"><figcaption><span>newSingleThreadExecutor Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyWorker</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyWorker id "</span> + id + <span class="string">" IS Working"</span> + <span class="string">"Start Time "</span> + System.currentTimeMillis());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorServiceExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService newSingleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> .forEach(cnt-&gt;newSingleThreadExecutor.execute(<span class="keyword">new</span> MyWorker(cnt)));</span><br><span class="line">newSingleThreadExecutor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h4><p><code>shutdown()</code><br>An <code>ExecutorService</code> can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an <code>ExecutorService</code>.<br>The <code>shutdown()</code> method will allow previously submitted tasks to execute before terminating, while the <code>shutdownNow()</code> method prevents waiting tasks from starting and attempts to stop currently executing tasks.</p><p><code>execute()</code><br>Executes the given command at some time in the future. The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the Executor implementation.<br>execute method only takes <strong>runnable</strong> task.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Article is part of Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concurr
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Semaphores</title>
    <link href="https://nirajsonawane.github.io/2018/06/15/Semaphores/"/>
    <id>https://nirajsonawane.github.io/2018/06/15/Semaphores/</id>
    <published>2018-06-15T12:47:27.000Z</published>
    <updated>2018-06-15T14:15:27.910Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Semaphores are a really simple concept, invented by the famous Dutch computer scientist Edsger Dijkstra.</strong> </p><p>Basically a semaphore is a counter (integer) that allows a thread to get into a critical region.<br>What the counter is counting are permits that allow access to the shared resource. Thus, to access the resource, a thread must be granted a permit from the semaphore.</p><p>If the value of the counter is greater than 0 then thread get the permit otherwise waits for the permit.<br>Once thread leaves the critical region increments the counter so that other thread can access the critical section.  </p><p>Most of the time we use semaphores to limit the number of concurrent threads accessing a specific resource.</p><p><strong>Example</strong><br>let consider, We want to limit connections to some resources to some max limit.Similar to connection pool.<br>In below example 10 threads are trying to get connection at same time.But we should not allow more than 5 connections </p><figure class="highlight java"><figcaption><span>Semaphore Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nirajsonawane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Semaphore connectionSemaphore;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">(<span class="keyword">int</span> poolsize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.connectionSemaphore = <span class="keyword">new</span> Semaphore(poolsize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnectionFromPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (connectionSemaphore.availablePermits() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">connectionSemaphore.tryAcquire();</span><br><span class="line">System.out.println(<span class="string">"Get the connection"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Max active connection limit reach!! try again"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">connectionSemaphore.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionService</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConnectionPool connectionPool;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConnectionService</span><span class="params">(ConnectionPool connectionPool)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.connectionPool = connectionPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">connectionPool.getConnectionFromPool();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Semaphores</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">ConnectionPool connectionPool = <span class="keyword">new</span> ConnectionPool(<span class="number">5</span>);</span><br><span class="line">ConnectionService service = <span class="keyword">new</span> ConnectionService(connectionPool);</span><br><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">.forEach((cnt) -&gt; executorService.execute(service));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Out of 10 threds only 5 was able to get the connection.</em></p><img src="/2018/06/15/Semaphores/output.png" title="OutPut"><p><strong>Key Points</strong></p><ol><li><code>tryAcquire()</code>â€“ Return true if a permit is available immediately and acquire it otherwise return false,</li><li><code>acquire()</code>- Acquires a permit and blocking until one is available.</li><li><code>release()</code> â€“ Release a permit</li><li><code>availablePermits()</code> â€“ Return number of current permits available</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Semaphores are a really simple concept, invented by the famous Dutch computer scientist Edsger Dijkstra.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Basical
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Wait-Notify-And-Notifyall</title>
    <link href="https://nirajsonawane.github.io/2018/06/15/Wait-Notify-And-Notifyall/"/>
    <id>https://nirajsonawane.github.io/2018/06/15/Wait-Notify-And-Notifyall/</id>
    <published>2018-06-15T09:07:17.000Z</published>
    <updated>2018-06-15T11:36:56.779Z</updated>
    
    <content type="html"><![CDATA[<p>This is Sixth Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><p>In this article, we will look at one of the most basic methods of Java-thread synchronization.</p><p><code>Object</code> Class in Java has three final methods to allow threads to communicate about the lock status of the threads. </p><h4 id="These-methods-are-wait-notify-and-notifyAll"><a href="#These-methods-are-wait-notify-and-notifyAll" class="headerlink" title="These methods are wait(), notify() and notifyAll()."></a>These methods are <code>wait()</code>, <code>notify()</code> and <code>notifyAll()</code>.</h4><h5 id="wait"><a href="#wait" class="headerlink" title="wait()"></a><code>wait()</code></h5><p>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.</p><h5 id="notify"><a href="#notify" class="headerlink" title="notify()"></a><code>notify()</code></h5><p>Wakes up a single thread that is waiting on this objectâ€™s monitor.</p><h5 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll()"></a><code>notifyAll()</code></h5><p>Wakes up all threads that are waiting on this objectâ€™s monitor.</p><h6 id="Letâ€™s-try-to-implement-Producer-amp-Consumer-problem-using-wait-notify-amp-notifyAll"><a href="#Letâ€™s-try-to-implement-Producer-amp-Consumer-problem-using-wait-notify-amp-notifyAll" class="headerlink" title="Letâ€™s try to implement Producer &amp; Consumer problem using wait(),notify()&amp; notifyAll();"></a>Letâ€™s try to implement Producer &amp; Consumer problem using wait(),notify()&amp; notifyAll();</h6><p>Producer will add number in List. List can have maximum 5 numbers . Consumer will remove elements from list until it becomes empty.</p><figure class="highlight java"><figcaption><span>Volatile Keyword Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="keyword">package</span> com.nirajsonawane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (list.size() == <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"List is full Notifying Consumer &amp; Releasing Lock"</span>);</span><br><span class="line">notifyAll();</span><br><span class="line">wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (list.size() &lt; <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Adding items"</span>);</span><br><span class="line">list.add(random.nextInt());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumner</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"List is Empty :Notifying Publisher &amp; Releasing Lock"</span>);</span><br><span class="line">notifyAll();</span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Size of list "</span> + list.size() + <span class="string">" Removed Number is "</span> + list.remove(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyNotifyAllExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Processor p = <span class="keyword">new</span> Processor();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(() -&gt; p.producer());</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(() -&gt; p.consumner());</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Sixth Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concur
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Volatile</title>
    <link href="https://nirajsonawane.github.io/2018/06/15/Volatile/"/>
    <id>https://nirajsonawane.github.io/2018/06/15/Volatile/</id>
    <published>2018-06-15T08:40:37.000Z</published>
    <updated>2018-06-15T08:54:45.606Z</updated>
    
    <content type="html"><![CDATA[<p>This is Fifth Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><p>In this quick article, weâ€™ll focus on a the concept of <code>volatile</code> keyword in the Java language.</p><p>Every read of a <code>volatile</code> variable will be read from the RAM so from the main memory and not from cache. Usually variables are cached for performance reasons.</p><p>Using <code>volatile</code> variables reduces the risk of memory consistency errors, because any write to a volatile variable establishes a happens-before relationship with subsequent reads of that same variable. This means that changes to a volatile variable are always visible to other thread.</p><figure class="highlight java"><figcaption><span>Volatile Keyword Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> COUNT = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Fifth Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concur
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Intrinsic Locks</title>
    <link href="https://nirajsonawane.github.io/2018/06/13/Intrinsic-Locks/"/>
    <id>https://nirajsonawane.github.io/2018/06/13/Intrinsic-Locks/</id>
    <published>2018-06-13T02:08:33.000Z</published>
    <updated>2018-06-13T02:22:17.326Z</updated>
    
    <content type="html"><![CDATA[<p>This is Fourth Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><h4 id="Intrinsic-Locks"><a href="#Intrinsic-Locks" class="headerlink" title="Intrinsic Locks"></a>Intrinsic Locks</h4><p><a href="/2018/06/13/Synchronization/" title="Synchronization">Synchronization</a>  is built around an internal entity known as the <strong>intrinsic lock</strong> or <strong>monitor lock</strong>. Intrinsic locks play a role in both aspects of synchronization: enforcing exclusive access to an objectâ€™s state and establishing happens-before relationships that are essential to visibility.</p><p>Every object has an <code>intrinsic</code> lock associated with it. By convention, a thread that needs exclusive and consistent access to an objectâ€™s fields has to acquire the objectâ€™s intrinsic lock before accessing them, and then release the intrinsic lock when itâ€™s done with them.</p><p> As long as a thread owns an intrinsic lock, no other thread can acquire the same lock. The other thread will block when it attempts to acquire the lock.</p><h4 id="Locks-In-Synchronized-Methods"><a href="#Locks-In-Synchronized-Methods" class="headerlink" title="Locks In Synchronized Methods"></a>Locks In Synchronized Methods</h4><p>We have discussed  Synchronized Methods in previous Article <a href="/2018/06/13/Synchronization/" title="Synchronization">Synchronization</a>.<br>When a thread invokes a synchronized method, it automatically acquires the intrinsic lock for that methodâ€™s object and releases it when the method returns. The lock release occurs even if the return was caused by an uncaught exception.</p><h4 id="Locks-In-Synchronized-Static-Methods"><a href="#Locks-In-Synchronized-Static-Methods" class="headerlink" title="Locks In Synchronized Static Methods"></a>Locks In Synchronized Static Methods</h4><p>As  a static method is associated with a class, not an object. In this case, the thread acquires the intrinsic lock for the Class object associated with the class. Thus access to classâ€™s static fields is controlled by a lock thatâ€™s disti</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Fourth Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concu
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Synchronization</title>
    <link href="https://nirajsonawane.github.io/2018/06/13/Synchronization/"/>
    <id>https://nirajsonawane.github.io/2018/06/13/Synchronization/</id>
    <published>2018-06-13T01:10:27.000Z</published>
    <updated>2018-06-13T02:03:01.338Z</updated>
    
    <content type="html"><![CDATA[<p>This is Third Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><h3 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h3><p>Threads communicate primarily by sharing access to fields and the objects reference fields refer to. This form of communication is extremely efficient, but makes two kinds of errors possible: thread interference and memory consistency errors. The tool needed to prevent these errors is <em>synchronization</em>.</p><p>There are many situations in which multiple threads must share access to common objects.<br>And There may be a situation when multiple threads try to access the same resource, Then they can produce inconsistent result due to concurrency issues.</p><p>e.g  In below example two Threads are trying to increment counter by 1000, So after end of execution. Vlaue of counter should be 2000, but that not the case. </p><figure class="highlight java"><figcaption><span>Inconsistent result due to concurrency - Without Synchronization</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedMethodExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span>   <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">counter = counter+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main start!!"</span>);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">increment();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">increment();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">System.out.println(<span class="string">"Counter "</span> + counter);</span><br><span class="line">System.out.println(<span class="string">"Main End"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/06/13/Synchronization/output1.png" title="OutPut"><p>If you check output , The value of Conter is not exactly equal to 2000.  </p><h3 id="Synchronization-idioms"><a href="#Synchronization-idioms" class="headerlink" title="Synchronization idioms"></a>Synchronization idioms</h3><p>The Java programming language provides two basic synchronization idioms: <code>synchronized methods</code> and <code>synchronized statements</code>.</p><h4 id="Synchronized-Methods"><a href="#Synchronized-Methods" class="headerlink" title="Synchronized Methods"></a>Synchronized Methods</h4><p>To make a method synchronized, simply add the <code>synchronized</code> keyword to its declaration.<br>Synchronized method is used to lock an object for any shared resource. When a thread invokes a synchronized method, it automatically acquires the lock for that object and releases it when the thread completes its task.</p><p>If in above exapmle we make increment method as Synchronized, then has two effects:</p><p><em>First</em>, it is not possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object.</p><p><em>Second</em>, when a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads.</p><figure class="highlight java"><figcaption><span>Synchronized Method Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedMethodExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>   <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">counter = counter+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main start!!"</span>);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">increment();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">increment();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">System.out.println(<span class="string">"Counter "</span> + counter);</span><br><span class="line">System.out.println(<span class="string">"Main End"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2018/06/13/Synchronization/output2.png" title="OutPut"><h4 id="Synchronized-Blocks"><a href="#Synchronized-Blocks" class="headerlink" title="Synchronized Blocks"></a>Synchronized Blocks</h4><p>Each time We do not have to synchronize a whole method. Sometimes it is preferable to synchronize only part of a method. Java synchronized blocks inside methods makes this possible.The <code>increment</code> method  Can implemented by using Synchronized Blocks<br><figure class="highlight java"><figcaption><span>Synchronized Block Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span>   <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;  </span><br><span class="line">    counter = counter+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>It is better to use Synchronized Blocks using private object, rather than putting it on a method.</strong></p><p>Putting it on the method means you are using the lock of the object itself to provide thread safety. With this kind of mechanism, it is possible for a malicious user of your code to also obtain the lock on your object, and hold it forever, effectively blocking other threads. A non-malicious user can effectively do the same thing inadvertently.</p><p>If you use the lock of a private data member, you can prevent this, since it is impossible for a malicious user to obtain the lock on your private object.</p><figure class="highlight java"><figcaption><span>Synchronized Block Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Object lockObject = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span>   <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(lockObject)&#123;  </span><br><span class="line">    counter = counter+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Third Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concur
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Join Method</title>
    <link href="https://nirajsonawane.github.io/2018/06/10/Join-Method/"/>
    <id>https://nirajsonawane.github.io/2018/06/10/Join-Method/</id>
    <published>2018-06-10T11:40:23.000Z</published>
    <updated>2018-06-10T12:11:51.659Z</updated>
    
    <content type="html"><![CDATA[<p>This is Second Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><p>The <code>join</code> method allows one thread to wait for the completion of another. If t is a <code>Thread</code> object whose thread is currently executing,</p><p><code>t.join();</code><br>causes the current thread to pause execution until tâ€™s thread terminates.</p><p>Overloads of join allow the programmer to specify a waiting period. However, as with sleep, join is dependent on the OS for timing, so you should not assume that join will wait exactly as long as you specify.</p><p><code>join</code> responds to an interrupt by exiting with an <code>InterruptedException</code></p><figure class="highlight java"><figcaption><span>Join Method Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinMethodExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">"Thread Number 1"</span>));</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">"Thread Number 2"</span>));</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">  System.out.println(<span class="string">"Main Method End"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/06/10/Join-Method/output1.png" title="OutPut"><p>If you check output , The main <code>Thread</code> ends before <code>T2</code> Thread. If you want to wait for Completion of  <code>T2</code> then we need to call <code>join</code> method.</p><figure class="highlight java"><figcaption><span>Join Method Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinMethodExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">"Thread Number 1"</span>));</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">"Thread Number 2"</span>));</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">t2.join();</span><br><span class="line">  System.out.println(<span class="string">"Main Method End"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/06/10/Join-Method/output2.png" title="OutPut">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is Second Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concu
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Creating Threads in Java</title>
    <link href="https://nirajsonawane.github.io/2018/06/10/Creating-Threads/"/>
    <id>https://nirajsonawane.github.io/2018/06/10/Creating-Threads/</id>
    <published>2018-06-10T10:17:39.000Z</published>
    <updated>2018-06-10T12:09:20.180Z</updated>
    
    <content type="html"><![CDATA[<p>This is First Article in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p><h3 id="Threads-can-be-Created-using-below-ways"><a href="#Threads-can-be-Created-using-below-ways" class="headerlink" title="Threads can be Created using below ways."></a>Threads can be Created using below ways.</h3><h4 id="Extending-Thread-class"><a href="#Extending-Thread-class" class="headerlink" title="Extending Thread class"></a>Extending Thread class</h4><p>The First way is to extend the <code>Thread</code> class, and  override the <code>run()</code><br>The extending class must override <code>run()</code> method which is the entry point of new thread.</p><figure class="highlight java"><figcaption><span>Extending Thread class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadRunner</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"ThreadRunner : "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatingThreadsExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"></span><br><span class="line">Thread t1= <span class="keyword">new</span> ThreadRunner();</span><br><span class="line">t1.start();</span><br><span class="line">System.out.println(<span class="string">"Main Method End"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Implementing-the-Runnable-Interface"><a href="#Implementing-the-Runnable-Interface" class="headerlink" title="Implementing the Runnable Interface"></a>Implementing the Runnable Interface</h4><p>We Can pass an implementation of the Runnable interface to the constructor of <code>Thread</code>, then call <code>start()</code></p><figure class="highlight java"><figcaption><span>Implementing the Runnable Interface</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"ThreadRunner1 : "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatingThreadsExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"></span><br><span class="line">Thread t1= <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadRunner());</span><br><span class="line">t1.start();</span><br><span class="line">System.out.println(<span class="string">"Main Method End"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Threads-Using-Anonymous-Classes"><a href="#Threads-Using-Anonymous-Classes" class="headerlink" title="Threads Using Anonymous Classes"></a>Threads Using Anonymous Classes</h4><p><strong>Anonymous Inner class</strong> is an inner class that is declared without any class name and thatâ€™s why itâ€™s called anonymous. You can define an anonymous inner class within a method or even within an argument to a method. </p><p>Anonymous class can be used to -<br><strong>Extend</strong> an class and override its method.<br><strong>Implement</strong> an interface and provide an implementation of its method.</p><figure class="highlight java"><figcaption><span>Threads Using Anonymous Classes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatingThreadsExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Main Method Start"</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"ThreadRunner : "</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Threads-Using-Java-8-Lambda"><a href="#Threads-Using-Java-8-Lambda" class="headerlink" title="Threads Using Java 8 Lambda"></a>Threads Using Java 8 Lambda</h4><p><code>Runnable</code> is a functional interface and we can use lambda expressions to provide itâ€™s implementation rather than using anonymous class. </p><figure class="highlight java"><figcaption><span>Threads Using Anonymous Classes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatingThreadsExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Runnable task = () -&gt; &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"ThreadRunner2 : "</span> + i);</span><br><span class="line">&#125; &#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(task).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next <a href="/2018/06/10/Join-Method/" title="Join Method">Join Method</a>.  in Series of  Articles on  <a href="/2018/06/10/Concurrency-1-0/" title="Java 8 Concurrency Tutorial">Java 8 Concurrency Tutorial</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is First Article in Series of  Articles on  &lt;a href=&quot;/2018/06/10/Concurrency-1-0/&quot; title=&quot;Java 8 Concurrency Tutorial&quot;&gt;Java 8 Concur
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 Concurrency Tutorial</title>
    <link href="https://nirajsonawane.github.io/2018/06/10/Concurrency-1-0/"/>
    <id>https://nirajsonawane.github.io/2018/06/10/Concurrency-1-0/</id>
    <published>2018-06-10T09:56:34.000Z</published>
    <updated>2018-06-15T19:05:42.526Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Java Concurrency tutorials. These articles will describe you the Java Concurrency concepts in the context of Java 8 with easily understood code examples. </p><p>The majority of concepts shown in these articles are also available in older versions of Java.<br>However, my code samples focus on Java 8 and make heavy use of lambda expressions and other new features.</p><h4 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h4><ol><li><a href="/2018/06/10/Creating-Threads/" title="Creating Threads in Java">Creating Threads in Java</a></li><li><a href="/2018/06/10/Join-Method/" title="Join Method">Join Method</a></li><li><a href="/2018/06/13/Synchronization/" title="Synchronization">Synchronization</a></li><li><a href="/2018/06/13/Intrinsic-Locks/" title="Intrinsic Locks">Intrinsic Locks</a> </li><li><a href="/2018/06/15/Volatile/" title="Volatile">Volatile</a> </li><li><a href="/2018/06/15/Wait-Notify-And-Notifyall/" title="Wait-Notify-And-Notifyall">Wait-Notify-And-Notifyall</a> </li><li><a href="/2018/06/15/Semaphores/" title="Semaphores">Semaphores</a> </li><li><a href="/2018/06/15/ExecutorServiceAndThreadPools/" title="ExecutorServiceAndThreadPools">ExecutorServiceAndThreadPools</a> </li><li><p>Threads pools with the Executor Framework</p></li><li>Futures and Callables</li><li>CompletableFuture</li><li>Nonblocking algorithms</li><li>Fork-Join in Java 7</li><li>Deadlock</li></ol><p>Check The  First Article in Series of Java Concurrency tutorials <a href="/2018/06/10/Creating-Threads/" title="Creating Threads in Java">Creating Threads in Java</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to Java Concurrency tutorials. These articles will describe you the Java Concurrency concepts in the context of Java 8 with easil
      
    
    </summary>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/categories/Multithreading/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
      <category term="Concurrency" scheme="https://nirajsonawane.github.io/tags/Concurrency/"/>
    
      <category term="Multithreading" scheme="https://nirajsonawane.github.io/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>Watching a Directory for Changes</title>
    <link href="https://nirajsonawane.github.io/2018/06/01/Watching-a-Directory-for-Changes/"/>
    <id>https://nirajsonawane.github.io/2018/06/01/Watching-a-Directory-for-Changes/</id>
    <published>2018-06-01T01:12:32.000Z</published>
    <updated>2018-06-09T19:05:32.934Z</updated>
    
    <content type="html"><![CDATA[<p>The <code>java.nio.file</code> package provides a file change notification API, called the <strong>Watch Service API</strong>.</p><p>This API enables you to register a directory (or directories) with the watch service. When registering, you tell the service which types of events you are interested in:<br><strong>1:File creation.<br>2:File deletion.<br>3:File Modification.</strong></p><p>When the service detects an event of interest, it is forwarded to the registered process. </p><p>The registered process has a thread (or a pool of threads) dedicated to watching for any events it has registered for. When an event comes in, it is handled as needed.</p><h4 id="Creating-watcher-service"><a href="#Creating-watcher-service" class="headerlink" title="Creating watcher service"></a>Creating watcher service</h4><p>The first step is to create a new <code>WatchService</code> by using the <code>newWatchService</code> method in the <code>FileSystem</code> class, as follows:</p><p><code>WatchService watcher = FileSystems.getDefault().newWatchService()</code></p><h4 id="Registering-for-Events"><a href="#Registering-for-Events" class="headerlink" title="Registering for Events"></a>Registering for Events</h4><p>We Can register one or more objects with the watch service.<strong>Any object that implements the Watchable interface</strong> can be registered.<br>The <code>Path</code> class implements the Watchable interface, so each directory to be monitored is registered as a Path object.</p><p>When registering an object with the watch service, you specify the types of events that you want to monitor. The supported <em>StandardWatchEventKinds</em> event types follow:</p><ol><li><code>ENTRY_CREATE</code> â€“ A directory entry is created.</li><li><code>ENTRY_DELETE</code> â€“ A directory entry is deleted.</li><li><code>ENTRY_MODIFY</code> â€“ A directory entry is modified.</li></ol><figure class="highlight java"><figcaption><span>Registering for Events</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WatchService watcher = FileSystems.getDefault().newWatchService()</span><br><span class="line">Path dir = Paths.get(<span class="string">"C:\\data\\temp\\mydir\\"</span>);</span><br><span class="line">dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);</span><br></pre></td></tr></table></figure><h3 id="Directory-Watching-Example"><a href="#Directory-Watching-Example" class="headerlink" title="Directory Watching Example"></a>Directory Watching Example</h3><p>Putting all above together. We can now go ahead and look at a complete and practical example.</p><p>In below example we are going to watch directory for all the changes and will process the events. </p><figure class="highlight java"><figcaption><span>Directory Watching Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.WatchEvent;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.WatchKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.WatchService;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectoryChangeListeners</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WatchService watcher = FileSystems.getDefault().newWatchService();</span><br><span class="line">            Path dir = Paths.get(<span class="string">"C:\\data\\temp\\"</span>);</span><br><span class="line">            dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);             </span><br><span class="line">            System.out.println(<span class="string">"Watch Service registered for dir: "</span> + dir.getFileName());</span><br><span class="line">            WatchKey key;</span><br><span class="line">            <span class="keyword">while</span> ((key = watcher.take())!=<span class="keyword">null</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (WatchEvent&lt;?&gt; event : key.pollEvents()) &#123;</span><br><span class="line">                     </span><br><span class="line">                WatchEvent.Kind&lt;?&gt; kind = event.kind();</span><br><span class="line">                    </span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    WatchEvent&lt;Path&gt; ev = (WatchEvent&lt;Path&gt;) event;</span><br><span class="line">                    Path fileName = ev.context();</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(kind==ENTRY_CREATE)</span><br><span class="line">                    &#123;</span><br><span class="line">                    System.out.println(<span class="string">"New File Added, file Name "</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(kind==ENTRY_DELETE)</span><br><span class="line">                    &#123;</span><br><span class="line">                    System.out.println(<span class="string">"File Deleted "</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line">                     </span><br><span class="line">                    <span class="keyword">if</span> (kind == ENTRY_MODIFY ) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"File Modified "</span> + fileName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">boolean</span> valid = key.reset();</span><br><span class="line">                <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            System.err.println(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h3><h5 id="Three-methods-are-available-for-Retrieving-events"><a href="#Three-methods-are-available-for-Retrieving-events" class="headerlink" title="Three methods are available for Retrieving events :"></a>Three methods are available for Retrieving events :</h5><ol><li><code>poll</code> â€“ Returns a queued key, if available. Returns immediately with a null value, if unavailable.</li><li><code>poll(long, TimeUnit)</code> â€“ Returns a queued key, if one is available. If a queued key is not immediately available, the program waits until the specified time. The TimeUnit argument determines whether the specified time is nanoseconds, milliseconds, or some other unit of time.</li><li><code>take</code> â€“ Returns a queued key. If no queued key is available, this method waits.</li></ol><h5 id="Reset-key"><a href="#Reset-key" class="headerlink" title="Reset key"></a>Reset key</h5><p>After the events for the key have been processed, you need to put the key back into a ready state by invoking reset. If this method returns false, the key is no longer valid and the loop can exit. This step is very important. If you fail to invoke reset, this key will not receive any further events.</p><h5 id="When-to-Use-and-Not-Use-This-API"><a href="#When-to-Use-and-Not-Use-This-API" class="headerlink" title="When to Use and Not Use This API"></a>When to Use and Not Use This API</h5><p>The Watch Service API is designed for applications that need to be notified about file change events. It is well suited for any application, like an editor or IDE, that potentially has many open files and needs to ensure that the files are synchronized with the file system. It is also well suited for an application server that watches a directory, perhaps waiting for .jsp or .jar files to drop, in order to deploy them.</p><p>This API is not designed for indexing a hard drive. Most file system implementations have native support for file change notification. The Watch Service API takes advantage of this support where available. However, when a file system does not support this mechanism, the Watch Service will poll the file system, waiting for events.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The &lt;code&gt;java.nio.file&lt;/code&gt; package provides a file change notification API, called the &lt;strong&gt;Watch Service API&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Thi
      
    
    </summary>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/categories/Java-8/"/>
    
      <category term="File" scheme="https://nirajsonawane.github.io/categories/Java-8/File/"/>
    
    
      <category term="Java" scheme="https://nirajsonawane.github.io/tags/Java/"/>
    
      <category term="Java-8" scheme="https://nirajsonawane.github.io/tags/Java-8/"/>
    
  </entry>
  
</feed>
